// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlserver

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Node interface {
	IsNode()
	GetID() string
}

type Timestamped interface {
	IsTimestamped()
	GetCreatedAt() string
}

type CreateUserInput struct {
	Name  string `json:"name"`
	Email string `json:"email"`
	Age   *int   `json:"age,omitempty"`
}

type Mutation struct {
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor,omitempty"`
	EndCursor       *string `json:"endCursor,omitempty"`
}

type Post struct {
	ID        string `json:"id"`
	Title     string `json:"title"`
	Content   string `json:"content"`
	Author    *User  `json:"author"`
	CreatedAt string `json:"createdAt"`
}

func (Post) IsNode()            {}
func (this Post) GetID() string { return this.ID }

func (Post) IsTimestamped()            {}
func (this Post) GetCreatedAt() string { return this.CreatedAt }

type PostConnection struct {
	Posts    []*Post   `json:"posts"`
	PageInfo *PageInfo `json:"pageInfo"`
}

type Query struct {
}

type ServerInfo struct {
	Version    string `json:"version"`
	Platform   string `json:"platform"`
	Uptime     string `json:"uptime"`
	TotalUsers int    `json:"totalUsers"`
	TotalPosts int    `json:"totalPosts"`
}

type UpdateUserInput struct {
	Name  *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
	Age   *int    `json:"age,omitempty"`
}

type User struct {
	ID     string          `json:"id"`
	Name   string          `json:"name"`
	Emails []string        `json:"emails"`
	Age    *int            `json:"age,omitempty"`
	Status Status          `json:"status"`
	Posts  *PostConnection `json:"posts"`
}

func (User) IsNode()            {}
func (this User) GetID() string { return this.ID }

type UserProfile struct {
	User              *User    `json:"user"`
	JoinedDate        string   `json:"joinedDate"`
	LastActivity      string   `json:"lastActivity"`
	PostCount         *int     `json:"postCount,omitempty"`
	AveragePostLength *float64 `json:"averagePostLength,omitempty"`
	Bio               *string  `json:"bio,omitempty"`
}

type Status string

const (
	StatusActive   Status = "ACTIVE"
	StatusInactive Status = "INACTIVE"
	StatusPending  Status = "PENDING"
	StatusArchived Status = "ARCHIVED"
)

var AllStatus = []Status{
	StatusActive,
	StatusInactive,
	StatusPending,
	StatusArchived,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusActive, StatusInactive, StatusPending, StatusArchived:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Status) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Status) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
