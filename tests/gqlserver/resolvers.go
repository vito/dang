package gqlserver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"strconv"
)

// Mock data store
var users = []*User{
	{ID: "1", Name: "John Doe", Email: "john@example.com", Age: func(i int) *int { return &i }(30)},
	{ID: "2", Name: "Jane Smith", Email: "jane@example.com", Age: func(i int) *int { return &i }(25)},
}

var posts = []*Post{
	{ID: "1", Title: "First Post", Content: "Hello World!", Author: users[0], CreatedAt: "2024-01-01T00:00:00Z"},
	{ID: "2", Title: "Second Post", Content: "GraphQL is awesome!", Author: users[1], CreatedAt: "2024-01-02T00:00:00Z"},
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input CreateUserInput) (*User, error) {
	newID := strconv.Itoa(len(users) + 1)
	user := &User{
		ID:    newID,
		Name:  input.Name,
		Email: input.Email,
		Age:   input.Age,
	}
	users = append(users, user)
	return user, nil
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input UpdateUserInput) (*User, error) {
	for _, user := range users {
		if user.ID == id {
			if input.Name != nil {
				user.Name = *input.Name
			}
			if input.Email != nil {
				user.Email = *input.Email
			}
			if input.Age != nil {
				user.Age = input.Age
			}
			return user, nil
		}
	}
	return nil, fmt.Errorf("user not found")
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (bool, error) {
	for i, user := range users {
		if user.ID == id {
			users = append(users[:i], users[i+1:]...)
			return true, nil
		}
	}
	return false, fmt.Errorf("user not found")
}

// Hello is the resolver for the hello field.
func (r *queryResolver) Hello(ctx context.Context, name string) (string, error) {
	return fmt.Sprintf("Hello, %s!", name), nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context) ([]*User, error) {
	return users, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*User, error) {
	for _, user := range users {
		if user.ID == id {
			return user, nil
		}
	}
	return nil, fmt.Errorf("user not found")
}

// Resolver is the root resolver
type Resolver struct{}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }