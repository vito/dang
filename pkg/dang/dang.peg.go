// Code generated by pigeon; DO NOT EDIT.

package dang

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Dang",
			pos:  position{line: 12, col: 1, offset: 86},
			expr: &actionExpr{
				pos: position{line: 12, col: 9, offset: 94},
				run: (*parser).callonDang1,
				expr: &seqExpr{
					pos: position{line: 12, col: 9, offset: 94},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 12, col: 9, offset: 94},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 12, col: 11, offset: 96},
							label: "eles",
							expr: &zeroOrMoreExpr{
								pos: position{line: 12, col: 16, offset: 101},
								expr: &actionExpr{
									pos: position{line: 12, col: 17, offset: 102},
									run: (*parser).callonDang6,
									expr: &seqExpr{
										pos: position{line: 12, col: 17, offset: 102},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 12, col: 17, offset: 102},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 12, col: 19, offset: 104},
													name: "Expr",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 12, col: 24, offset: 109},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 12, col: 48, offset: 133},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 12, col: 53, offset: 138},
								expr: &ruleRefExpr{
									pos:  position{line: 12, col: 53, offset: 138},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 12, col: 59, offset: 144},
							name: "_",
						},
						&notExpr{
							pos: position{line: 12, col: 61, offset: 146},
							expr: &anyMatcher{
								line: 12, col: 62, offset: 147,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 19, col: 1, offset: 241},
			expr: &zeroOrMoreExpr{
				pos: position{line: 19, col: 19, offset: 259},
				expr: &choiceExpr{
					pos: position{line: 19, col: 20, offset: 260},
					alternatives: []any{
						&charClassMatcher{
							pos:        position{line: 19, col: 20, offset: 260},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
						&ruleRefExpr{
							pos:  position{line: 19, col: 32, offset: 272},
							name: "CommentToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "_lineSpace",
			pos:  position{line: 20, col: 1, offset: 287},
			expr: &seqExpr{
				pos: position{line: 20, col: 15, offset: 301},
				exprs: []any{
					&zeroOrMoreExpr{
						pos: position{line: 20, col: 15, offset: 301},
						expr: &charClassMatcher{
							pos:        position{line: 20, col: 15, offset: 301},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 20, col: 22, offset: 308},
						expr: &ruleRefExpr{
							pos:  position{line: 20, col: 22, offset: 308},
							name: "CommentToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Sep",
			pos:  position{line: 22, col: 1, offset: 323},
			expr: &seqExpr{
				pos: position{line: 22, col: 8, offset: 330},
				exprs: []any{
					&choiceExpr{
						pos: position{line: 22, col: 9, offset: 331},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 22, col: 9, offset: 331},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 22, col: 9, offset: 331},
										name: "_",
									},
									&ruleRefExpr{
										pos:  position{line: 22, col: 11, offset: 333},
										name: "CommaToken",
									},
								},
							},
							&seqExpr{
								pos: position{line: 22, col: 24, offset: 346},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 22, col: 24, offset: 346},
										name: "_lineSpace",
									},
									&litMatcher{
										pos:        position{line: 22, col: 35, offset: 357},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 41, offset: 363},
						name: "_",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CommaToken",
			pos:  position{line: 23, col: 1, offset: 365},
			expr: &litMatcher{
				pos:        position{line: 23, col: 15, offset: 379},
				val:        ",",
				ignoreCase: false,
				want:       "\",\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Expr",
			pos:  position{line: 25, col: 1, offset: 384},
			expr: &choiceExpr{
				pos: position{line: 25, col: 9, offset: 392},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 25, col: 9, offset: 392},
						name: "Import",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 18, offset: 401},
						name: "AnnotatedDecl",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 34, offset: 417},
						name: "Class",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 42, offset: 425},
						name: "Slot",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 49, offset: 432},
						name: "DirectiveDecl",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 65, offset: 448},
						name: "Reassignment",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 80, offset: 463},
						name: "Form",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AnnotatedDecl",
			pos:  position{line: 27, col: 1, offset: 469},
			expr: &actionExpr{
				pos: position{line: 27, col: 18, offset: 486},
				run: (*parser).callonAnnotatedDecl1,
				expr: &seqExpr{
					pos: position{line: 27, col: 18, offset: 486},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 27, col: 18, offset: 486},
							label: "docstring",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 28, offset: 496},
								name: "DocString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 27, col: 38, offset: 506},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 27, col: 40, offset: 508},
							label: "decl",
							expr: &choiceExpr{
								pos: position{line: 27, col: 46, offset: 514},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 27, col: 46, offset: 514},
										name: "Class",
									},
									&ruleRefExpr{
										pos:  position{line: 27, col: 54, offset: 522},
										name: "Slot",
									},
									&ruleRefExpr{
										pos:  position{line: 27, col: 61, offset: 529},
										name: "DirectiveDecl",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Form",
			pos:  position{line: 43, col: 1, offset: 858},
			expr: &choiceExpr{
				pos: position{line: 43, col: 9, offset: 866},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 43, col: 9, offset: 866},
						name: "Conditional",
					},
					&ruleRefExpr{
						pos:  position{line: 43, col: 23, offset: 880},
						name: "While",
					},
					&ruleRefExpr{
						pos:  position{line: 43, col: 31, offset: 888},
						name: "ForLoop",
					},
					&ruleRefExpr{
						pos:  position{line: 43, col: 41, offset: 898},
						name: "Lambda",
					},
					&ruleRefExpr{
						pos:  position{line: 43, col: 50, offset: 907},
						name: "Match",
					},
					&ruleRefExpr{
						pos:  position{line: 43, col: 58, offset: 915},
						name: "Assert",
					},
					&ruleRefExpr{
						pos:  position{line: 43, col: 67, offset: 924},
						name: "DefaultExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 43, col: 81, offset: 938},
						name: "TypeHint",
					},
					&ruleRefExpr{
						pos:  position{line: 43, col: 92, offset: 949},
						name: "Term",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Term",
			pos:  position{line: 45, col: 1, offset: 955},
			expr: &choiceExpr{
				pos: position{line: 45, col: 9, offset: 963},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 45, col: 9, offset: 963},
						name: "IndexOrCall",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 23, offset: 977},
						name: "SelectOrCall",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 38, offset: 992},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 48, offset: 1002},
						name: "List",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 55, offset: 1009},
						name: "Object",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 64, offset: 1018},
						name: "Block",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 72, offset: 1026},
						name: "ParenForm",
					},
					&ruleRefExpr{
						pos:  position{line: 45, col: 84, offset: 1038},
						name: "SymbolOrCall",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "ParenForm",
			pos:  position{line: 47, col: 1, offset: 1052},
			expr: &actionExpr{
				pos: position{line: 47, col: 14, offset: 1065},
				run: (*parser).callonParenForm1,
				expr: &seqExpr{
					pos: position{line: 47, col: 14, offset: 1065},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 47, col: 14, offset: 1065},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 47, col: 18, offset: 1069},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 47, col: 20, offset: 1071},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 47, col: 25, offset: 1076},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 47, col: 30, offset: 1081},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 47, col: 32, offset: 1083},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SymbolOrCall",
			pos:  position{line: 52, col: 1, offset: 1159},
			expr: &choiceExpr{
				pos: position{line: 52, col: 17, offset: 1175},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 52, col: 17, offset: 1175},
						name: "Call",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 24, offset: 1182},
						name: "Symbol",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Call",
			pos:  position{line: 53, col: 1, offset: 1189},
			expr: &actionExpr{
				pos: position{line: 53, col: 9, offset: 1197},
				run: (*parser).callonCall1,
				expr: &seqExpr{
					pos: position{line: 53, col: 9, offset: 1197},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 53, col: 9, offset: 1197},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 14, offset: 1202},
								name: "Id",
							},
						},
						&labeledExpr{
							pos:   position{line: 53, col: 17, offset: 1205},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 53, col: 22, offset: 1210},
								name: "ArgValues",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Symbol",
			pos:  position{line: 65, col: 1, offset: 1449},
			expr: &actionExpr{
				pos: position{line: 65, col: 11, offset: 1459},
				run: (*parser).callonSymbol1,
				expr: &labeledExpr{
					pos:   position{line: 65, col: 11, offset: 1459},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 65, col: 16, offset: 1464},
						name: "Id",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SelectOrCall",
			pos:  position{line: 75, col: 1, offset: 1641},
			expr: &actionExpr{
				pos: position{line: 75, col: 17, offset: 1657},
				run: (*parser).callonSelectOrCall1,
				expr: &seqExpr{
					pos: position{line: 75, col: 17, offset: 1657},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 75, col: 17, offset: 1657},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 75, col: 22, offset: 1662},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 75, col: 27, offset: 1667},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 75, col: 29, offset: 1669},
							name: "DotToken",
						},
						&ruleRefExpr{
							pos:  position{line: 75, col: 38, offset: 1678},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 75, col: 40, offset: 1680},
							label: "selection",
							expr: &choiceExpr{
								pos: position{line: 75, col: 51, offset: 1691},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 75, col: 51, offset: 1691},
										name: "ObjectSelection",
									},
									&seqExpr{
										pos: position{line: 75, col: 69, offset: 1709},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 75, col: 69, offset: 1709},
												label: "name",
												expr: &ruleRefExpr{
													pos:  position{line: 75, col: 74, offset: 1714},
													name: "Id",
												},
											},
											&labeledExpr{
												pos:   position{line: 75, col: 77, offset: 1717},
												label: "args",
												expr: &zeroOrOneExpr{
													pos: position{line: 75, col: 82, offset: 1722},
													expr: &ruleRefExpr{
														pos:  position{line: 75, col: 82, offset: 1722},
														name: "ArgValues",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "IndexOrCall",
			pos:  position{line: 112, col: 1, offset: 2627},
			expr: &actionExpr{
				pos: position{line: 112, col: 16, offset: 2642},
				run: (*parser).callonIndexOrCall1,
				expr: &seqExpr{
					pos: position{line: 112, col: 16, offset: 2642},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 112, col: 16, offset: 2642},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 21, offset: 2647},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 26, offset: 2652},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 112, col: 28, offset: 2654},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 32, offset: 2658},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 112, col: 34, offset: 2660},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 40, offset: 2666},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 45, offset: 2671},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 112, col: 47, offset: 2673},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&labeledExpr{
							pos:   position{line: 112, col: 51, offset: 2677},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 112, col: 56, offset: 2682},
								expr: &ruleRefExpr{
									pos:  position{line: 112, col: 56, offset: 2682},
									name: "ArgValues",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "ObjectSelection",
			pos:  position{line: 136, col: 1, offset: 3171},
			expr: &actionExpr{
				pos: position{line: 136, col: 20, offset: 3190},
				run: (*parser).callonObjectSelection1,
				expr: &seqExpr{
					pos: position{line: 136, col: 20, offset: 3190},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 136, col: 20, offset: 3190},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 136, col: 24, offset: 3194},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 136, col: 26, offset: 3196},
							label: "fields",
							expr: &zeroOrMoreExpr{
								pos: position{line: 136, col: 33, offset: 3203},
								expr: &actionExpr{
									pos: position{line: 136, col: 34, offset: 3204},
									run: (*parser).callonObjectSelection7,
									expr: &seqExpr{
										pos: position{line: 136, col: 34, offset: 3204},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 136, col: 34, offset: 3204},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 136, col: 36, offset: 3206},
													name: "FieldSelection",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 136, col: 51, offset: 3221},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 136, col: 75, offset: 3245},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 136, col: 80, offset: 3250},
								expr: &ruleRefExpr{
									pos:  position{line: 136, col: 80, offset: 3250},
									name: "FieldSelection",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 136, col: 96, offset: 3266},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 136, col: 98, offset: 3268},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FieldSelection",
			pos:  position{line: 144, col: 1, offset: 3445},
			expr: &actionExpr{
				pos: position{line: 144, col: 19, offset: 3463},
				run: (*parser).callonFieldSelection1,
				expr: &seqExpr{
					pos: position{line: 144, col: 19, offset: 3463},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 144, col: 19, offset: 3463},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 144, col: 24, offset: 3468},
								name: "Id",
							},
						},
						&labeledExpr{
							pos:   position{line: 144, col: 27, offset: 3471},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 144, col: 32, offset: 3476},
								expr: &ruleRefExpr{
									pos:  position{line: 144, col: 32, offset: 3476},
									name: "ArgValues",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 144, col: 43, offset: 3487},
							label: "selection",
							expr: &zeroOrOneExpr{
								pos: position{line: 144, col: 53, offset: 3497},
								expr: &seqExpr{
									pos: position{line: 144, col: 54, offset: 3498},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 144, col: 54, offset: 3498},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
										&labeledExpr{
											pos:   position{line: 144, col: 58, offset: 3502},
											label: "sel",
											expr: &ruleRefExpr{
												pos:  position{line: 144, col: 62, offset: 3506},
												name: "ObjectSelection",
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Class",
			pos:  position{line: 167, col: 1, offset: 3964},
			expr: &actionExpr{
				pos: position{line: 167, col: 10, offset: 3973},
				run: (*parser).callonClass1,
				expr: &seqExpr{
					pos: position{line: 167, col: 10, offset: 3973},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 167, col: 10, offset: 3973},
							name: "TypeToken",
						},
						&ruleRefExpr{
							pos:  position{line: 167, col: 20, offset: 3983},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 167, col: 22, offset: 3985},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 167, col: 27, offset: 3990},
								name: "Id",
							},
						},
						&labeledExpr{
							pos:   position{line: 167, col: 30, offset: 3993},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 167, col: 41, offset: 4004},
								expr: &actionExpr{
									pos: position{line: 167, col: 42, offset: 4005},
									run: (*parser).callonClass9,
									expr: &seqExpr{
										pos: position{line: 167, col: 42, offset: 4005},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 167, col: 42, offset: 4005},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 167, col: 44, offset: 4007},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 167, col: 48, offset: 4011},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 167, col: 91, offset: 4054},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 167, col: 93, offset: 4056},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 167, col: 99, offset: 4062},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeToken",
			pos:  position{line: 176, col: 1, offset: 4273},
			expr: &seqExpr{
				pos: position{line: 176, col: 14, offset: 4286},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 176, col: 14, offset: 4286},
						val:        "type",
						ignoreCase: false,
						want:       "\"type\"",
					},
					&notExpr{
						pos: position{line: 176, col: 21, offset: 4293},
						expr: &ruleRefExpr{
							pos:  position{line: 176, col: 22, offset: 4294},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Slot",
			pos:  position{line: 178, col: 1, offset: 4304},
			expr: &choiceExpr{
				pos: position{line: 178, col: 9, offset: 4312},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 178, col: 9, offset: 4312},
						name: "TypeAndArgsAndBlockSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 179, col: 9, offset: 4381},
						name: "TypeAndBlockSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 180, col: 9, offset: 4515},
						name: "TypeAndValueSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 181, col: 9, offset: 4654},
						name: "ValueOnlySlot",
					},
					&ruleRefExpr{
						pos:  position{line: 182, col: 9, offset: 4748},
						name: "TypeOnlySlot",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeAndValueSlot",
			pos:  position{line: 184, col: 1, offset: 4836},
			expr: &actionExpr{
				pos: position{line: 184, col: 21, offset: 4856},
				run: (*parser).callonTypeAndValueSlot1,
				expr: &seqExpr{
					pos: position{line: 184, col: 21, offset: 4856},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 184, col: 21, offset: 4856},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 25, offset: 4860},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 184, col: 36, offset: 4871},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 184, col: 38, offset: 4873},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 43, offset: 4878},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 184, col: 46, offset: 4881},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 184, col: 48, offset: 4883},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 184, col: 59, offset: 4894},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 184, col: 61, offset: 4896},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 67, offset: 4902},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 184, col: 72, offset: 4907},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 184, col: 74, offset: 4909},
							name: "EqualToken",
						},
						&ruleRefExpr{
							pos:  position{line: 184, col: 85, offset: 4920},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 184, col: 87, offset: 4922},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 184, col: 93, offset: 4928},
								name: "Form",
							},
						},
						&labeledExpr{
							pos:   position{line: 184, col: 98, offset: 4933},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 184, col: 109, offset: 4944},
								expr: &actionExpr{
									pos: position{line: 184, col: 110, offset: 4945},
									run: (*parser).callonTypeAndValueSlot20,
									expr: &seqExpr{
										pos: position{line: 184, col: 110, offset: 4945},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 184, col: 110, offset: 4945},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 184, col: 112, offset: 4947},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 184, col: 116, offset: 4951},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ValueOnlySlot",
			pos:  position{line: 195, col: 1, offset: 5218},
			expr: &actionExpr{
				pos: position{line: 195, col: 18, offset: 5235},
				run: (*parser).callonValueOnlySlot1,
				expr: &seqExpr{
					pos: position{line: 195, col: 18, offset: 5235},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 195, col: 18, offset: 5235},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 195, col: 22, offset: 5239},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 195, col: 33, offset: 5250},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 195, col: 35, offset: 5252},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 195, col: 40, offset: 5257},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 195, col: 43, offset: 5260},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 195, col: 45, offset: 5262},
							name: "EqualToken",
						},
						&ruleRefExpr{
							pos:  position{line: 195, col: 56, offset: 5273},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 195, col: 58, offset: 5275},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 195, col: 62, offset: 5279},
								name: "Form",
							},
						},
						&labeledExpr{
							pos:   position{line: 195, col: 67, offset: 5284},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 195, col: 78, offset: 5295},
								expr: &actionExpr{
									pos: position{line: 195, col: 79, offset: 5296},
									run: (*parser).callonValueOnlySlot15,
									expr: &seqExpr{
										pos: position{line: 195, col: 79, offset: 5296},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 195, col: 79, offset: 5296},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 195, col: 81, offset: 5298},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 195, col: 85, offset: 5302},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeOnlySlot",
			pos:  position{line: 205, col: 1, offset: 5538},
			expr: &actionExpr{
				pos: position{line: 205, col: 17, offset: 5554},
				run: (*parser).callonTypeOnlySlot1,
				expr: &seqExpr{
					pos: position{line: 205, col: 17, offset: 5554},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 205, col: 17, offset: 5554},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 21, offset: 5558},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 205, col: 32, offset: 5569},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 205, col: 34, offset: 5571},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 39, offset: 5576},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 205, col: 42, offset: 5579},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 205, col: 44, offset: 5581},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 205, col: 55, offset: 5592},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 205, col: 57, offset: 5594},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 63, offset: 5600},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 205, col: 68, offset: 5605},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 205, col: 79, offset: 5616},
								expr: &actionExpr{
									pos: position{line: 205, col: 80, offset: 5617},
									run: (*parser).callonTypeOnlySlot15,
									expr: &seqExpr{
										pos: position{line: 205, col: 80, offset: 5617},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 205, col: 80, offset: 5617},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 205, col: 82, offset: 5619},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 205, col: 86, offset: 5623},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeAndBlockSlot",
			pos:  position{line: 215, col: 1, offset: 5865},
			expr: &actionExpr{
				pos: position{line: 215, col: 21, offset: 5885},
				run: (*parser).callonTypeAndBlockSlot1,
				expr: &seqExpr{
					pos: position{line: 215, col: 21, offset: 5885},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 215, col: 21, offset: 5885},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 25, offset: 5889},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 215, col: 36, offset: 5900},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 215, col: 38, offset: 5902},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 43, offset: 5907},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 215, col: 46, offset: 5910},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 215, col: 48, offset: 5912},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 215, col: 59, offset: 5923},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 215, col: 61, offset: 5925},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 67, offset: 5931},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 215, col: 72, offset: 5936},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 215, col: 74, offset: 5938},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 215, col: 80, offset: 5944},
								name: "Block",
							},
						},
						&labeledExpr{
							pos:   position{line: 215, col: 86, offset: 5950},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 215, col: 97, offset: 5961},
								expr: &actionExpr{
									pos: position{line: 215, col: 98, offset: 5962},
									run: (*parser).callonTypeAndBlockSlot18,
									expr: &seqExpr{
										pos: position{line: 215, col: 98, offset: 5962},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 215, col: 98, offset: 5962},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 215, col: 100, offset: 5964},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 215, col: 104, offset: 5968},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeAndArgsAndBlockSlot",
			pos:  position{line: 235, col: 1, offset: 6462},
			expr: &actionExpr{
				pos: position{line: 235, col: 28, offset: 6489},
				run: (*parser).callonTypeAndArgsAndBlockSlot1,
				expr: &seqExpr{
					pos: position{line: 235, col: 28, offset: 6489},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 235, col: 28, offset: 6489},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 32, offset: 6493},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 43, offset: 6504},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 45, offset: 6506},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 50, offset: 6511},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 53, offset: 6514},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 55, offset: 6516},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 60, offset: 6521},
								name: "ArgTypes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 69, offset: 6530},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 71, offset: 6532},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 82, offset: 6543},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 84, offset: 6545},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 90, offset: 6551},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 95, offset: 6556},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 97, offset: 6558},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 103, offset: 6564},
								name: "Block",
							},
						},
						&labeledExpr{
							pos:   position{line: 235, col: 109, offset: 6570},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 235, col: 120, offset: 6581},
								expr: &actionExpr{
									pos: position{line: 235, col: 121, offset: 6582},
									run: (*parser).callonTypeAndArgsAndBlockSlot21,
									expr: &seqExpr{
										pos: position{line: 235, col: 121, offset: 6582},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 235, col: 121, offset: 6582},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 235, col: 123, offset: 6584},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 235, col: 127, offset: 6588},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Visibility",
			pos:  position{line: 255, col: 1, offset: 7110},
			expr: &choiceExpr{
				pos: position{line: 255, col: 15, offset: 7124},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 255, col: 15, offset: 7124},
						run: (*parser).callonVisibility2,
						expr: &ruleRefExpr{
							pos:  position{line: 255, col: 15, offset: 7124},
							name: "PubToken",
						},
					},
					&actionExpr{
						pos: position{line: 256, col: 15, offset: 7180},
						run: (*parser).callonVisibility4,
						expr: &ruleRefExpr{
							pos:  position{line: 256, col: 15, offset: 7180},
							name: "LetToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PubToken",
			pos:  position{line: 257, col: 1, offset: 7223},
			expr: &seqExpr{
				pos: position{line: 257, col: 13, offset: 7235},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 257, col: 13, offset: 7235},
						val:        "pub",
						ignoreCase: false,
						want:       "\"pub\"",
					},
					&notExpr{
						pos: position{line: 257, col: 19, offset: 7241},
						expr: &ruleRefExpr{
							pos:  position{line: 257, col: 20, offset: 7242},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LetToken",
			pos:  position{line: 258, col: 1, offset: 7251},
			expr: &seqExpr{
				pos: position{line: 258, col: 13, offset: 7263},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 258, col: 13, offset: 7263},
						val:        "let",
						ignoreCase: false,
						want:       "\"let\"",
					},
					&notExpr{
						pos: position{line: 258, col: 19, offset: 7269},
						expr: &ruleRefExpr{
							pos:  position{line: 258, col: 20, offset: 7270},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Id",
			pos:  position{line: 260, col: 1, offset: 7280},
			expr: &ruleRefExpr{
				pos:  position{line: 260, col: 7, offset: 7286},
				name: "WordToken",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WordToken",
			pos:  position{line: 261, col: 1, offset: 7296},
			expr: &actionExpr{
				pos: position{line: 261, col: 14, offset: 7309},
				run: (*parser).callonWordToken1,
				expr: &seqExpr{
					pos: position{line: 261, col: 14, offset: 7309},
					exprs: []any{
						&notExpr{
							pos: position{line: 261, col: 14, offset: 7309},
							expr: &ruleRefExpr{
								pos:  position{line: 261, col: 15, offset: 7310},
								name: "NullToken",
							},
						},
						&charClassMatcher{
							pos:        position{line: 261, col: 25, offset: 7320},
							val:        "[a-zA-Z_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 261, col: 34, offset: 7329},
							expr: &charClassMatcher{
								pos:        position{line: 261, col: 34, offset: 7329},
								val:        "[a-zA-Z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WordChar",
			pos:  position{line: 264, col: 1, offset: 7376},
			expr: &charClassMatcher{
				pos:        position{line: 264, col: 13, offset: 7388},
				val:        "[a-zA-Z0-9_]",
				chars:      []rune{'_'},
				ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UpperId",
			pos:  position{line: 265, col: 1, offset: 7401},
			expr: &ruleRefExpr{
				pos:  position{line: 265, col: 12, offset: 7412},
				name: "UpperToken",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UpperToken",
			pos:  position{line: 266, col: 1, offset: 7423},
			expr: &actionExpr{
				pos: position{line: 266, col: 15, offset: 7437},
				run: (*parser).callonUpperToken1,
				expr: &seqExpr{
					pos: position{line: 266, col: 15, offset: 7437},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 266, col: 15, offset: 7437},
							val:        "[A-Z]",
							ranges:     []rune{'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 266, col: 20, offset: 7442},
							expr: &charClassMatcher{
								pos:        position{line: 266, col: 20, offset: 7442},
								val:        "[a-zA-Z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgValues",
			pos:  position{line: 270, col: 1, offset: 7490},
			expr: &actionExpr{
				pos: position{line: 270, col: 14, offset: 7503},
				run: (*parser).callonArgValues1,
				expr: &seqExpr{
					pos: position{line: 270, col: 14, offset: 7503},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 270, col: 14, offset: 7503},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 270, col: 18, offset: 7507},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 270, col: 20, offset: 7509},
							label: "args",
							expr: &zeroOrMoreExpr{
								pos: position{line: 270, col: 25, offset: 7514},
								expr: &actionExpr{
									pos: position{line: 270, col: 26, offset: 7515},
									run: (*parser).callonArgValues7,
									expr: &seqExpr{
										pos: position{line: 270, col: 26, offset: 7515},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 270, col: 26, offset: 7515},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 270, col: 28, offset: 7517},
													name: "Argument",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 270, col: 37, offset: 7526},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 270, col: 61, offset: 7550},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 270, col: 66, offset: 7555},
								expr: &ruleRefExpr{
									pos:  position{line: 270, col: 66, offset: 7555},
									name: "Argument",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 270, col: 76, offset: 7565},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 270, col: 78, offset: 7567},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgTypes",
			pos:  position{line: 273, col: 1, offset: 7628},
			expr: &actionExpr{
				pos: position{line: 273, col: 13, offset: 7640},
				run: (*parser).callonArgTypes1,
				expr: &seqExpr{
					pos: position{line: 273, col: 13, offset: 7640},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 273, col: 13, offset: 7640},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 273, col: 17, offset: 7644},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 273, col: 19, offset: 7646},
							label: "args",
							expr: &zeroOrMoreExpr{
								pos: position{line: 273, col: 24, offset: 7651},
								expr: &actionExpr{
									pos: position{line: 273, col: 25, offset: 7652},
									run: (*parser).callonArgTypes7,
									expr: &seqExpr{
										pos: position{line: 273, col: 25, offset: 7652},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 273, col: 25, offset: 7652},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 273, col: 27, offset: 7654},
													name: "ArgType",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 273, col: 35, offset: 7662},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 273, col: 59, offset: 7686},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 273, col: 64, offset: 7691},
								expr: &ruleRefExpr{
									pos:  position{line: 273, col: 64, offset: 7691},
									name: "ArgType",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 273, col: 73, offset: 7700},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 273, col: 75, offset: 7702},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgType",
			pos:  position{line: 276, col: 1, offset: 7760},
			expr: &choiceExpr{
				pos: position{line: 276, col: 12, offset: 7771},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 276, col: 12, offset: 7771},
						run: (*parser).callonArgType2,
						expr: &seqExpr{
							pos: position{line: 276, col: 12, offset: 7771},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 276, col: 12, offset: 7771},
									label: "docstring",
									expr: &ruleRefExpr{
										pos:  position{line: 276, col: 22, offset: 7781},
										name: "DocString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 276, col: 32, offset: 7791},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 276, col: 34, offset: 7793},
									label: "slot",
									expr: &choiceExpr{
										pos: position{line: 276, col: 40, offset: 7799},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 276, col: 40, offset: 7799},
												name: "ArgWithDefault",
											},
											&ruleRefExpr{
												pos:  position{line: 276, col: 57, offset: 7816},
												name: "ArgWithBlockDefault",
											},
											&ruleRefExpr{
												pos:  position{line: 276, col: 79, offset: 7838},
												name: "ArgWithType",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 286, col: 5, offset: 8091},
						run: (*parser).callonArgType12,
						expr: &labeledExpr{
							pos:   position{line: 286, col: 5, offset: 8091},
							label: "slot",
							expr: &choiceExpr{
								pos: position{line: 286, col: 11, offset: 8097},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 286, col: 11, offset: 8097},
										name: "ArgWithDefault",
									},
									&ruleRefExpr{
										pos:  position{line: 286, col: 28, offset: 8114},
										name: "ArgWithBlockDefault",
									},
									&ruleRefExpr{
										pos:  position{line: 286, col: 50, offset: 8136},
										name: "ArgWithType",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithDefault",
			pos:  position{line: 289, col: 1, offset: 8183},
			expr: &actionExpr{
				pos: position{line: 289, col: 19, offset: 8201},
				run: (*parser).callonArgWithDefault1,
				expr: &seqExpr{
					pos: position{line: 289, col: 19, offset: 8201},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 289, col: 19, offset: 8201},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 289, col: 24, offset: 8206},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 289, col: 27, offset: 8209},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 289, col: 29, offset: 8211},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 289, col: 40, offset: 8222},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 289, col: 42, offset: 8224},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 289, col: 48, offset: 8230},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 289, col: 53, offset: 8235},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 289, col: 55, offset: 8237},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 289, col: 66, offset: 8248},
								expr: &ruleRefExpr{
									pos:  position{line: 289, col: 66, offset: 8248},
									name: "DirectiveApplication",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 289, col: 88, offset: 8270},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 289, col: 90, offset: 8272},
							name: "EqualToken",
						},
						&ruleRefExpr{
							pos:  position{line: 289, col: 101, offset: 8283},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 289, col: 103, offset: 8285},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 289, col: 109, offset: 8291},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithBlockDefault",
			pos:  position{line: 298, col: 1, offset: 8485},
			expr: &actionExpr{
				pos: position{line: 298, col: 24, offset: 8508},
				run: (*parser).callonArgWithBlockDefault1,
				expr: &seqExpr{
					pos: position{line: 298, col: 24, offset: 8508},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 298, col: 24, offset: 8508},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 29, offset: 8513},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 298, col: 32, offset: 8516},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 298, col: 34, offset: 8518},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 298, col: 45, offset: 8529},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 298, col: 47, offset: 8531},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 53, offset: 8537},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 298, col: 58, offset: 8542},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 298, col: 60, offset: 8544},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 298, col: 71, offset: 8555},
								expr: &ruleRefExpr{
									pos:  position{line: 298, col: 71, offset: 8555},
									name: "DirectiveApplication",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 298, col: 93, offset: 8577},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 298, col: 95, offset: 8579},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 101, offset: 8585},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithType",
			pos:  position{line: 307, col: 1, offset: 8781},
			expr: &actionExpr{
				pos: position{line: 307, col: 16, offset: 8796},
				run: (*parser).callonArgWithType1,
				expr: &seqExpr{
					pos: position{line: 307, col: 16, offset: 8796},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 307, col: 16, offset: 8796},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 21, offset: 8801},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 307, col: 24, offset: 8804},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 307, col: 26, offset: 8806},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 307, col: 37, offset: 8817},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 307, col: 39, offset: 8819},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 307, col: 45, offset: 8825},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 307, col: 50, offset: 8830},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 307, col: 52, offset: 8832},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 307, col: 63, offset: 8843},
								expr: &ruleRefExpr{
									pos:  position{line: 307, col: 63, offset: 8843},
									name: "DirectiveApplication",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Argument",
			pos:  position{line: 316, col: 1, offset: 9030},
			expr: &choiceExpr{
				pos: position{line: 316, col: 13, offset: 9042},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 316, col: 13, offset: 9042},
						name: "KeyValue",
					},
					&ruleRefExpr{
						pos:  position{line: 316, col: 24, offset: 9053},
						name: "PositionalValue",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "KeyValue",
			pos:  position{line: 318, col: 1, offset: 9070},
			expr: &actionExpr{
				pos: position{line: 318, col: 13, offset: 9082},
				run: (*parser).callonKeyValue1,
				expr: &seqExpr{
					pos: position{line: 318, col: 13, offset: 9082},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 318, col: 13, offset: 9082},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 17, offset: 9086},
								name: "WordToken",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 318, col: 27, offset: 9096},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 318, col: 38, offset: 9107},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 318, col: 40, offset: 9109},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 46, offset: 9115},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PositionalValue",
			pos:  position{line: 322, col: 1, offset: 9210},
			expr: &actionExpr{
				pos: position{line: 322, col: 20, offset: 9229},
				run: (*parser).callonPositionalValue1,
				expr: &labeledExpr{
					pos:   position{line: 322, col: 20, offset: 9229},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 322, col: 26, offset: 9235},
						name: "Form",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ColonToken",
			pos:  position{line: 325, col: 1, offset: 9318},
			expr: &litMatcher{
				pos:        position{line: 325, col: 15, offset: 9332},
				val:        ":",
				ignoreCase: false,
				want:       "\":\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Type",
			pos:  position{line: 327, col: 1, offset: 9337},
			expr: &choiceExpr{
				pos: position{line: 327, col: 9, offset: 9345},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 327, col: 9, offset: 9345},
						name: "NonNull",
					},
					&ruleRefExpr{
						pos:  position{line: 327, col: 19, offset: 9355},
						name: "NamedType",
					},
					&ruleRefExpr{
						pos:  position{line: 327, col: 31, offset: 9367},
						name: "ListType",
					},
					&ruleRefExpr{
						pos:  position{line: 327, col: 42, offset: 9378},
						name: "ObjectType",
					},
					&ruleRefExpr{
						pos:  position{line: 327, col: 55, offset: 9391},
						name: "TypeVariable",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "NamedType",
			pos:  position{line: 328, col: 1, offset: 9404},
			expr: &actionExpr{
				pos: position{line: 328, col: 14, offset: 9417},
				run: (*parser).callonNamedType1,
				expr: &labeledExpr{
					pos:   position{line: 328, col: 14, offset: 9417},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 328, col: 19, offset: 9422},
						name: "UpperId",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ListType",
			pos:  position{line: 331, col: 1, offset: 9477},
			expr: &actionExpr{
				pos: position{line: 331, col: 13, offset: 9489},
				run: (*parser).callonListType1,
				expr: &seqExpr{
					pos: position{line: 331, col: 13, offset: 9489},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 331, col: 13, offset: 9489},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 331, col: 17, offset: 9493},
							label: "inner",
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 23, offset: 9499},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 331, col: 28, offset: 9504},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ObjectType",
			pos:  position{line: 334, col: 1, offset: 9557},
			expr: &actionExpr{
				pos: position{line: 334, col: 15, offset: 9571},
				run: (*parser).callonObjectType1,
				expr: &seqExpr{
					pos: position{line: 334, col: 15, offset: 9571},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 334, col: 15, offset: 9571},
							val:        "{{",
							ignoreCase: false,
							want:       "\"{{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 334, col: 20, offset: 9576},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 334, col: 22, offset: 9578},
							label: "fields",
							expr: &zeroOrMoreExpr{
								pos: position{line: 334, col: 29, offset: 9585},
								expr: &actionExpr{
									pos: position{line: 334, col: 30, offset: 9586},
									run: (*parser).callonObjectType7,
									expr: &seqExpr{
										pos: position{line: 334, col: 30, offset: 9586},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 334, col: 30, offset: 9586},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 334, col: 32, offset: 9588},
													name: "ObjectTypeField",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 334, col: 48, offset: 9604},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 334, col: 72, offset: 9628},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 334, col: 77, offset: 9633},
								expr: &ruleRefExpr{
									pos:  position{line: 334, col: 77, offset: 9633},
									name: "ObjectTypeField",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 334, col: 94, offset: 9650},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 334, col: 96, offset: 9652},
							val:        "}}",
							ignoreCase: false,
							want:       "\"}}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ObjectTypeField",
			pos:  position{line: 339, col: 1, offset: 9753},
			expr: &actionExpr{
				pos: position{line: 339, col: 20, offset: 9772},
				run: (*parser).callonObjectTypeField1,
				expr: &seqExpr{
					pos: position{line: 339, col: 20, offset: 9772},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 339, col: 20, offset: 9772},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 339, col: 24, offset: 9776},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 339, col: 27, offset: 9779},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 339, col: 29, offset: 9781},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 339, col: 40, offset: 9792},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 339, col: 42, offset: 9794},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 339, col: 48, offset: 9800},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NonNull",
			pos:  position{line: 345, col: 1, offset: 9895},
			expr: &actionExpr{
				pos: position{line: 345, col: 12, offset: 9906},
				run: (*parser).callonNonNull1,
				expr: &seqExpr{
					pos: position{line: 345, col: 12, offset: 9906},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 345, col: 12, offset: 9906},
							label: "inner",
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 18, offset: 9912},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 345, col: 23, offset: 9917},
							name: "BangToken",
						},
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "TypeVariable",
			pos:  position{line: 348, col: 1, offset: 9979},
			expr: &actionExpr{
				pos: position{line: 348, col: 17, offset: 9995},
				run: (*parser).callonTypeVariable1,
				expr: &labeledExpr{
					pos:   position{line: 348, col: 17, offset: 9995},
					label: "v",
					expr: &charClassMatcher{
						pos:        position{line: 348, col: 19, offset: 9997},
						val:        "[a-z]",
						ranges:     []rune{'a', 'z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "BangToken",
			pos:  position{line: 352, col: 1, offset: 10054},
			expr: &litMatcher{
				pos:        position{line: 352, col: 14, offset: 10067},
				val:        "!",
				ignoreCase: false,
				want:       "\"!\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DefaultExpr",
			pos:  position{line: 355, col: 1, offset: 10116},
			expr: &choiceExpr{
				pos: position{line: 355, col: 16, offset: 10131},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 355, col: 16, offset: 10131},
						run: (*parser).callonDefaultExpr2,
						expr: &seqExpr{
							pos: position{line: 355, col: 16, offset: 10131},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 355, col: 16, offset: 10131},
									label: "left",
									expr: &choiceExpr{
										pos: position{line: 355, col: 22, offset: 10137},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 355, col: 22, offset: 10137},
												name: "EqualityExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 355, col: 37, offset: 10152},
												name: "Term",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 355, col: 43, offset: 10158},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 355, col: 45, offset: 10160},
									name: "InterroToken",
								},
								&ruleRefExpr{
									pos:  position{line: 355, col: 58, offset: 10173},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 355, col: 60, offset: 10175},
									label: "right",
									expr: &choiceExpr{
										pos: position{line: 355, col: 67, offset: 10182},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 355, col: 67, offset: 10182},
												name: "DefaultExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 355, col: 81, offset: 10196},
												name: "Term",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 361, col: 5, offset: 10301},
						name: "EqualityExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EqualityExpr",
			pos:  position{line: 363, col: 1, offset: 10315},
			expr: &choiceExpr{
				pos: position{line: 363, col: 17, offset: 10331},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 363, col: 17, offset: 10331},
						run: (*parser).callonEqualityExpr2,
						expr: &seqExpr{
							pos: position{line: 363, col: 17, offset: 10331},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 363, col: 17, offset: 10331},
									label: "left",
									expr: &choiceExpr{
										pos: position{line: 363, col: 23, offset: 10337},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 363, col: 23, offset: 10337},
												name: "EqualityExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 363, col: 38, offset: 10352},
												name: "Term",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 363, col: 44, offset: 10358},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 363, col: 46, offset: 10360},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 363, col: 49, offset: 10363},
										name: "EqualityOp",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 363, col: 60, offset: 10374},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 363, col: 62, offset: 10376},
									label: "right",
									expr: &choiceExpr{
										pos: position{line: 363, col: 69, offset: 10383},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 363, col: 69, offset: 10383},
												name: "RelationalExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 363, col: 86, offset: 10400},
												name: "Term",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 376, col: 5, offset: 10719},
						name: "RelationalExpr",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "EqualityOp",
			pos:  position{line: 378, col: 1, offset: 10735},
			expr: &choiceExpr{
				pos: position{line: 378, col: 15, offset: 10749},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 378, col: 15, offset: 10749},
						run: (*parser).callonEqualityOp2,
						expr: &litMatcher{
							pos:        position{line: 378, col: 15, offset: 10749},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
					},
					&actionExpr{
						pos: position{line: 378, col: 43, offset: 10777},
						run: (*parser).callonEqualityOp4,
						expr: &litMatcher{
							pos:        position{line: 378, col: 43, offset: 10777},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "RelationalExpr",
			pos:  position{line: 380, col: 1, offset: 10804},
			expr: &choiceExpr{
				pos: position{line: 380, col: 19, offset: 10822},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 380, col: 19, offset: 10822},
						run: (*parser).callonRelationalExpr2,
						expr: &seqExpr{
							pos: position{line: 380, col: 19, offset: 10822},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 380, col: 19, offset: 10822},
									label: "left",
									expr: &choiceExpr{
										pos: position{line: 380, col: 25, offset: 10828},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 380, col: 25, offset: 10828},
												name: "RelationalExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 380, col: 42, offset: 10845},
												name: "Term",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 380, col: 48, offset: 10851},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 380, col: 50, offset: 10853},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 380, col: 53, offset: 10856},
										name: "RelationalOp",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 380, col: 66, offset: 10869},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 380, col: 68, offset: 10871},
									label: "right",
									expr: &choiceExpr{
										pos: position{line: 380, col: 75, offset: 10878},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 380, col: 75, offset: 10878},
												name: "AdditiveExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 380, col: 90, offset: 10893},
												name: "Term",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 393, col: 5, offset: 11340},
						name: "AdditiveExpr",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "RelationalOp",
			pos:  position{line: 395, col: 1, offset: 11354},
			expr: &choiceExpr{
				pos: position{line: 395, col: 17, offset: 11370},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 395, col: 17, offset: 11370},
						run: (*parser).callonRelationalOp2,
						expr: &litMatcher{
							pos:        position{line: 395, col: 17, offset: 11370},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
					},
					&actionExpr{
						pos: position{line: 395, col: 45, offset: 11398},
						run: (*parser).callonRelationalOp4,
						expr: &litMatcher{
							pos:        position{line: 395, col: 45, offset: 11398},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
					&actionExpr{
						pos: position{line: 395, col: 73, offset: 11426},
						run: (*parser).callonRelationalOp6,
						expr: &litMatcher{
							pos:        position{line: 395, col: 73, offset: 11426},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 395, col: 99, offset: 11452},
						run: (*parser).callonRelationalOp8,
						expr: &litMatcher{
							pos:        position{line: 395, col: 99, offset: 11452},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 397, col: 1, offset: 11477},
			expr: &choiceExpr{
				pos: position{line: 397, col: 17, offset: 11493},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 397, col: 17, offset: 11493},
						run: (*parser).callonAdditiveExpr2,
						expr: &seqExpr{
							pos: position{line: 397, col: 17, offset: 11493},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 397, col: 17, offset: 11493},
									label: "left",
									expr: &choiceExpr{
										pos: position{line: 397, col: 23, offset: 11499},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 397, col: 23, offset: 11499},
												name: "AdditiveExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 397, col: 38, offset: 11514},
												name: "Term",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 397, col: 44, offset: 11520},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 397, col: 46, offset: 11522},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 397, col: 49, offset: 11525},
										name: "AdditiveOp",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 397, col: 60, offset: 11536},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 397, col: 62, offset: 11538},
									label: "right",
									expr: &choiceExpr{
										pos: position{line: 397, col: 69, offset: 11545},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 397, col: 69, offset: 11545},
												name: "MultiplicativeExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 397, col: 90, offset: 11566},
												name: "Term",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 406, col: 5, offset: 11844},
						name: "MultiplicativeExpr",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "AdditiveOp",
			pos:  position{line: 408, col: 1, offset: 11864},
			expr: &choiceExpr{
				pos: position{line: 408, col: 15, offset: 11878},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 408, col: 15, offset: 11878},
						run: (*parser).callonAdditiveOp2,
						expr: &litMatcher{
							pos:        position{line: 408, col: 15, offset: 11878},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
					},
					&actionExpr{
						pos: position{line: 408, col: 41, offset: 11904},
						run: (*parser).callonAdditiveOp4,
						expr: &litMatcher{
							pos:        position{line: 408, col: 41, offset: 11904},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 410, col: 1, offset: 11929},
			expr: &actionExpr{
				pos: position{line: 410, col: 23, offset: 11951},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 410, col: 23, offset: 11951},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 410, col: 23, offset: 11951},
							label: "left",
							expr: &choiceExpr{
								pos: position{line: 410, col: 29, offset: 11957},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 410, col: 29, offset: 11957},
										name: "MultiplicativeExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 410, col: 50, offset: 11978},
										name: "Term",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 410, col: 56, offset: 11984},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 410, col: 58, offset: 11986},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 61, offset: 11989},
								name: "MultiplicativeOp",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 410, col: 78, offset: 12006},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 410, col: 80, offset: 12008},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 86, offset: 12014},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "MultiplicativeOp",
			pos:  position{line: 423, col: 1, offset: 12373},
			expr: &choiceExpr{
				pos: position{line: 423, col: 21, offset: 12393},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 423, col: 21, offset: 12393},
						run: (*parser).callonMultiplicativeOp2,
						expr: &litMatcher{
							pos:        position{line: 423, col: 21, offset: 12393},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
					&actionExpr{
						pos: position{line: 423, col: 47, offset: 12419},
						run: (*parser).callonMultiplicativeOp4,
						expr: &litMatcher{
							pos:        position{line: 423, col: 47, offset: 12419},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
					},
					&actionExpr{
						pos: position{line: 423, col: 73, offset: 12445},
						run: (*parser).callonMultiplicativeOp6,
						expr: &litMatcher{
							pos:        position{line: 423, col: 73, offset: 12445},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "InterroToken",
			pos:  position{line: 425, col: 1, offset: 12470},
			expr: &litMatcher{
				pos:        position{line: 425, col: 17, offset: 12486},
				val:        "?",
				ignoreCase: false,
				want:       "\"?\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ReopenToken",
			pos:  position{line: 426, col: 1, offset: 12490},
			expr: &litMatcher{
				pos:        position{line: 426, col: 16, offset: 12505},
				val:        "<<",
				ignoreCase: false,
				want:       "\"<<\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DotToken",
			pos:  position{line: 428, col: 1, offset: 12511},
			expr: &litMatcher{
				pos:        position{line: 428, col: 13, offset: 12523},
				val:        ".",
				ignoreCase: false,
				want:       "\".\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "List",
			pos:  position{line: 430, col: 1, offset: 12528},
			expr: &actionExpr{
				pos: position{line: 430, col: 9, offset: 12536},
				run: (*parser).callonList1,
				expr: &seqExpr{
					pos: position{line: 430, col: 9, offset: 12536},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 430, col: 9, offset: 12536},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 430, col: 13, offset: 12540},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 430, col: 15, offset: 12542},
							label: "eles",
							expr: &zeroOrMoreExpr{
								pos: position{line: 430, col: 20, offset: 12547},
								expr: &actionExpr{
									pos: position{line: 430, col: 21, offset: 12548},
									run: (*parser).callonList7,
									expr: &seqExpr{
										pos: position{line: 430, col: 21, offset: 12548},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 430, col: 21, offset: 12548},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 430, col: 23, offset: 12550},
													name: "Form",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 430, col: 28, offset: 12555},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 430, col: 52, offset: 12579},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 430, col: 57, offset: 12584},
								expr: &ruleRefExpr{
									pos:  position{line: 430, col: 57, offset: 12584},
									name: "Form",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 430, col: 63, offset: 12590},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 430, col: 65, offset: 12592},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Object",
			pos:  position{line: 437, col: 1, offset: 12690},
			expr: &actionExpr{
				pos: position{line: 437, col: 11, offset: 12700},
				run: (*parser).callonObject1,
				expr: &seqExpr{
					pos: position{line: 437, col: 11, offset: 12700},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 437, col: 11, offset: 12700},
							val:        "{{",
							ignoreCase: false,
							want:       "\"{{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 437, col: 16, offset: 12705},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 437, col: 18, offset: 12707},
							label: "vals",
							expr: &zeroOrMoreExpr{
								pos: position{line: 437, col: 23, offset: 12712},
								expr: &actionExpr{
									pos: position{line: 437, col: 24, offset: 12713},
									run: (*parser).callonObject7,
									expr: &seqExpr{
										pos: position{line: 437, col: 24, offset: 12713},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 437, col: 24, offset: 12713},
												label: "v",
												expr: &ruleRefExpr{
													pos:  position{line: 437, col: 26, offset: 12715},
													name: "KeyValue",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 437, col: 35, offset: 12724},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 437, col: 59, offset: 12748},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 437, col: 64, offset: 12753},
								expr: &ruleRefExpr{
									pos:  position{line: 437, col: 64, offset: 12753},
									name: "KeyValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 437, col: 74, offset: 12763},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 437, col: 76, offset: 12765},
							val:        "}}",
							ignoreCase: false,
							want:       "\"}}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Block",
			pos:  position{line: 452, col: 1, offset: 13055},
			expr: &actionExpr{
				pos: position{line: 452, col: 10, offset: 13064},
				run: (*parser).callonBlock1,
				expr: &seqExpr{
					pos: position{line: 452, col: 10, offset: 13064},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 452, col: 10, offset: 13064},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 452, col: 14, offset: 13068},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 452, col: 16, offset: 13070},
							label: "eles",
							expr: &zeroOrMoreExpr{
								pos: position{line: 452, col: 21, offset: 13075},
								expr: &actionExpr{
									pos: position{line: 452, col: 22, offset: 13076},
									run: (*parser).callonBlock7,
									expr: &seqExpr{
										pos: position{line: 452, col: 22, offset: 13076},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 452, col: 22, offset: 13076},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 452, col: 24, offset: 13078},
													name: "Expr",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 452, col: 29, offset: 13083},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 452, col: 53, offset: 13107},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 452, col: 58, offset: 13112},
								expr: &ruleRefExpr{
									pos:  position{line: 452, col: 58, offset: 13112},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 452, col: 64, offset: 13118},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 452, col: 66, offset: 13120},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Literal",
			pos:  position{line: 461, col: 1, offset: 13229},
			expr: &choiceExpr{
				pos: position{line: 461, col: 12, offset: 13240},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 461, col: 12, offset: 13240},
						name: "Int",
					},
					&ruleRefExpr{
						pos:  position{line: 461, col: 18, offset: 13246},
						name: "Boolean",
					},
					&ruleRefExpr{
						pos:  position{line: 461, col: 28, offset: 13256},
						name: "PrecRightMultilineString",
					},
					&ruleRefExpr{
						pos:  position{line: 461, col: 55, offset: 13283},
						name: "String",
					},
					&ruleRefExpr{
						pos:  position{line: 461, col: 64, offset: 13292},
						name: "Quoted",
					},
					&ruleRefExpr{
						pos:  position{line: 461, col: 73, offset: 13301},
						name: "Null",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Int",
			pos:  position{line: 463, col: 1, offset: 13307},
			expr: &actionExpr{
				pos: position{line: 463, col: 8, offset: 13314},
				run: (*parser).callonInt1,
				expr: &choiceExpr{
					pos: position{line: 463, col: 9, offset: 13315},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 463, col: 9, offset: 13315},
							val:        "0",
							ignoreCase: false,
							want:       "\"0\"",
						},
						&seqExpr{
							pos: position{line: 463, col: 15, offset: 13321},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 463, col: 15, offset: 13321},
									name: "NonZeroDecimalDigit",
								},
								&zeroOrMoreExpr{
									pos: position{line: 463, col: 35, offset: 13341},
									expr: &ruleRefExpr{
										pos:  position{line: 463, col: 35, offset: 13341},
										name: "DecimalDigit",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NonZeroDecimalDigit",
			pos:  position{line: 474, col: 1, offset: 13519},
			expr: &charClassMatcher{
				pos:        position{line: 474, col: 24, offset: 13542},
				val:        "[1-9]",
				ranges:     []rune{'1', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DecimalDigit",
			pos:  position{line: 476, col: 1, offset: 13549},
			expr: &charClassMatcher{
				pos:        position{line: 476, col: 17, offset: 13565},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Exponent",
			pos:  position{line: 478, col: 1, offset: 13572},
			expr: &seqExpr{
				pos: position{line: 478, col: 13, offset: 13584},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 478, col: 13, offset: 13584},
						val:        "e",
						ignoreCase: true,
						want:       "\"e\"i",
					},
					&zeroOrOneExpr{
						pos: position{line: 478, col: 18, offset: 13589},
						expr: &charClassMatcher{
							pos:        position{line: 478, col: 18, offset: 13589},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 478, col: 24, offset: 13595},
						expr: &ruleRefExpr{
							pos:  position{line: 478, col: 24, offset: 13595},
							name: "DecimalDigit",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PrecRightMultilineString",
			pos:  position{line: 480, col: 1, offset: 13610},
			expr: &actionExpr{
				pos: position{line: 480, col: 29, offset: 13638},
				run: (*parser).callonPrecRightMultilineString1,
				expr: &seqExpr{
					pos: position{line: 480, col: 29, offset: 13638},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 480, col: 29, offset: 13638},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 480, col: 35, offset: 13644},
								name: "MultilineStringLine",
							},
						},
						&labeledExpr{
							pos:   position{line: 480, col: 55, offset: 13664},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 480, col: 60, offset: 13669},
								expr: &actionExpr{
									pos: position{line: 480, col: 61, offset: 13670},
									run: (*parser).callonPrecRightMultilineString7,
									expr: &seqExpr{
										pos: position{line: 480, col: 61, offset: 13670},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 480, col: 61, offset: 13670},
												val:        "\n",
												ignoreCase: false,
												want:       "\"\\n\"",
											},
											&ruleRefExpr{
												pos:  position{line: 480, col: 66, offset: 13675},
												name: "_lineSpace",
											},
											&labeledExpr{
												pos:   position{line: 480, col: 77, offset: 13686},
												label: "l",
												expr: &ruleRefExpr{
													pos:  position{line: 480, col: 79, offset: 13688},
													name: "MultilineStringLine",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MultilineStringLine",
			pos:  position{line: 488, col: 1, offset: 13863},
			expr: &actionExpr{
				pos: position{line: 488, col: 24, offset: 13886},
				run: (*parser).callonMultilineStringLine1,
				expr: &seqExpr{
					pos: position{line: 488, col: 24, offset: 13886},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 488, col: 24, offset: 13886},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
						&litMatcher{
							pos:        position{line: 488, col: 29, offset: 13891},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
						&labeledExpr{
							pos:   position{line: 488, col: 34, offset: 13896},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 488, col: 42, offset: 13904},
								name: "ImmediateMultilineStringContent",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ImmediateMultilineStringContent",
			pos:  position{line: 491, col: 1, offset: 13979},
			expr: &actionExpr{
				pos: position{line: 491, col: 36, offset: 14014},
				run: (*parser).callonImmediateMultilineStringContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 491, col: 36, offset: 14014},
					expr: &charClassMatcher{
						pos:        position{line: 491, col: 36, offset: 14014},
						val:        "[^\\n]",
						chars:      []rune{'\n'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "String",
			pos:  position{line: 495, col: 1, offset: 14047},
			expr: &actionExpr{
				pos: position{line: 495, col: 11, offset: 14057},
				run: (*parser).callonString1,
				expr: &seqExpr{
					pos: position{line: 495, col: 11, offset: 14057},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 495, col: 11, offset: 14057},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 495, col: 15, offset: 14061},
							expr: &choiceExpr{
								pos: position{line: 495, col: 17, offset: 14063},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 495, col: 17, offset: 14063},
										name: "ImmediateStringContent",
									},
									&ruleRefExpr{
										pos:  position{line: 495, col: 42, offset: 14088},
										name: "ImmediateEscape",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 495, col: 61, offset: 14107},
							name: "ImmediateQuoteToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ImmediateQuoteToken",
			pos:  position{line: 507, col: 1, offset: 14348},
			expr: &litMatcher{
				pos:        position{line: 507, col: 24, offset: 14371},
				val:        "\"",
				ignoreCase: false,
				want:       "\"\\\"\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ImmediateStringContent",
			pos:  position{line: 508, col: 1, offset: 14375},
			expr: &oneOrMoreExpr{
				pos: position{line: 508, col: 27, offset: 14401},
				expr: &charClassMatcher{
					pos:        position{line: 508, col: 27, offset: 14401},
					val:        "[^\\\\\"\\n]",
					chars:      []rune{'\\', '"', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ImmediateEscape",
			pos:  position{line: 509, col: 1, offset: 14411},
			expr: &seqExpr{
				pos: position{line: 509, col: 20, offset: 14430},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 509, col: 20, offset: 14430},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
					&choiceExpr{
						pos: position{line: 510, col: 5, offset: 14441},
						alternatives: []any{
							&charClassMatcher{
								pos:        position{line: 510, col: 5, offset: 14441},
								val:        "[abfnrtv\"\\\\]",
								chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '"', '\\'},
								ignoreCase: false,
								inverted:   false,
							},
							&seqExpr{
								pos: position{line: 511, col: 5, offset: 14458},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 511, col: 5, offset: 14458},
										val:        "x",
										ignoreCase: false,
										want:       "\"x\"",
									},
									&charClassMatcher{
										pos:        position{line: 511, col: 9, offset: 14462},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 511, col: 19, offset: 14472},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
								},
							},
							&seqExpr{
								pos: position{line: 512, col: 5, offset: 14486},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 512, col: 5, offset: 14486},
										val:        "u",
										ignoreCase: false,
										want:       "\"u\"",
									},
									&charClassMatcher{
										pos:        position{line: 512, col: 9, offset: 14490},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 512, col: 19, offset: 14500},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 512, col: 29, offset: 14510},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 512, col: 39, offset: 14520},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
								},
							},
							&seqExpr{
								pos: position{line: 513, col: 5, offset: 14534},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 513, col: 5, offset: 14534},
										val:        "U",
										ignoreCase: false,
										want:       "\"U\"",
									},
									&charClassMatcher{
										pos:        position{line: 513, col: 9, offset: 14538},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 513, col: 19, offset: 14548},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 513, col: 29, offset: 14558},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 513, col: 39, offset: 14568},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 513, col: 49, offset: 14578},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 513, col: 59, offset: 14588},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 513, col: 69, offset: 14598},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 513, col: 79, offset: 14608},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
								},
							},
							&seqExpr{
								pos: position{line: 514, col: 5, offset: 14622},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 514, col: 5, offset: 14622},
										val:        "[0-7]",
										ranges:     []rune{'0', '7'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 514, col: 11, offset: 14628},
										val:        "[0-7]",
										ranges:     []rune{'0', '7'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 514, col: 17, offset: 14634},
										val:        "[0-7]",
										ranges:     []rune{'0', '7'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DocString",
			pos:  position{line: 517, col: 1, offset: 14643},
			expr: &choiceExpr{
				pos: position{line: 517, col: 14, offset: 14656},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 517, col: 14, offset: 14656},
						run: (*parser).callonDocString2,
						expr: &seqExpr{
							pos: position{line: 517, col: 14, offset: 14656},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 517, col: 14, offset: 14656},
									name: "TripleQuote",
								},
								&labeledExpr{
									pos:   position{line: 517, col: 26, offset: 14668},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 517, col: 34, offset: 14676},
										name: "DocStringContent",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 517, col: 51, offset: 14693},
									name: "TripleQuote",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 519, col: 5, offset: 14762},
						run: (*parser).callonDocString8,
						expr: &seqExpr{
							pos: position{line: 519, col: 5, offset: 14762},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 519, col: 5, offset: 14762},
									name: "TripleQuote",
								},
								&ruleRefExpr{
									pos:  position{line: 519, col: 17, offset: 14774},
									name: "TripleQuote",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DocStringContent",
			pos:  position{line: 523, col: 1, offset: 14808},
			expr: &actionExpr{
				pos: position{line: 523, col: 21, offset: 14828},
				run: (*parser).callonDocStringContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 523, col: 21, offset: 14828},
					expr: &choiceExpr{
						pos: position{line: 523, col: 23, offset: 14830},
						alternatives: []any{
							&charClassMatcher{
								pos:        position{line: 523, col: 23, offset: 14830},
								val:        "[^\"]",
								chars:      []rune{'"'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 523, col: 30, offset: 14837},
								val:        "\n",
								ignoreCase: false,
								want:       "\"\\n\"",
							},
							&seqExpr{
								pos: position{line: 523, col: 37, offset: 14844},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 523, col: 37, offset: 14844},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
									&zeroOrOneExpr{
										pos: position{line: 523, col: 41, offset: 14848},
										expr: &litMatcher{
											pos:        position{line: 523, col: 41, offset: 14848},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
									},
									&charClassMatcher{
										pos:        position{line: 523, col: 46, offset: 14853},
										val:        "[^\"]",
										chars:      []rune{'"'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TripleQuote",
			pos:  position{line: 527, col: 1, offset: 14886},
			expr: &litMatcher{
				pos:        position{line: 527, col: 16, offset: 14901},
				val:        "\"\"\"",
				ignoreCase: false,
				want:       "\"\\\"\\\"\\\"\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Quoted",
			pos:  position{line: 529, col: 1, offset: 14911},
			expr: &actionExpr{
				pos: position{line: 529, col: 11, offset: 14921},
				run: (*parser).callonQuoted1,
				expr: &seqExpr{
					pos: position{line: 529, col: 11, offset: 14921},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 529, col: 11, offset: 14921},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 529, col: 15, offset: 14925},
							label: "quoter",
							expr: &ruleRefExpr{
								pos:  position{line: 529, col: 22, offset: 14932},
								name: "WordToken",
							},
						},
						&litMatcher{
							pos:        position{line: 529, col: 32, offset: 14942},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 529, col: 36, offset: 14946},
							label: "raw",
							expr: &ruleRefExpr{
								pos:  position{line: 529, col: 40, offset: 14950},
								name: "QuotedRawToken",
							},
						},
						&litMatcher{
							pos:        position{line: 529, col: 55, offset: 14965},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "QuotedRawToken",
			pos:  position{line: 535, col: 1, offset: 15038},
			expr: &actionExpr{
				pos: position{line: 535, col: 19, offset: 15056},
				run: (*parser).callonQuotedRawToken1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 535, col: 19, offset: 15056},
					expr: &charClassMatcher{
						pos:        position{line: 535, col: 19, offset: 15056},
						val:        "[^}]",
						chars:      []rune{'}'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Boolean",
			pos:  position{line: 539, col: 1, offset: 15096},
			expr: &choiceExpr{
				pos: position{line: 539, col: 12, offset: 15107},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 539, col: 12, offset: 15107},
						run: (*parser).callonBoolean2,
						expr: &ruleRefExpr{
							pos:  position{line: 539, col: 12, offset: 15107},
							name: "TrueToken",
						},
					},
					&actionExpr{
						pos: position{line: 544, col: 5, offset: 15185},
						run: (*parser).callonBoolean4,
						expr: &ruleRefExpr{
							pos:  position{line: 544, col: 5, offset: 15185},
							name: "FalseToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TrueToken",
			pos:  position{line: 550, col: 1, offset: 15263},
			expr: &seqExpr{
				pos: position{line: 550, col: 14, offset: 15276},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 550, col: 14, offset: 15276},
						val:        "true",
						ignoreCase: false,
						want:       "\"true\"",
					},
					&notExpr{
						pos: position{line: 550, col: 21, offset: 15283},
						expr: &ruleRefExpr{
							pos:  position{line: 550, col: 22, offset: 15284},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FalseToken",
			pos:  position{line: 551, col: 1, offset: 15293},
			expr: &seqExpr{
				pos: position{line: 551, col: 15, offset: 15307},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 551, col: 15, offset: 15307},
						val:        "false",
						ignoreCase: false,
						want:       "\"false\"",
					},
					&notExpr{
						pos: position{line: 551, col: 23, offset: 15315},
						expr: &ruleRefExpr{
							pos:  position{line: 551, col: 24, offset: 15316},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Null",
			pos:  position{line: 553, col: 1, offset: 15326},
			expr: &actionExpr{
				pos: position{line: 553, col: 9, offset: 15334},
				run: (*parser).callonNull1,
				expr: &ruleRefExpr{
					pos:  position{line: 553, col: 9, offset: 15334},
					name: "NullToken",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NullToken",
			pos:  position{line: 558, col: 1, offset: 15390},
			expr: &seqExpr{
				pos: position{line: 558, col: 14, offset: 15403},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 558, col: 14, offset: 15403},
						val:        "null",
						ignoreCase: false,
						want:       "\"null\"",
					},
					&notExpr{
						pos: position{line: 558, col: 21, offset: 15410},
						expr: &ruleRefExpr{
							pos:  position{line: 558, col: 22, offset: 15411},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CommentToken",
			pos:  position{line: 560, col: 1, offset: 15421},
			expr: &seqExpr{
				pos: position{line: 560, col: 17, offset: 15437},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 560, col: 17, offset: 15437},
						val:        "#",
						ignoreCase: false,
						want:       "\"#\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 560, col: 21, offset: 15441},
						expr: &charClassMatcher{
							pos:        position{line: 560, col: 21, offset: 15441},
							val:        "[^\\n]",
							chars:      []rune{'\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Conditional",
			pos:  position{line: 564, col: 1, offset: 15484},
			expr: &actionExpr{
				pos: position{line: 564, col: 16, offset: 15499},
				run: (*parser).callonConditional1,
				expr: &seqExpr{
					pos: position{line: 564, col: 16, offset: 15499},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 564, col: 16, offset: 15499},
							name: "IfToken",
						},
						&ruleRefExpr{
							pos:  position{line: 564, col: 24, offset: 15507},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 564, col: 26, offset: 15509},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 564, col: 31, offset: 15514},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 564, col: 36, offset: 15519},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 564, col: 38, offset: 15521},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 564, col: 44, offset: 15527},
								name: "Block",
							},
						},
						&labeledExpr{
							pos:   position{line: 564, col: 50, offset: 15533},
							label: "else_",
							expr: &zeroOrOneExpr{
								pos: position{line: 564, col: 56, offset: 15539},
								expr: &ruleRefExpr{
									pos:  position{line: 564, col: 56, offset: 15539},
									name: "ElseClause",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ElseClause",
			pos:  position{line: 573, col: 1, offset: 15675},
			expr: &actionExpr{
				pos: position{line: 573, col: 15, offset: 15689},
				run: (*parser).callonElseClause1,
				expr: &seqExpr{
					pos: position{line: 573, col: 15, offset: 15689},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 573, col: 15, offset: 15689},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 573, col: 17, offset: 15691},
							name: "ElseToken",
						},
						&ruleRefExpr{
							pos:  position{line: 573, col: 27, offset: 15701},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 573, col: 29, offset: 15703},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 573, col: 35, offset: 15709},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "While",
			pos:  position{line: 577, col: 1, offset: 15748},
			expr: &actionExpr{
				pos: position{line: 577, col: 10, offset: 15757},
				run: (*parser).callonWhile1,
				expr: &seqExpr{
					pos: position{line: 577, col: 10, offset: 15757},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 577, col: 10, offset: 15757},
							name: "WhileToken",
						},
						&ruleRefExpr{
							pos:  position{line: 577, col: 21, offset: 15768},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 577, col: 23, offset: 15770},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 28, offset: 15775},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 577, col: 33, offset: 15780},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 577, col: 35, offset: 15782},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 41, offset: 15788},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IfToken",
			pos:  position{line: 585, col: 1, offset: 15900},
			expr: &seqExpr{
				pos: position{line: 585, col: 12, offset: 15911},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 585, col: 12, offset: 15911},
						val:        "if",
						ignoreCase: false,
						want:       "\"if\"",
					},
					&notExpr{
						pos: position{line: 585, col: 17, offset: 15916},
						expr: &ruleRefExpr{
							pos:  position{line: 585, col: 18, offset: 15917},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ElseToken",
			pos:  position{line: 586, col: 1, offset: 15926},
			expr: &seqExpr{
				pos: position{line: 586, col: 14, offset: 15939},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 586, col: 14, offset: 15939},
						val:        "else",
						ignoreCase: false,
						want:       "\"else\"",
					},
					&notExpr{
						pos: position{line: 586, col: 21, offset: 15946},
						expr: &ruleRefExpr{
							pos:  position{line: 586, col: 22, offset: 15947},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WhileToken",
			pos:  position{line: 587, col: 1, offset: 15956},
			expr: &seqExpr{
				pos: position{line: 587, col: 15, offset: 15970},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 587, col: 15, offset: 15970},
						val:        "while",
						ignoreCase: false,
						want:       "\"while\"",
					},
					&notExpr{
						pos: position{line: 587, col: 23, offset: 15978},
						expr: &ruleRefExpr{
							pos:  position{line: 587, col: 24, offset: 15979},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ForLoop",
			pos:  position{line: 589, col: 1, offset: 15989},
			expr: &choiceExpr{
				pos: position{line: 589, col: 12, offset: 16000},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 589, col: 12, offset: 16000},
						name: "ForTwoVarLoop",
					},
					&ruleRefExpr{
						pos:  position{line: 589, col: 28, offset: 16016},
						name: "ForSingleVarLoop",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ForSingleVarLoop",
			pos:  position{line: 591, col: 1, offset: 16034},
			expr: &actionExpr{
				pos: position{line: 591, col: 21, offset: 16054},
				run: (*parser).callonForSingleVarLoop1,
				expr: &seqExpr{
					pos: position{line: 591, col: 21, offset: 16054},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 591, col: 21, offset: 16054},
							name: "ForToken",
						},
						&ruleRefExpr{
							pos:  position{line: 591, col: 30, offset: 16063},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 591, col: 32, offset: 16065},
							label: "variable",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 41, offset: 16074},
								name: "Id",
							},
						},
						&labeledExpr{
							pos:   position{line: 591, col: 44, offset: 16077},
							label: "typeAnnotation",
							expr: &zeroOrOneExpr{
								pos: position{line: 591, col: 59, offset: 16092},
								expr: &seqExpr{
									pos: position{line: 591, col: 60, offset: 16093},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 591, col: 60, offset: 16093},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 591, col: 62, offset: 16095},
											name: "ColonToken",
										},
										&ruleRefExpr{
											pos:  position{line: 591, col: 73, offset: 16106},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 591, col: 75, offset: 16108},
											label: "t",
											expr: &ruleRefExpr{
												pos:  position{line: 591, col: 77, offset: 16110},
												name: "Type",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 591, col: 84, offset: 16117},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 591, col: 86, offset: 16119},
							name: "InToken",
						},
						&ruleRefExpr{
							pos:  position{line: 591, col: 94, offset: 16127},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 591, col: 96, offset: 16129},
							label: "iterable",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 105, offset: 16138},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 591, col: 110, offset: 16143},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 591, col: 112, offset: 16145},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 591, col: 117, offset: 16150},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ForTwoVarLoop",
			pos:  position{line: 605, col: 1, offset: 16432},
			expr: &actionExpr{
				pos: position{line: 605, col: 18, offset: 16449},
				run: (*parser).callonForTwoVarLoop1,
				expr: &seqExpr{
					pos: position{line: 605, col: 18, offset: 16449},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 605, col: 18, offset: 16449},
							name: "ForToken",
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 27, offset: 16458},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 605, col: 29, offset: 16460},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 33, offset: 16464},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 36, offset: 16467},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 38, offset: 16469},
							name: "CommaToken",
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 49, offset: 16480},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 605, col: 51, offset: 16482},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 57, offset: 16488},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 60, offset: 16491},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 62, offset: 16493},
							name: "InToken",
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 70, offset: 16501},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 605, col: 72, offset: 16503},
							label: "iterable",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 81, offset: 16512},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 86, offset: 16517},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 605, col: 88, offset: 16519},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 93, offset: 16524},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ForToken",
			pos:  position{line: 615, col: 1, offset: 16705},
			expr: &seqExpr{
				pos: position{line: 615, col: 13, offset: 16717},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 615, col: 13, offset: 16717},
						val:        "for",
						ignoreCase: false,
						want:       "\"for\"",
					},
					&notExpr{
						pos: position{line: 615, col: 19, offset: 16723},
						expr: &ruleRefExpr{
							pos:  position{line: 615, col: 20, offset: 16724},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "InToken",
			pos:  position{line: 616, col: 1, offset: 16733},
			expr: &seqExpr{
				pos: position{line: 616, col: 12, offset: 16744},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 616, col: 12, offset: 16744},
						val:        "in",
						ignoreCase: false,
						want:       "\"in\"",
					},
					&notExpr{
						pos: position{line: 616, col: 17, offset: 16749},
						expr: &ruleRefExpr{
							pos:  position{line: 616, col: 18, offset: 16750},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Lambda",
			pos:  position{line: 618, col: 1, offset: 16760},
			expr: &actionExpr{
				pos: position{line: 618, col: 11, offset: 16770},
				run: (*parser).callonLambda1,
				expr: &seqExpr{
					pos: position{line: 618, col: 11, offset: 16770},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 618, col: 11, offset: 16770},
							name: "LambdaToken",
						},
						&labeledExpr{
							pos:   position{line: 618, col: 23, offset: 16782},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 618, col: 28, offset: 16787},
								name: "LambdaArgs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 39, offset: 16798},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 41, offset: 16800},
							name: "ArrowToken",
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 52, offset: 16811},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 618, col: 54, offset: 16813},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 618, col: 59, offset: 16818},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LambdaToken",
			pos:  position{line: 627, col: 1, offset: 16969},
			expr: &litMatcher{
				pos:        position{line: 627, col: 16, offset: 16984},
				val:        "\\",
				ignoreCase: false,
				want:       "\"\\\\\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArrowToken",
			pos:  position{line: 628, col: 1, offset: 16989},
			expr: &litMatcher{
				pos:        position{line: 628, col: 15, offset: 17003},
				val:        "->",
				ignoreCase: false,
				want:       "\"->\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LambdaArgs",
			pos:  position{line: 630, col: 1, offset: 17009},
			expr: &choiceExpr{
				pos: position{line: 630, col: 15, offset: 17023},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 630, col: 15, offset: 17023},
						run: (*parser).callonLambdaArgs2,
						expr: &seqExpr{
							pos: position{line: 630, col: 15, offset: 17023},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 630, col: 15, offset: 17023},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 630, col: 19, offset: 17027},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 630, col: 21, offset: 17029},
									label: "args",
									expr: &zeroOrMoreExpr{
										pos: position{line: 630, col: 26, offset: 17034},
										expr: &actionExpr{
											pos: position{line: 630, col: 27, offset: 17035},
											run: (*parser).callonLambdaArgs8,
											expr: &seqExpr{
												pos: position{line: 630, col: 27, offset: 17035},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 630, col: 27, offset: 17035},
														label: "a",
														expr: &ruleRefExpr{
															pos:  position{line: 630, col: 29, offset: 17037},
															name: "LambdaArg",
														},
													},
													&ruleRefExpr{
														pos:  position{line: 630, col: 39, offset: 17047},
														name: "Sep",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 630, col: 63, offset: 17071},
									label: "last",
									expr: &zeroOrOneExpr{
										pos: position{line: 630, col: 68, offset: 17076},
										expr: &ruleRefExpr{
											pos:  position{line: 630, col: 68, offset: 17076},
											name: "LambdaArg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 630, col: 79, offset: 17087},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 630, col: 81, offset: 17089},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 632, col: 5, offset: 17149},
						run: (*parser).callonLambdaArgs18,
						expr: &labeledExpr{
							pos:   position{line: 632, col: 5, offset: 17149},
							label: "arg",
							expr: &ruleRefExpr{
								pos:  position{line: 632, col: 9, offset: 17153},
								name: "LambdaArg",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LambdaArg",
			pos:  position{line: 636, col: 1, offset: 17209},
			expr: &choiceExpr{
				pos: position{line: 636, col: 14, offset: 17222},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 636, col: 14, offset: 17222},
						name: "ArgWithDefault",
					},
					&ruleRefExpr{
						pos:  position{line: 636, col: 31, offset: 17239},
						name: "ArgWithBlockDefault",
					},
					&ruleRefExpr{
						pos:  position{line: 636, col: 53, offset: 17261},
						name: "ArgWithType",
					},
					&ruleRefExpr{
						pos:  position{line: 636, col: 67, offset: 17275},
						name: "ArgWithoutType",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithoutType",
			pos:  position{line: 638, col: 1, offset: 17291},
			expr: &actionExpr{
				pos: position{line: 638, col: 19, offset: 17309},
				run: (*parser).callonArgWithoutType1,
				expr: &labeledExpr{
					pos:   position{line: 638, col: 19, offset: 17309},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 638, col: 24, offset: 17314},
						name: "Id",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Match",
			pos:  position{line: 645, col: 1, offset: 17394},
			expr: &actionExpr{
				pos: position{line: 645, col: 10, offset: 17403},
				run: (*parser).callonMatch1,
				expr: &seqExpr{
					pos: position{line: 645, col: 10, offset: 17403},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 645, col: 10, offset: 17403},
							name: "MatchToken",
						},
						&ruleRefExpr{
							pos:  position{line: 645, col: 21, offset: 17414},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 645, col: 23, offset: 17416},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 645, col: 28, offset: 17421},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 645, col: 33, offset: 17426},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 645, col: 35, offset: 17428},
							name: "WithToken",
						},
						&ruleRefExpr{
							pos:  position{line: 645, col: 45, offset: 17438},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 645, col: 47, offset: 17440},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 645, col: 51, offset: 17444},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 645, col: 53, offset: 17446},
							label: "cs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 645, col: 56, offset: 17449},
								expr: &actionExpr{
									pos: position{line: 645, col: 57, offset: 17450},
									run: (*parser).callonMatch14,
									expr: &seqExpr{
										pos: position{line: 645, col: 57, offset: 17450},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 645, col: 57, offset: 17450},
												label: "m",
												expr: &ruleRefExpr{
													pos:  position{line: 645, col: 59, offset: 17452},
													name: "MatchCase",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 645, col: 69, offset: 17462},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 645, col: 93, offset: 17486},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 645, col: 98, offset: 17491},
								expr: &ruleRefExpr{
									pos:  position{line: 645, col: 98, offset: 17491},
									name: "MatchCase",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 645, col: 109, offset: 17502},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 645, col: 111, offset: 17504},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MatchCase",
			pos:  position{line: 652, col: 1, offset: 17608},
			expr: &actionExpr{
				pos: position{line: 652, col: 14, offset: 17621},
				run: (*parser).callonMatchCase1,
				expr: &seqExpr{
					pos: position{line: 652, col: 14, offset: 17621},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 652, col: 14, offset: 17621},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 22, offset: 17629},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 652, col: 30, offset: 17637},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 652, col: 32, offset: 17639},
							val:        "->",
							ignoreCase: false,
							want:       "\"->\"",
						},
						&ruleRefExpr{
							pos:  position{line: 652, col: 37, offset: 17644},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 652, col: 39, offset: 17646},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 652, col: 44, offset: 17651},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Pattern",
			pos:  position{line: 659, col: 1, offset: 17745},
			expr: &choiceExpr{
				pos: position{line: 659, col: 12, offset: 17756},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 659, col: 12, offset: 17756},
						name: "WildcardPattern",
					},
					&ruleRefExpr{
						pos:  position{line: 659, col: 30, offset: 17774},
						name: "LiteralPattern",
					},
					&ruleRefExpr{
						pos:  position{line: 659, col: 47, offset: 17791},
						name: "ConstructorPattern",
					},
					&ruleRefExpr{
						pos:  position{line: 659, col: 68, offset: 17812},
						name: "VariablePattern",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WildcardPattern",
			pos:  position{line: 661, col: 1, offset: 17829},
			expr: &actionExpr{
				pos: position{line: 661, col: 20, offset: 17848},
				run: (*parser).callonWildcardPattern1,
				expr: &litMatcher{
					pos:        position{line: 661, col: 20, offset: 17848},
					val:        "_",
					ignoreCase: false,
					want:       "\"_\"",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LiteralPattern",
			pos:  position{line: 665, col: 1, offset: 17889},
			expr: &actionExpr{
				pos: position{line: 665, col: 19, offset: 17907},
				run: (*parser).callonLiteralPattern1,
				expr: &labeledExpr{
					pos:   position{line: 665, col: 19, offset: 17907},
					label: "lit",
					expr: &ruleRefExpr{
						pos:  position{line: 665, col: 23, offset: 17911},
						name: "Literal",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ConstructorPattern",
			pos:  position{line: 669, col: 1, offset: 17972},
			expr: &actionExpr{
				pos: position{line: 669, col: 23, offset: 17994},
				run: (*parser).callonConstructorPattern1,
				expr: &seqExpr{
					pos: position{line: 669, col: 23, offset: 17994},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 669, col: 23, offset: 17994},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 669, col: 28, offset: 17999},
								name: "UpperId",
							},
						},
						&labeledExpr{
							pos:   position{line: 669, col: 36, offset: 18007},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 669, col: 41, offset: 18012},
								expr: &ruleRefExpr{
									pos:  position{line: 669, col: 41, offset: 18012},
									name: "PatternArgs",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PatternArgs",
			pos:  position{line: 680, col: 1, offset: 18193},
			expr: &actionExpr{
				pos: position{line: 680, col: 16, offset: 18208},
				run: (*parser).callonPatternArgs1,
				expr: &seqExpr{
					pos: position{line: 680, col: 16, offset: 18208},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 680, col: 16, offset: 18208},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 680, col: 20, offset: 18212},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 680, col: 22, offset: 18214},
							label: "patterns",
							expr: &zeroOrMoreExpr{
								pos: position{line: 680, col: 31, offset: 18223},
								expr: &actionExpr{
									pos: position{line: 680, col: 32, offset: 18224},
									run: (*parser).callonPatternArgs7,
									expr: &seqExpr{
										pos: position{line: 680, col: 32, offset: 18224},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 680, col: 32, offset: 18224},
												label: "p",
												expr: &ruleRefExpr{
													pos:  position{line: 680, col: 34, offset: 18226},
													name: "Pattern",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 680, col: 42, offset: 18234},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 680, col: 66, offset: 18258},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 680, col: 71, offset: 18263},
								expr: &ruleRefExpr{
									pos:  position{line: 680, col: 71, offset: 18263},
									name: "Pattern",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 680, col: 80, offset: 18272},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 680, col: 82, offset: 18274},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VariablePattern",
			pos:  position{line: 684, col: 1, offset: 18336},
			expr: &actionExpr{
				pos: position{line: 684, col: 20, offset: 18355},
				run: (*parser).callonVariablePattern1,
				expr: &labeledExpr{
					pos:   position{line: 684, col: 20, offset: 18355},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 684, col: 25, offset: 18360},
						name: "Id",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MatchToken",
			pos:  position{line: 688, col: 1, offset: 18419},
			expr: &seqExpr{
				pos: position{line: 688, col: 15, offset: 18433},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 688, col: 15, offset: 18433},
						val:        "match",
						ignoreCase: false,
						want:       "\"match\"",
					},
					&notExpr{
						pos: position{line: 688, col: 23, offset: 18441},
						expr: &ruleRefExpr{
							pos:  position{line: 688, col: 24, offset: 18442},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WithToken",
			pos:  position{line: 689, col: 1, offset: 18451},
			expr: &seqExpr{
				pos: position{line: 689, col: 14, offset: 18464},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 689, col: 14, offset: 18464},
						val:        "with",
						ignoreCase: false,
						want:       "\"with\"",
					},
					&notExpr{
						pos: position{line: 689, col: 21, offset: 18471},
						expr: &ruleRefExpr{
							pos:  position{line: 689, col: 22, offset: 18472},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Assert",
			pos:  position{line: 691, col: 1, offset: 18482},
			expr: &actionExpr{
				pos: position{line: 691, col: 11, offset: 18492},
				run: (*parser).callonAssert1,
				expr: &seqExpr{
					pos: position{line: 691, col: 11, offset: 18492},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 691, col: 11, offset: 18492},
							name: "AssertToken",
						},
						&labeledExpr{
							pos:   position{line: 691, col: 23, offset: 18504},
							label: "message",
							expr: &zeroOrOneExpr{
								pos: position{line: 691, col: 31, offset: 18512},
								expr: &ruleRefExpr{
									pos:  position{line: 691, col: 31, offset: 18512},
									name: "MessageArgs",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 691, col: 44, offset: 18525},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 691, col: 46, offset: 18527},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 691, col: 52, offset: 18533},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MessageArgs",
			pos:  position{line: 703, col: 1, offset: 18698},
			expr: &actionExpr{
				pos: position{line: 703, col: 16, offset: 18713},
				run: (*parser).callonMessageArgs1,
				expr: &seqExpr{
					pos: position{line: 703, col: 16, offset: 18713},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 703, col: 16, offset: 18713},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 703, col: 20, offset: 18717},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 703, col: 22, offset: 18719},
							label: "msg",
							expr: &ruleRefExpr{
								pos:  position{line: 703, col: 26, offset: 18723},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 703, col: 31, offset: 18728},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 703, col: 33, offset: 18730},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AssertToken",
			pos:  position{line: 707, col: 1, offset: 18757},
			expr: &seqExpr{
				pos: position{line: 707, col: 16, offset: 18772},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 707, col: 16, offset: 18772},
						val:        "assert",
						ignoreCase: false,
						want:       "\"assert\"",
					},
					&notExpr{
						pos: position{line: 707, col: 25, offset: 18781},
						expr: &ruleRefExpr{
							pos:  position{line: 707, col: 26, offset: 18782},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Reassignment",
			pos:  position{line: 709, col: 1, offset: 18792},
			expr: &actionExpr{
				pos: position{line: 709, col: 17, offset: 18808},
				run: (*parser).callonReassignment1,
				expr: &seqExpr{
					pos: position{line: 709, col: 17, offset: 18808},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 709, col: 17, offset: 18808},
							label: "target",
							expr: &ruleRefExpr{
								pos:  position{line: 709, col: 24, offset: 18815},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 709, col: 29, offset: 18820},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 709, col: 31, offset: 18822},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 709, col: 34, offset: 18825},
								name: "AssignOp",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 709, col: 43, offset: 18834},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 709, col: 45, offset: 18836},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 709, col: 51, offset: 18842},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AssignOp",
			pos:  position{line: 718, col: 1, offset: 18981},
			expr: &choiceExpr{
				pos: position{line: 718, col: 13, offset: 18993},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 718, col: 13, offset: 18993},
						run: (*parser).callonAssignOp2,
						expr: &ruleRefExpr{
							pos:  position{line: 718, col: 13, offset: 18993},
							name: "PlusEqualToken",
						},
					},
					&actionExpr{
						pos: position{line: 718, col: 50, offset: 19030},
						run: (*parser).callonAssignOp4,
						expr: &ruleRefExpr{
							pos:  position{line: 718, col: 50, offset: 19030},
							name: "EqualToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PlusEqualToken",
			pos:  position{line: 719, col: 1, offset: 19061},
			expr: &litMatcher{
				pos:        position{line: 719, col: 19, offset: 19079},
				val:        "+=",
				ignoreCase: false,
				want:       "\"+=\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EqualToken",
			pos:  position{line: 720, col: 1, offset: 19084},
			expr: &litMatcher{
				pos:        position{line: 720, col: 15, offset: 19098},
				val:        "=",
				ignoreCase: false,
				want:       "\"=\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeHint",
			pos:  position{line: 722, col: 1, offset: 19103},
			expr: &actionExpr{
				pos: position{line: 722, col: 13, offset: 19115},
				run: (*parser).callonTypeHint1,
				expr: &seqExpr{
					pos: position{line: 722, col: 13, offset: 19115},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 722, col: 13, offset: 19115},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 18, offset: 19120},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 722, col: 23, offset: 19125},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 722, col: 25, offset: 19127},
							name: "DoubleColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 722, col: 42, offset: 19144},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 722, col: 44, offset: 19146},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 722, col: 50, offset: 19152},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DoubleColonToken",
			pos:  position{line: 730, col: 1, offset: 19259},
			expr: &litMatcher{
				pos:        position{line: 730, col: 21, offset: 19279},
				val:        "::",
				ignoreCase: false,
				want:       "\"::\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Reopen",
			pos:  position{line: 732, col: 1, offset: 19285},
			expr: &actionExpr{
				pos: position{line: 732, col: 11, offset: 19295},
				run: (*parser).callonReopen1,
				expr: &seqExpr{
					pos: position{line: 732, col: 11, offset: 19295},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 732, col: 11, offset: 19295},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 732, col: 16, offset: 19300},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 732, col: 19, offset: 19303},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 732, col: 21, offset: 19305},
							name: "ReopenToken",
						},
						&ruleRefExpr{
							pos:  position{line: 732, col: 33, offset: 19317},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 732, col: 35, offset: 19319},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 732, col: 37, offset: 19321},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveDecl",
			pos:  position{line: 740, col: 1, offset: 19423},
			expr: &actionExpr{
				pos: position{line: 740, col: 18, offset: 19440},
				run: (*parser).callonDirectiveDecl1,
				expr: &seqExpr{
					pos: position{line: 740, col: 18, offset: 19440},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 740, col: 18, offset: 19440},
							name: "DirectiveToken",
						},
						&ruleRefExpr{
							pos:  position{line: 740, col: 33, offset: 19455},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 740, col: 35, offset: 19457},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 740, col: 40, offset: 19462},
								name: "DirectiveName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 740, col: 54, offset: 19476},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 740, col: 56, offset: 19478},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 740, col: 61, offset: 19483},
								expr: &ruleRefExpr{
									pos:  position{line: 740, col: 61, offset: 19483},
									name: "ArgTypes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 740, col: 71, offset: 19493},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 740, col: 73, offset: 19495},
							name: "OnToken",
						},
						&ruleRefExpr{
							pos:  position{line: 740, col: 81, offset: 19503},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 740, col: 83, offset: 19505},
							label: "locations",
							expr: &ruleRefExpr{
								pos:  position{line: 740, col: 93, offset: 19515},
								name: "DirectiveLocations",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveApplication",
			pos:  position{line: 753, col: 1, offset: 19766},
			expr: &actionExpr{
				pos: position{line: 753, col: 25, offset: 19790},
				run: (*parser).callonDirectiveApplication1,
				expr: &seqExpr{
					pos: position{line: 753, col: 25, offset: 19790},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 753, col: 25, offset: 19790},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 753, col: 29, offset: 19794},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 753, col: 34, offset: 19799},
								name: "Id",
							},
						},
						&labeledExpr{
							pos:   position{line: 753, col: 37, offset: 19802},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 753, col: 42, offset: 19807},
								expr: &ruleRefExpr{
									pos:  position{line: 753, col: 42, offset: 19807},
									name: "ArgValues",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveLocations",
			pos:  position{line: 765, col: 1, offset: 20017},
			expr: &actionExpr{
				pos: position{line: 765, col: 23, offset: 20039},
				run: (*parser).callonDirectiveLocations1,
				expr: &seqExpr{
					pos: position{line: 765, col: 23, offset: 20039},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 765, col: 23, offset: 20039},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 765, col: 29, offset: 20045},
								name: "DirectiveLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 765, col: 47, offset: 20063},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 765, col: 52, offset: 20068},
								expr: &actionExpr{
									pos: position{line: 765, col: 53, offset: 20069},
									run: (*parser).callonDirectiveLocations7,
									expr: &seqExpr{
										pos: position{line: 765, col: 53, offset: 20069},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 765, col: 53, offset: 20069},
												name: "_",
											},
											&litMatcher{
												pos:        position{line: 765, col: 55, offset: 20071},
												val:        "|",
												ignoreCase: false,
												want:       "\"|\"",
											},
											&ruleRefExpr{
												pos:  position{line: 765, col: 59, offset: 20075},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 765, col: 61, offset: 20077},
												label: "loc",
												expr: &ruleRefExpr{
													pos:  position{line: 765, col: 65, offset: 20081},
													name: "DirectiveLocation",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveLocation",
			pos:  position{line: 769, col: 1, offset: 20186},
			expr: &actionExpr{
				pos: position{line: 769, col: 22, offset: 20207},
				run: (*parser).callonDirectiveLocation1,
				expr: &labeledExpr{
					pos:   position{line: 769, col: 22, offset: 20207},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 769, col: 27, offset: 20212},
						name: "UpperId",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveName",
			pos:  position{line: 773, col: 1, offset: 20278},
			expr: &actionExpr{
				pos: position{line: 773, col: 18, offset: 20295},
				run: (*parser).callonDirectiveName1,
				expr: &seqExpr{
					pos: position{line: 773, col: 18, offset: 20295},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 773, col: 18, offset: 20295},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 773, col: 22, offset: 20299},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 773, col: 27, offset: 20304},
								name: "Id",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveToken",
			pos:  position{line: 777, col: 1, offset: 20340},
			expr: &seqExpr{
				pos: position{line: 777, col: 19, offset: 20358},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 777, col: 19, offset: 20358},
						val:        "directive",
						ignoreCase: false,
						want:       "\"directive\"",
					},
					&notExpr{
						pos: position{line: 777, col: 31, offset: 20370},
						expr: &ruleRefExpr{
							pos:  position{line: 777, col: 32, offset: 20371},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OnToken",
			pos:  position{line: 778, col: 1, offset: 20380},
			expr: &seqExpr{
				pos: position{line: 778, col: 12, offset: 20391},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 778, col: 12, offset: 20391},
						val:        "on",
						ignoreCase: false,
						want:       "\"on\"",
					},
					&notExpr{
						pos: position{line: 778, col: 17, offset: 20396},
						expr: &ruleRefExpr{
							pos:  position{line: 778, col: 18, offset: 20397},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Import",
			pos:  position{line: 780, col: 1, offset: 20407},
			expr: &actionExpr{
				pos: position{line: 780, col: 11, offset: 20417},
				run: (*parser).callonImport1,
				expr: &seqExpr{
					pos: position{line: 780, col: 11, offset: 20417},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 780, col: 11, offset: 20417},
							name: "ImportToken",
						},
						&ruleRefExpr{
							pos:  position{line: 780, col: 23, offset: 20429},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 780, col: 25, offset: 20431},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 780, col: 32, offset: 20438},
								name: "ImportSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 780, col: 45, offset: 20451},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 780, col: 51, offset: 20457},
								expr: &seqExpr{
									pos: position{line: 780, col: 52, offset: 20458},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 780, col: 52, offset: 20458},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 780, col: 54, offset: 20460},
											name: "AsToken",
										},
										&ruleRefExpr{
											pos:  position{line: 780, col: 62, offset: 20468},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 780, col: 64, offset: 20470},
											label: "name",
											expr: &ruleRefExpr{
												pos:  position{line: 780, col: 69, offset: 20475},
												name: "Id",
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ImportSource",
			pos:  position{line: 794, col: 1, offset: 20751},
			expr: &choiceExpr{
				pos: position{line: 794, col: 17, offset: 20767},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 794, col: 17, offset: 20767},
						name: "DaggerKeyword",
					},
					&ruleRefExpr{
						pos:  position{line: 794, col: 33, offset: 20783},
						name: "SchemaURL",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DaggerKeyword",
			pos:  position{line: 795, col: 1, offset: 20793},
			expr: &actionExpr{
				pos: position{line: 795, col: 18, offset: 20810},
				run: (*parser).callonDaggerKeyword1,
				expr: &seqExpr{
					pos: position{line: 795, col: 18, offset: 20810},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 795, col: 18, offset: 20810},
							val:        "dagger",
							ignoreCase: false,
							want:       "\"dagger\"",
						},
						&notExpr{
							pos: position{line: 795, col: 27, offset: 20819},
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 28, offset: 20820},
								name: "WordChar",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SchemaURL",
			pos:  position{line: 798, col: 1, offset: 20856},
			expr: &actionExpr{
				pos: position{line: 798, col: 14, offset: 20869},
				run: (*parser).callonSchemaURL1,
				expr: &seqExpr{
					pos: position{line: 798, col: 14, offset: 20869},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 798, col: 14, offset: 20869},
							val:        "[a-zA-Z]",
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 798, col: 23, offset: 20878},
							expr: &charClassMatcher{
								pos:        position{line: 798, col: 23, offset: 20878},
								val:        "[a-zA-Z0-9.-/]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9', '.', '/'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ImportToken",
			pos:  position{line: 802, col: 1, offset: 20928},
			expr: &seqExpr{
				pos: position{line: 802, col: 16, offset: 20943},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 802, col: 16, offset: 20943},
						val:        "import",
						ignoreCase: false,
						want:       "\"import\"",
					},
					&notExpr{
						pos: position{line: 802, col: 25, offset: 20952},
						expr: &ruleRefExpr{
							pos:  position{line: 802, col: 26, offset: 20953},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AsToken",
			pos:  position{line: 803, col: 1, offset: 20962},
			expr: &seqExpr{
				pos: position{line: 803, col: 12, offset: 20973},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 803, col: 12, offset: 20973},
						val:        "as",
						ignoreCase: false,
						want:       "\"as\"",
					},
					&notExpr{
						pos: position{line: 803, col: 17, offset: 20978},
						expr: &ruleRefExpr{
							pos:  position{line: 803, col: 18, offset: 20979},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
	},
}

func (c *current) onDang6(e any) (any, error) {
	return e, nil
}

func (p *parser) callonDang6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDang6(stack["e"])
}

func (c *current) onDang1(eles, last any) (any, error) {
	return Block{
		Forms: sliceOfAppend[Node](eles, last),
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonDang1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDang1(stack["eles"], stack["last"])
}

func (c *current) onAnnotatedDecl1(docstring, decl any) (any, error) {
	switch node := decl.(type) {
	case *ClassDecl:
		node.DocString = docstring.(string)
		return node, nil
	case SlotDecl:
		node.DocString = docstring.(string)
		return node, nil
	case *DirectiveDecl:
		node.DocString = docstring.(string)
		return node, nil
	default:
		return decl, nil
	}
}

func (p *parser) callonAnnotatedDecl1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnnotatedDecl1(stack["docstring"], stack["decl"])
}

func (c *current) onParenForm1(expr any) (any, error) {
	return expr.(Node), nil
}

func (p *parser) callonParenForm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenForm1(stack["expr"])
}

func (c *current) onCall1(name, args any) (any, error) {
	// Symbol followed by () - create FunCall
	argRecord := Record(args.([]Keyed[Node]))
	return FunCall{
		Fun: Symbol{
			Name: name.(string),
			Loc:  c.Loc(),
		},
		Args: argRecord,
		Loc:  c.Loc(),
	}, nil
}

func (p *parser) callonCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCall1(stack["name"], stack["args"])
}

func (c *current) onSymbol1(name any) (any, error) {
	// Just a Symbol
	return Symbol{
		Name:     name.(string),
		AutoCall: true,
		Loc:      c.Loc(),
	}, nil
}

func (p *parser) callonSymbol1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol1(stack["name"])
}

func (c *current) onSelectOrCall1(left, selection any) (any, error) {
	switch sel := selection.(type) {
	case *ObjectSelection:
		// Object selection: obj.{field1, field2}
		sel.Receiver = left.(Node)
		return sel, nil
	case []interface{}:
		// Regular field access with optional args
		name := sel[0].(string)
		args := sel[1]
		if args != nil {
			// Select followed by () - create FunCall
			argRecord := Record(args.([]Keyed[Node]))
			return FunCall{
				Fun: Select{
					Receiver: left.(Node),
					Field:    name,
					Loc:      c.Loc(),
				},
				Args: argRecord,
				Loc:  c.Loc(),
			}, nil
		} else {
			// Just a Select
			return Select{
				Receiver: left.(Node),
				Field:    name,
				AutoCall: true,
				Loc:      c.Loc(),
			}, nil
		}
	default:
		return nil, fmt.Errorf("unexpected selection type")
	}
}

func (p *parser) callonSelectOrCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectOrCall1(stack["left"], stack["selection"])
}

func (c *current) onIndexOrCall1(left, index, args any) (any, error) {
	if args != nil {
		// Index followed by () - create FunCall
		argRecord := Record(args.([]Keyed[Node]))
		return FunCall{
			Fun: Index{
				Receiver: left.(Node),
				Index:    index.(Node),
				Loc:      c.Loc(),
			},
			Args: argRecord,
			Loc:  c.Loc(),
		}, nil
	} else {
		// Just an Index
		return Index{
			Receiver: left.(Node),
			Index:    index.(Node),
			AutoCall: true,
			Loc:      c.Loc(),
		}, nil
	}
}

func (p *parser) callonIndexOrCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexOrCall1(stack["left"], stack["index"], stack["args"])
}

func (c *current) onObjectSelection7(f any) (any, error) {
	return f, nil
}

func (p *parser) callonObjectSelection7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObjectSelection7(stack["f"])
}

func (c *current) onObjectSelection1(fields, last any) (any, error) {
	return &ObjectSelection{
		Receiver: nil, // Will be set by parent SelectOrCall
		Fields:   sliceOfAppend[FieldSelection](fields, last),
		Loc:      c.Loc(),
	}, nil
}

func (p *parser) callonObjectSelection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObjectSelection1(stack["fields"], stack["last"])
}

func (c *current) onFieldSelection1(name, args, selection any) (any, error) {
	var argRecord Record
	if args != nil {
		argRecord = Record(args.([]Keyed[Node]))
	}

	if selection != nil {
		return FieldSelection{
			Name:      name.(string),
			Args:      argRecord,
			Selection: selection.([]interface{})[1].(*ObjectSelection),
			Loc:       c.Loc(),
		}, nil
	} else {
		return FieldSelection{
			Name:      name.(string),
			Args:      argRecord,
			Selection: nil,
			Loc:       c.Loc(),
		}, nil
	}
}

func (p *parser) callonFieldSelection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldSelection1(stack["name"], stack["args"], stack["selection"])
}

func (c *current) onClass9(app any) (any, error) {
	return app, nil
}

func (p *parser) callonClass9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClass9(stack["app"])
}

func (c *current) onClass1(name, directives, block any) (any, error) {
	return &ClassDecl{
		Named:      name.(string),
		Value:      block.(Block),
		Visibility: PublicVisibility, // TODO
		Directives: sliceOf[DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonClass1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClass1(stack["name"], stack["directives"], stack["block"])
}

func (c *current) onTypeAndValueSlot20(app any) (any, error) {
	return app, nil
}

func (p *parser) callonTypeAndValueSlot20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndValueSlot20(stack["app"])
}

func (c *current) onTypeAndValueSlot1(vis, name, type_, value, directives any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Type_:      type_.(TypeNode),
		Value:      value.(Node),
		Visibility: vis.(Visibility),
		Directives: sliceOf[DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonTypeAndValueSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndValueSlot1(stack["vis"], stack["name"], stack["type_"], stack["value"], stack["directives"])
}

func (c *current) onValueOnlySlot15(app any) (any, error) {
	return app, nil
}

func (p *parser) callonValueOnlySlot15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueOnlySlot15(stack["app"])
}

func (c *current) onValueOnlySlot1(vis, name, val, directives any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Value:      val.(Node),
		Visibility: vis.(Visibility),
		Directives: sliceOf[DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonValueOnlySlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueOnlySlot1(stack["vis"], stack["name"], stack["val"], stack["directives"])
}

func (c *current) onTypeOnlySlot15(app any) (any, error) {
	return app, nil
}

func (p *parser) callonTypeOnlySlot15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeOnlySlot15(stack["app"])
}

func (c *current) onTypeOnlySlot1(vis, name, type_, directives any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Type_:      type_.(TypeNode),
		Visibility: vis.(Visibility),
		Directives: sliceOf[DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonTypeOnlySlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeOnlySlot1(stack["vis"], stack["name"], stack["type_"], stack["directives"])
}

func (c *current) onTypeAndBlockSlot18(app any) (any, error) {
	return app, nil
}

func (p *parser) callonTypeAndBlockSlot18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndBlockSlot18(stack["app"])
}

func (c *current) onTypeAndBlockSlot1(vis, name, type_, block, directives any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Type_: FunTypeNode{nil, type_.(TypeNode)},
		Value: &FunDecl{
			FunctionBase: FunctionBase{
				Args: nil,
				Body: block.(Block),
				Loc:  c.Loc(),
			},
			Named:      name.(string),
			Ret:        type_.(TypeNode),
			Visibility: vis.(Visibility),
		},
		Visibility: vis.(Visibility),
		Directives: sliceOf[DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonTypeAndBlockSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndBlockSlot1(stack["vis"], stack["name"], stack["type_"], stack["block"], stack["directives"])
}

func (c *current) onTypeAndArgsAndBlockSlot21(app any) (any, error) {
	return app, nil
}

func (p *parser) callonTypeAndArgsAndBlockSlot21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndArgsAndBlockSlot21(stack["app"])
}

func (c *current) onTypeAndArgsAndBlockSlot1(vis, name, args, type_, block, directives any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Type_: FunTypeNode{args.([]SlotDecl), type_.(TypeNode)},
		Value: &FunDecl{
			FunctionBase: FunctionBase{
				Args: args.([]SlotDecl),
				Body: block.(Block),
				Loc:  c.Loc(),
			},
			Named:      name.(string),
			Ret:        type_.(TypeNode),
			Visibility: vis.(Visibility),
		},
		Visibility: vis.(Visibility),
		Directives: sliceOf[DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonTypeAndArgsAndBlockSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndArgsAndBlockSlot1(stack["vis"], stack["name"], stack["args"], stack["type_"], stack["block"], stack["directives"])
}

func (c *current) onVisibility2() (any, error) {
	return PublicVisibility, nil
}

func (p *parser) callonVisibility2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVisibility2()
}

func (c *current) onVisibility4() (any, error) {
	return PrivateVisibility, nil
}

func (p *parser) callonVisibility4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVisibility4()
}

func (c *current) onWordToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonWordToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWordToken1()
}

func (c *current) onUpperToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUpperToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpperToken1()
}

func (c *current) onArgValues7(a any) (any, error) {
	return a, nil
}

func (p *parser) callonArgValues7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgValues7(stack["a"])
}

func (c *current) onArgValues1(args, last any) (any, error) {
	return sliceOfAppend[Keyed[Node]](args, last), nil
}

func (p *parser) callonArgValues1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgValues1(stack["args"], stack["last"])
}

func (c *current) onArgTypes7(a any) (any, error) {
	return a, nil
}

func (p *parser) callonArgTypes7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgTypes7(stack["a"])
}

func (c *current) onArgTypes1(args, last any) (any, error) {
	return sliceOfAppend[SlotDecl](args, last), nil
}

func (p *parser) callonArgTypes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgTypes1(stack["args"], stack["last"])
}

func (c *current) onArgType2(docstring, slot any) (any, error) {
	slotDecl := slot.(SlotDecl)
	return SlotDecl{
		Named:      slotDecl.Named,
		Type_:      slotDecl.Type_,
		Value:      slotDecl.Value,
		Directives: slotDecl.Directives,
		DocString:  docstring.(string),
		Loc:        slotDecl.Loc,
	}, nil
}

func (p *parser) callonArgType2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgType2(stack["docstring"], stack["slot"])
}

func (c *current) onArgType12(slot any) (any, error) {
	return slot.(SlotDecl), nil
}

func (p *parser) callonArgType12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgType12(stack["slot"])
}

func (c *current) onArgWithDefault1(name, type_, directives, value any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Type_:      type_.(TypeNode),
		Directives: sliceOf[DirectiveApplication](directives),
		Value:      value.(Node),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonArgWithDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithDefault1(stack["name"], stack["type_"], stack["directives"], stack["value"])
}

func (c *current) onArgWithBlockDefault1(name, type_, directives, block any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Type_:      type_.(TypeNode),
		Directives: sliceOf[DirectiveApplication](directives),
		Value:      block.(Block),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonArgWithBlockDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithBlockDefault1(stack["name"], stack["type_"], stack["directives"], stack["block"])
}

func (c *current) onArgWithType1(name, type_, directives any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Type_:      type_.(TypeNode),
		Directives: sliceOf[DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonArgWithType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithType1(stack["name"], stack["type_"], stack["directives"])
}

func (c *current) onKeyValue1(key, value any) (any, error) {
	return Keyed[Node]{Key: key.(string), Value: value.(Node), Positional: false}, nil
}

func (p *parser) callonKeyValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyValue1(stack["key"], stack["value"])
}

func (c *current) onPositionalValue1(value any) (any, error) {
	return Keyed[Node]{Key: "", Value: value.(Node), Positional: true}, nil
}

func (p *parser) callonPositionalValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedType1(name any) (any, error) {
	return NamedTypeNode{name.(string)}, nil
}

func (p *parser) callonNamedType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedType1(stack["name"])
}

func (c *current) onListType1(inner any) (any, error) {
	return ListTypeNode{inner.(TypeNode)}, nil
}

func (p *parser) callonListType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListType1(stack["inner"])
}

func (c *current) onObjectType7(f any) (any, error) {
	return f, nil
}

func (p *parser) callonObjectType7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObjectType7(stack["f"])
}

func (c *current) onObjectType1(fields, last any) (any, error) {
	return ObjectTypeNode{
		Fields: sliceOfAppend[ObjectTypeField](fields, last),
	}, nil
}

func (p *parser) callonObjectType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObjectType1(stack["fields"], stack["last"])
}

func (c *current) onObjectTypeField1(key, type_ any) (any, error) {
	return ObjectTypeField{
		Key:  key.(string),
		Type: type_.(TypeNode),
	}, nil
}

func (p *parser) callonObjectTypeField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObjectTypeField1(stack["key"], stack["type_"])
}

func (c *current) onNonNull1(inner any) (any, error) {
	return NonNullTypeNode{inner.(TypeNode)}, nil
}

func (p *parser) callonNonNull1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonNull1(stack["inner"])
}

func (c *current) onTypeVariable1(v any) (any, error) {
	return VariableTypeNode{v.([]byte)[0]}, nil
}

func (p *parser) callonTypeVariable1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeVariable1(stack["v"])
}

func (c *current) onDefaultExpr2(left, right any) (any, error) {
	return Default{
		Left:  left.(Node),
		Right: right.(Node),
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonDefaultExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultExpr2(stack["left"], stack["right"])
}

func (c *current) onEqualityExpr2(left, op, right any) (any, error) {
	switch op.(string) {
	case "==":
		return Equality{
			Left:  left.(Node),
			Right: right.(Node),
			Loc:   c.Loc(),
		}, nil
	case "!=":
		return NewInequality(left.(Node), right.(Node), c.Loc()), nil
	default:
		return nil, fmt.Errorf("unknown equality operator: %s", op.(string))
	}
}

func (p *parser) callonEqualityExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityExpr2(stack["left"], stack["op"], stack["right"])
}

func (c *current) onEqualityOp2() (any, error) {
	return "==", nil
}

func (p *parser) callonEqualityOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOp2()
}

func (c *current) onEqualityOp4() (any, error) {
	return "!=", nil
}

func (p *parser) callonEqualityOp4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOp4()
}

func (c *current) onRelationalExpr2(left, op, right any) (any, error) {
	switch op.(string) {
	case "<":
		return NewLessThan(left.(Node), right.(Node), c.Loc()), nil
	case "<=":
		return NewLessThanEqual(left.(Node), right.(Node), c.Loc()), nil
	case ">":
		return NewGreaterThan(left.(Node), right.(Node), c.Loc()), nil
	case ">=":
		return NewGreaterThanEqual(left.(Node), right.(Node), c.Loc()), nil
	default:
		return nil, fmt.Errorf("unknown relational operator: %s", op.(string))
	}
}

func (p *parser) callonRelationalExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelationalExpr2(stack["left"], stack["op"], stack["right"])
}

func (c *current) onRelationalOp2() (any, error) {
	return "<=", nil
}

func (p *parser) callonRelationalOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelationalOp2()
}

func (c *current) onRelationalOp4() (any, error) {
	return ">=", nil
}

func (p *parser) callonRelationalOp4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelationalOp4()
}

func (c *current) onRelationalOp6() (any, error) {
	return "<", nil
}

func (p *parser) callonRelationalOp6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelationalOp6()
}

func (c *current) onRelationalOp8() (any, error) {
	return ">", nil
}

func (p *parser) callonRelationalOp8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelationalOp8()
}

func (c *current) onAdditiveExpr2(left, op, right any) (any, error) {
	switch op.(string) {
	case "+":
		return NewAddition(left.(Node), right.(Node), c.Loc()), nil
	case "-":
		return NewSubtraction(left.(Node), right.(Node), c.Loc()), nil
	default:
		return nil, fmt.Errorf("unknown additive operator: %s", op.(string))
	}
}

func (p *parser) callonAdditiveExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr2(stack["left"], stack["op"], stack["right"])
}

func (c *current) onAdditiveOp2() (any, error) {
	return "+", nil
}

func (p *parser) callonAdditiveOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOp2()
}

func (c *current) onAdditiveOp4() (any, error) {
	return "-", nil
}

func (p *parser) callonAdditiveOp4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOp4()
}

func (c *current) onMultiplicativeExpr1(left, op, right any) (any, error) {
	switch op.(string) {
	case "*":
		return NewMultiplication(left.(Node), right.(Node), c.Loc()), nil
	case "/":
		return NewDivision(left.(Node), right.(Node), c.Loc()), nil
	case "%":
		return NewModulo(left.(Node), right.(Node), c.Loc()), nil
	default:
		return nil, fmt.Errorf("unknown multiplicative operator: %s", op.(string))
	}
}

func (p *parser) callonMultiplicativeExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onMultiplicativeOp2() (any, error) {
	return "*", nil
}

func (p *parser) callonMultiplicativeOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOp2()
}

func (c *current) onMultiplicativeOp4() (any, error) {
	return "/", nil
}

func (p *parser) callonMultiplicativeOp4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOp4()
}

func (c *current) onMultiplicativeOp6() (any, error) {
	return "%", nil
}

func (p *parser) callonMultiplicativeOp6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOp6()
}

func (c *current) onList7(e any) (any, error) {
	return e, nil
}

func (p *parser) callonList7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onList7(stack["e"])
}

func (c *current) onList1(eles, last any) (any, error) {
	return List{
		Elements: sliceOfAppend[Node](eles, last),
		Loc:      c.Loc(),
	}, nil
}

func (p *parser) callonList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onList1(stack["eles"], stack["last"])
}

func (c *current) onObject7(v any) (any, error) {
	return v, nil
}

func (p *parser) callonObject7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObject7(stack["v"])
}

func (c *current) onObject1(vals, last any) (any, error) {
	var slots []SlotDecl
	for _, kv := range sliceOfAppend[Keyed[Node]](vals, last) {
		slots = append(slots, SlotDecl{
			Named: kv.Key,
			Value: kv.Value,
			Loc:   kv.Value.GetSourceLocation(),
		})
	}
	return &Object{
		Slots: slots,
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonObject1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObject1(stack["vals"], stack["last"])
}

func (c *current) onBlock7(e any) (any, error) {
	return e, nil
}

func (p *parser) callonBlock7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock7(stack["e"])
}

func (c *current) onBlock1(eles, last any) (any, error) {
	return Block{
		Forms: sliceOfAppend[Node](eles, last),
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock1(stack["eles"], stack["last"])
}

func (c *current) onInt1() (any, error) {
	value, err := strconv.ParseInt(string(c.text), 10, 64)
	if err != nil {
		return nil, err
	}
	return Int{
		Value: value,
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonInt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInt1()
}

func (c *current) onPrecRightMultilineString7(l any) (any, error) {
	return l, nil
}

func (p *parser) callonPrecRightMultilineString7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrecRightMultilineString7(stack["l"])
}

func (c *current) onPrecRightMultilineString1(first, rest any) (any, error) {
	lines := sliceOfPrepend[string](first, rest)
	return String{
		Value: joinMultilineString(lines),
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonPrecRightMultilineString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPrecRightMultilineString1(stack["first"], stack["rest"])
}

func (c *current) onMultilineStringLine1(content any) (any, error) {
	return string(content.([]byte)), nil
}

func (p *parser) callonMultilineStringLine1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultilineStringLine1(stack["content"])
}

func (c *current) onImmediateMultilineStringContent1() (any, error) {
	return c.text, nil
}

func (p *parser) callonImmediateMultilineStringContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImmediateMultilineStringContent1()
}

func (c *current) onString1() (any, error) {
	c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
	value, err := strconv.Unquote(string(c.text))
	if err != nil {
		return nil, err
	}
	return String{
		Value: value,
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1()
}

func (c *current) onDocString2(content any) (any, error) {
	return normalizeDocString(content.([]byte)), nil
}

func (p *parser) callonDocString2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocString2(stack["content"])
}

func (c *current) onDocString8() (any, error) {
	return "", nil
}

func (p *parser) callonDocString8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocString8()
}

func (c *current) onDocStringContent1() (any, error) {
	return c.text, nil
}

func (p *parser) callonDocStringContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocStringContent1()
}

func (c *current) onQuoted1(quoter, raw any) (any, error) {
	return Quoted{
		quoter.(string),
		raw.(string),
	}, nil
}

func (p *parser) callonQuoted1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoted1(stack["quoter"], stack["raw"])
}

func (c *current) onQuotedRawToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonQuotedRawToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedRawToken1()
}

func (c *current) onBoolean2() (any, error) {
	return Boolean{
		Value: true,
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonBoolean2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean2()
}

func (c *current) onBoolean4() (any, error) {
	return Boolean{
		Value: false,
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonBoolean4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean4()
}

func (c *current) onNull1() (any, error) {
	return Null{
		Loc: c.Loc(),
	}, nil
}

func (p *parser) callonNull1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNull1()
}

func (c *current) onConditional1(cond, block, else_ any) (any, error) {
	return Conditional{
		Condition: cond.(Node),
		Then:      block.(Block),
		Else:      else_,
		Loc:       c.Loc(),
	}, nil
}

func (p *parser) callonConditional1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditional1(stack["cond"], stack["block"], stack["else_"])
}

func (c *current) onElseClause1(block any) (any, error) {
	return block.(Block), nil
}

func (p *parser) callonElseClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseClause1(stack["block"])
}

func (c *current) onWhile1(cond, block any) (any, error) {
	return While{
		Condition: cond.(Node),
		BodyBlock: block.(Block),
		Loc:       c.Loc(),
	}, nil
}

func (p *parser) callonWhile1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhile1(stack["cond"], stack["block"])
}

func (c *current) onForSingleVarLoop1(variable, typeAnnotation, iterable, body any) (any, error) {
	var varType TypeNode
	if typeAnnotation != nil {
		varType = typeAnnotation.([]interface{})[2].(TypeNode)
	}
	return ForLoop{
		Variable: variable.(string),
		Type:     varType,
		Iterable: iterable.(Node),
		LoopBody: body.(Block),
		Loc:      c.Loc(),
	}, nil
}

func (p *parser) callonForSingleVarLoop1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForSingleVarLoop1(stack["variable"], stack["typeAnnotation"], stack["iterable"], stack["body"])
}

func (c *current) onForTwoVarLoop1(key, value, iterable, body any) (any, error) {
	return ForLoop{
		KeyVariable:   key.(string),
		ValueVariable: value.(string),
		Iterable:      iterable.(Node),
		LoopBody:      body.(Block),
		Loc:           c.Loc(),
	}, nil
}

func (p *parser) callonForTwoVarLoop1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForTwoVarLoop1(stack["key"], stack["value"], stack["iterable"], stack["body"])
}

func (c *current) onLambda1(args, expr any) (any, error) {
	return &Lambda{
		FunctionBase: FunctionBase{
			Args: args.([]SlotDecl),
			Body: expr.(Node),
			Loc:  c.Loc(),
		},
	}, nil
}

func (p *parser) callonLambda1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambda1(stack["args"], stack["expr"])
}

func (c *current) onLambdaArgs8(a any) (any, error) {
	return a, nil
}

func (p *parser) callonLambdaArgs8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaArgs8(stack["a"])
}

func (c *current) onLambdaArgs2(args, last any) (any, error) {
	return sliceOfAppend[SlotDecl](args, last), nil
}

func (p *parser) callonLambdaArgs2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaArgs2(stack["args"], stack["last"])
}

func (c *current) onLambdaArgs18(arg any) (any, error) {
	return []SlotDecl{arg.(SlotDecl)}, nil
}

func (p *parser) callonLambdaArgs18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaArgs18(stack["arg"])
}

func (c *current) onArgWithoutType1(name any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonArgWithoutType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithoutType1(stack["name"])
}

func (c *current) onMatch14(m any) (any, error) {
	return m, nil
}

func (p *parser) callonMatch14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatch14(stack["m"])
}

func (c *current) onMatch1(expr, cs, last any) (any, error) {
	return Match{
		Expr:  expr.(Node),
		Cases: sliceOfAppend[MatchCase](cs, last),
	}, nil
}

func (p *parser) callonMatch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatch1(stack["expr"], stack["cs"], stack["last"])
}

func (c *current) onMatchCase1(pattern, expr any) (any, error) {
	return MatchCase{
		Pattern: pattern.(Pattern),
		Expr:    expr.(Node),
	}, nil
}

func (p *parser) callonMatchCase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchCase1(stack["pattern"], stack["expr"])
}

func (c *current) onWildcardPattern1() (any, error) {
	return WildcardPattern{}, nil
}

func (p *parser) callonWildcardPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWildcardPattern1()
}

func (c *current) onLiteralPattern1(lit any) (any, error) {
	return LiteralPattern{Value: lit.(Node)}, nil
}

func (p *parser) callonLiteralPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralPattern1(stack["lit"])
}

func (c *current) onConstructorPattern1(name, args any) (any, error) {
	var patterns []Pattern
	if args != nil {
		patterns = args.([]Pattern)
	}
	return ConstructorPattern{
		Name: name.(string),
		Args: patterns,
	}, nil
}

func (p *parser) callonConstructorPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstructorPattern1(stack["name"], stack["args"])
}

func (c *current) onPatternArgs7(p any) (any, error) {
	return p, nil
}

func (p *parser) callonPatternArgs7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternArgs7(stack["p"])
}

func (c *current) onPatternArgs1(patterns, last any) (any, error) {
	return sliceOfAppend[Pattern](patterns, last), nil
}

func (p *parser) callonPatternArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternArgs1(stack["patterns"], stack["last"])
}

func (c *current) onVariablePattern1(name any) (any, error) {
	return VariablePattern{Name: name.(string)}, nil
}

func (p *parser) callonVariablePattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariablePattern1(stack["name"])
}

func (c *current) onAssert1(message, block any) (any, error) {
	var msg Node
	if message != nil {
		msg = message.(Node)
	}
	return Assert{
		Message: msg,
		Block:   block.(Block),
		Loc:     c.Loc(),
	}, nil
}

func (p *parser) callonAssert1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssert1(stack["message"], stack["block"])
}

func (c *current) onMessageArgs1(msg any) (any, error) {
	return msg, nil
}

func (p *parser) callonMessageArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMessageArgs1(stack["msg"])
}

func (c *current) onReassignment1(target, op, value any) (any, error) {
	return Reassignment{
		Target:   target.(Node),
		Modifier: op.(string),
		Value:    value.(Node),
		Loc:      c.Loc(),
	}, nil
}

func (p *parser) callonReassignment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReassignment1(stack["target"], stack["op"], stack["value"])
}

func (c *current) onAssignOp2() (any, error) {
	return "+", nil
}

func (p *parser) callonAssignOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignOp2()
}

func (c *current) onAssignOp4() (any, error) {
	return "=", nil
}

func (p *parser) callonAssignOp4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignOp4()
}

func (c *current) onTypeHint1(expr, type_ any) (any, error) {
	return TypeHint{
		Expr: expr.(Node),
		Type: type_.(TypeNode),
		Loc:  c.Loc(),
	}, nil
}

func (p *parser) callonTypeHint1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeHint1(stack["expr"], stack["type_"])
}

func (c *current) onReopen1(name, b any) (any, error) {
	return Reopen{
		Name:  name.(string),
		Block: b.(Block),
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonReopen1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReopen1(stack["name"], stack["b"])
}

func (c *current) onDirectiveDecl1(name, args, locations any) (any, error) {
	var argTypes []SlotDecl
	if args != nil {
		argTypes = args.([]SlotDecl)
	}
	return &DirectiveDecl{
		Name:      name.(string),
		Args:      argTypes,
		Locations: locations.([]DirectiveLocation),
		Loc:       c.Loc(),
	}, nil
}

func (p *parser) callonDirectiveDecl1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveDecl1(stack["name"], stack["args"], stack["locations"])
}

func (c *current) onDirectiveApplication1(name, args any) (any, error) {
	var argValues []Keyed[Node]
	if args != nil {
		argValues = args.([]Keyed[Node])
	}
	return DirectiveApplication{
		Name: name.(string),
		Args: argValues,
		Loc:  c.Loc(),
	}, nil
}

func (p *parser) callonDirectiveApplication1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveApplication1(stack["name"], stack["args"])
}

func (c *current) onDirectiveLocations7(loc any) (any, error) {
	return loc, nil
}

func (p *parser) callonDirectiveLocations7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveLocations7(stack["loc"])
}

func (c *current) onDirectiveLocations1(first, rest any) (any, error) {
	return sliceOfAppend[DirectiveLocation](rest, first), nil
}

func (p *parser) callonDirectiveLocations1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveLocations1(stack["first"], stack["rest"])
}

func (c *current) onDirectiveLocation1(name any) (any, error) {
	return DirectiveLocation{Name: name.(string)}, nil
}

func (p *parser) callonDirectiveLocation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveLocation1(stack["name"])
}

func (c *current) onDirectiveName1(name any) (any, error) {
	return name.(string), nil
}

func (p *parser) callonDirectiveName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveName1(stack["name"])
}

func (c *current) onImport1(source, alias any) (any, error) {
	var aliasStr *string
	if alias != nil {
		// alias is [_, "as", _, string]
		aliasValue := alias.([]interface{})[3].(string)
		aliasStr = &aliasValue
	}
	return &ImportDecl{
		Source: source.(string),
		Alias:  aliasStr,
		Loc:    c.Loc(),
	}, nil
}

func (p *parser) callonImport1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImport1(stack["source"], stack["alias"])
}

func (c *current) onDaggerKeyword1() (any, error) {
	return "dagger", nil
}

func (p *parser) callonDaggerKeyword1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDaggerKeyword1()
}

func (c *current) onSchemaURL1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSchemaURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSchemaURL1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any

	leader        bool
	leftRecursive bool
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type ruleWithExpsStack struct {
	rule   *rule
	estack []any
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleRecursiveLeader(rule *rule) (any, bool) {
	result, ok := p.getMemoized(rule)
	if ok {
		p.restore(result.end)
		return result.v, result.b
	}

	if p.debug {
		defer p.out(p.in("recursive " + rule.name))
	}

	var (
		depth      = 0
		startMark  = p.pt
		lastResult = resultTuple{nil, false, startMark}
		lastErrors = *p.errs
	)

	for {
		lastState := p.cloneState()
		p.setMemoized(startMark, rule, lastResult)
		val, ok := p.parseRule(rule)
		endMark := p.pt
		if p.debug {
			p.printIndent("RECURSIVE", fmt.Sprintf(
				"Rule %s depth %d: %t -> %s",
				rule.name, depth, ok, string(p.sliceFrom(startMark))))
		}
		if (!ok) || (endMark.offset <= lastResult.end.offset && depth != 0) {
			p.restoreState(lastState)
			*p.errs = lastErrors
			break
		}
		lastResult = resultTuple{val, ok, endMark}
		lastErrors = *p.errs
		p.restore(startMark)
		depth++
	}

	p.restore(lastResult.end)
	p.setMemoized(startMark, rule, lastResult)
	return lastResult.v, lastResult.b
}

func (p *parser) parseRuleRecursiveNoLeader(rule *rule) (any, bool) {
	return p.parseRule(rule)
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize || rule.leftRecursive {
		if rule.leader {
			val, ok = p.parseRuleRecursiveLeader(rule)
		} else if p.memoize && !rule.leftRecursive {
			val, ok = p.parseRuleMemoize(rule)
		} else {
			val, ok = p.parseRuleRecursiveNoLeader(rule)
		}
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	isLeftRecursion := p.rstack[len(p.rstack)-1].leftRecursive
	if p.memoize && !isLeftRecursion {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize && !isLeftRecursion {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
