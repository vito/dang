// Code generated by pigeon; DO NOT EDIT.

package dang

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Dang",
			pos:  position{line: 12, col: 1, offset: 86},
			expr: &actionExpr{
				pos: position{line: 12, col: 9, offset: 94},
				run: (*parser).callonDang1,
				expr: &seqExpr{
					pos: position{line: 12, col: 9, offset: 94},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 12, col: 9, offset: 94},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 12, col: 11, offset: 96},
							label: "eles",
							expr: &zeroOrMoreExpr{
								pos: position{line: 12, col: 16, offset: 101},
								expr: &actionExpr{
									pos: position{line: 12, col: 17, offset: 102},
									run: (*parser).callonDang6,
									expr: &seqExpr{
										pos: position{line: 12, col: 17, offset: 102},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 12, col: 17, offset: 102},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 12, col: 19, offset: 104},
													name: "Expr",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 12, col: 24, offset: 109},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 12, col: 48, offset: 133},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 12, col: 53, offset: 138},
								expr: &ruleRefExpr{
									pos:  position{line: 12, col: 53, offset: 138},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 12, col: 59, offset: 144},
							name: "_",
						},
						&notExpr{
							pos: position{line: 12, col: 61, offset: 146},
							expr: &anyMatcher{
								line: 12, col: 62, offset: 147,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 19, col: 1, offset: 248},
			expr: &zeroOrMoreExpr{
				pos: position{line: 19, col: 19, offset: 266},
				expr: &choiceExpr{
					pos: position{line: 19, col: 20, offset: 267},
					alternatives: []any{
						&charClassMatcher{
							pos:        position{line: 19, col: 20, offset: 267},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
						&ruleRefExpr{
							pos:  position{line: 19, col: 32, offset: 279},
							name: "CommentToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "_lineSpace",
			pos:  position{line: 20, col: 1, offset: 294},
			expr: &seqExpr{
				pos: position{line: 20, col: 15, offset: 308},
				exprs: []any{
					&zeroOrMoreExpr{
						pos: position{line: 20, col: 15, offset: 308},
						expr: &charClassMatcher{
							pos:        position{line: 20, col: 15, offset: 308},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 20, col: 22, offset: 315},
						expr: &ruleRefExpr{
							pos:  position{line: 20, col: 22, offset: 315},
							name: "CommentToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Sep",
			pos:  position{line: 22, col: 1, offset: 330},
			expr: &seqExpr{
				pos: position{line: 22, col: 8, offset: 337},
				exprs: []any{
					&choiceExpr{
						pos: position{line: 22, col: 9, offset: 338},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 22, col: 9, offset: 338},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 22, col: 9, offset: 338},
										name: "_",
									},
									&ruleRefExpr{
										pos:  position{line: 22, col: 11, offset: 340},
										name: "CommaToken",
									},
								},
							},
							&seqExpr{
								pos: position{line: 22, col: 24, offset: 353},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 22, col: 24, offset: 353},
										name: "_lineSpace",
									},
									&litMatcher{
										pos:        position{line: 22, col: 35, offset: 364},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 41, offset: 370},
						name: "_",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CommaToken",
			pos:  position{line: 23, col: 1, offset: 372},
			expr: &litMatcher{
				pos:        position{line: 23, col: 15, offset: 386},
				val:        ",",
				ignoreCase: false,
				want:       "\",\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Expr",
			pos:  position{line: 25, col: 1, offset: 391},
			expr: &choiceExpr{
				pos: position{line: 25, col: 9, offset: 399},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 25, col: 9, offset: 399},
						name: "Import",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 18, offset: 408},
						name: "AnnotatedDecl",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 34, offset: 424},
						name: "Interface",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 46, offset: 436},
						name: "Enum",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 53, offset: 443},
						name: "Scalar",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 62, offset: 452},
						name: "Class",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 70, offset: 460},
						name: "Slot",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 77, offset: 467},
						name: "DirectiveDecl",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 93, offset: 483},
						name: "Reassignment",
					},
					&ruleRefExpr{
						pos:  position{line: 25, col: 108, offset: 498},
						name: "Form",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AnnotatedDecl",
			pos:  position{line: 27, col: 1, offset: 504},
			expr: &actionExpr{
				pos: position{line: 27, col: 18, offset: 521},
				run: (*parser).callonAnnotatedDecl1,
				expr: &seqExpr{
					pos: position{line: 27, col: 18, offset: 521},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 27, col: 18, offset: 521},
							label: "docstring",
							expr: &ruleRefExpr{
								pos:  position{line: 27, col: 28, offset: 531},
								name: "DocString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 27, col: 38, offset: 541},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 27, col: 40, offset: 543},
							label: "decl",
							expr: &choiceExpr{
								pos: position{line: 27, col: 46, offset: 549},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 27, col: 46, offset: 549},
										name: "Interface",
									},
									&ruleRefExpr{
										pos:  position{line: 27, col: 58, offset: 561},
										name: "Enum",
									},
									&ruleRefExpr{
										pos:  position{line: 27, col: 65, offset: 568},
										name: "Scalar",
									},
									&ruleRefExpr{
										pos:  position{line: 27, col: 74, offset: 577},
										name: "Class",
									},
									&ruleRefExpr{
										pos:  position{line: 27, col: 82, offset: 585},
										name: "Slot",
									},
									&ruleRefExpr{
										pos:  position{line: 27, col: 89, offset: 592},
										name: "DirectiveDecl",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Form",
			pos:  position{line: 52, col: 1, offset: 1166},
			expr: &choiceExpr{
				pos: position{line: 52, col: 9, offset: 1174},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 52, col: 9, offset: 1174},
						name: "Conditional",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 23, offset: 1188},
						name: "ForLoop",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 33, offset: 1198},
						name: "Lambda",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 42, offset: 1207},
						name: "Match",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 50, offset: 1215},
						name: "Assert",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 59, offset: 1224},
						name: "Break",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 67, offset: 1232},
						name: "Continue",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 78, offset: 1243},
						name: "DefaultExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 92, offset: 1257},
						name: "TypeHint",
					},
					&ruleRefExpr{
						pos:  position{line: 52, col: 103, offset: 1268},
						name: "Term",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Term",
			pos:  position{line: 54, col: 1, offset: 1274},
			expr: &choiceExpr{
				pos: position{line: 54, col: 9, offset: 1282},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 54, col: 9, offset: 1282},
						name: "UnaryExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 21, offset: 1294},
						name: "IndexOrCall",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 35, offset: 1308},
						name: "SelectOrCall",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 50, offset: 1323},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 60, offset: 1333},
						name: "List",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 67, offset: 1340},
						name: "Object",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 76, offset: 1349},
						name: "Block",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 84, offset: 1357},
						name: "ParenForm",
					},
					&ruleRefExpr{
						pos:  position{line: 54, col: 96, offset: 1369},
						name: "SymbolOrCall",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "UnaryExpr",
			pos:  position{line: 56, col: 1, offset: 1383},
			expr: &actionExpr{
				pos: position{line: 56, col: 14, offset: 1396},
				run: (*parser).callonUnaryExpr1,
				expr: &seqExpr{
					pos: position{line: 56, col: 14, offset: 1396},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 56, col: 14, offset: 1396},
							val:        "!",
							ignoreCase: false,
							want:       "\"!\"",
						},
						&ruleRefExpr{
							pos:  position{line: 56, col: 18, offset: 1400},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 56, col: 20, offset: 1402},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 56, col: 25, offset: 1407},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ParenForm",
			pos:  position{line: 63, col: 1, offset: 1492},
			expr: &actionExpr{
				pos: position{line: 63, col: 14, offset: 1505},
				run: (*parser).callonParenForm1,
				expr: &seqExpr{
					pos: position{line: 63, col: 14, offset: 1505},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 63, col: 14, offset: 1505},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 63, col: 18, offset: 1509},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 63, col: 20, offset: 1511},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 63, col: 25, offset: 1516},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 63, col: 30, offset: 1521},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 63, col: 32, offset: 1523},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SymbolOrCall",
			pos:  position{line: 68, col: 1, offset: 1599},
			expr: &choiceExpr{
				pos: position{line: 68, col: 17, offset: 1615},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 68, col: 17, offset: 1615},
						name: "Call",
					},
					&ruleRefExpr{
						pos:  position{line: 68, col: 24, offset: 1622},
						name: "Symbol",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Call",
			pos:  position{line: 69, col: 1, offset: 1629},
			expr: &actionExpr{
				pos: position{line: 69, col: 9, offset: 1637},
				run: (*parser).callonCall1,
				expr: &seqExpr{
					pos: position{line: 69, col: 9, offset: 1637},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 69, col: 9, offset: 1637},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 69, col: 14, offset: 1642},
								name: "Id",
							},
						},
						&labeledExpr{
							pos:   position{line: 69, col: 17, offset: 1645},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 69, col: 22, offset: 1650},
								name: "ArgValues",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Symbol",
			pos:  position{line: 81, col: 1, offset: 1891},
			expr: &actionExpr{
				pos: position{line: 81, col: 11, offset: 1901},
				run: (*parser).callonSymbol1,
				expr: &labeledExpr{
					pos:   position{line: 81, col: 11, offset: 1901},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 81, col: 16, offset: 1906},
						name: "Id",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SelectOrCall",
			pos:  position{line: 91, col: 1, offset: 2084},
			expr: &actionExpr{
				pos: position{line: 91, col: 17, offset: 2100},
				run: (*parser).callonSelectOrCall1,
				expr: &seqExpr{
					pos: position{line: 91, col: 17, offset: 2100},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 91, col: 17, offset: 2100},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 91, col: 22, offset: 2105},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 91, col: 27, offset: 2110},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 91, col: 29, offset: 2112},
							name: "DotToken",
						},
						&ruleRefExpr{
							pos:  position{line: 91, col: 38, offset: 2121},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 91, col: 40, offset: 2123},
							label: "selection",
							expr: &choiceExpr{
								pos: position{line: 91, col: 51, offset: 2134},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 91, col: 51, offset: 2134},
										name: "ObjectSelection",
									},
									&seqExpr{
										pos: position{line: 91, col: 69, offset: 2152},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 91, col: 69, offset: 2152},
												label: "name",
												expr: &ruleRefExpr{
													pos:  position{line: 91, col: 74, offset: 2157},
													name: "Id",
												},
											},
											&labeledExpr{
												pos:   position{line: 91, col: 77, offset: 2160},
												label: "args",
												expr: &zeroOrOneExpr{
													pos: position{line: 91, col: 82, offset: 2165},
													expr: &ruleRefExpr{
														pos:  position{line: 91, col: 82, offset: 2165},
														name: "ArgValues",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "IndexOrCall",
			pos:  position{line: 128, col: 1, offset: 3073},
			expr: &actionExpr{
				pos: position{line: 128, col: 16, offset: 3088},
				run: (*parser).callonIndexOrCall1,
				expr: &seqExpr{
					pos: position{line: 128, col: 16, offset: 3088},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 128, col: 16, offset: 3088},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 128, col: 21, offset: 3093},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 128, col: 26, offset: 3098},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 128, col: 28, offset: 3100},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 128, col: 32, offset: 3104},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 128, col: 34, offset: 3106},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 128, col: 40, offset: 3112},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 128, col: 45, offset: 3117},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 128, col: 47, offset: 3119},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&labeledExpr{
							pos:   position{line: 128, col: 51, offset: 3123},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 128, col: 56, offset: 3128},
								expr: &ruleRefExpr{
									pos:  position{line: 128, col: 56, offset: 3128},
									name: "ArgValues",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "ObjectSelection",
			pos:  position{line: 152, col: 1, offset: 3620},
			expr: &actionExpr{
				pos: position{line: 152, col: 20, offset: 3639},
				run: (*parser).callonObjectSelection1,
				expr: &seqExpr{
					pos: position{line: 152, col: 20, offset: 3639},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 152, col: 20, offset: 3639},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 24, offset: 3643},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 152, col: 26, offset: 3645},
							label: "fields",
							expr: &zeroOrMoreExpr{
								pos: position{line: 152, col: 33, offset: 3652},
								expr: &actionExpr{
									pos: position{line: 152, col: 34, offset: 3653},
									run: (*parser).callonObjectSelection7,
									expr: &seqExpr{
										pos: position{line: 152, col: 34, offset: 3653},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 152, col: 34, offset: 3653},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 152, col: 36, offset: 3655},
													name: "FieldSelection",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 152, col: 51, offset: 3670},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 152, col: 75, offset: 3694},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 152, col: 80, offset: 3699},
								expr: &ruleRefExpr{
									pos:  position{line: 152, col: 80, offset: 3699},
									name: "FieldSelection",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 96, offset: 3715},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 152, col: 98, offset: 3717},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FieldSelection",
			pos:  position{line: 160, col: 1, offset: 3895},
			expr: &actionExpr{
				pos: position{line: 160, col: 19, offset: 3913},
				run: (*parser).callonFieldSelection1,
				expr: &seqExpr{
					pos: position{line: 160, col: 19, offset: 3913},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 160, col: 19, offset: 3913},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 160, col: 24, offset: 3918},
								name: "Id",
							},
						},
						&labeledExpr{
							pos:   position{line: 160, col: 27, offset: 3921},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 160, col: 32, offset: 3926},
								expr: &ruleRefExpr{
									pos:  position{line: 160, col: 32, offset: 3926},
									name: "ArgValues",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 160, col: 43, offset: 3937},
							label: "selection",
							expr: &zeroOrOneExpr{
								pos: position{line: 160, col: 53, offset: 3947},
								expr: &seqExpr{
									pos: position{line: 160, col: 54, offset: 3948},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 160, col: 54, offset: 3948},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
										&labeledExpr{
											pos:   position{line: 160, col: 58, offset: 3952},
											label: "sel",
											expr: &ruleRefExpr{
												pos:  position{line: 160, col: 62, offset: 3956},
												name: "ObjectSelection",
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Interface",
			pos:  position{line: 183, col: 1, offset: 4416},
			expr: &actionExpr{
				pos: position{line: 183, col: 14, offset: 4429},
				run: (*parser).callonInterface1,
				expr: &seqExpr{
					pos: position{line: 183, col: 14, offset: 4429},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 183, col: 14, offset: 4429},
							name: "InterfaceToken",
						},
						&ruleRefExpr{
							pos:  position{line: 183, col: 29, offset: 4444},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 183, col: 31, offset: 4446},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 36, offset: 4451},
								name: "IdSymbol",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 183, col: 45, offset: 4460},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 183, col: 47, offset: 4462},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 53, offset: 4468},
								name: "HeadersBlock",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "InterfaceToken",
			pos:  position{line: 191, col: 1, offset: 4624},
			expr: &seqExpr{
				pos: position{line: 191, col: 19, offset: 4642},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 191, col: 19, offset: 4642},
						val:        "interface",
						ignoreCase: false,
						want:       "\"interface\"",
					},
					&notExpr{
						pos: position{line: 191, col: 31, offset: 4654},
						expr: &ruleRefExpr{
							pos:  position{line: 191, col: 32, offset: 4655},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Class",
			pos:  position{line: 193, col: 1, offset: 4665},
			expr: &actionExpr{
				pos: position{line: 193, col: 10, offset: 4674},
				run: (*parser).callonClass1,
				expr: &seqExpr{
					pos: position{line: 193, col: 10, offset: 4674},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 193, col: 10, offset: 4674},
							name: "TypeToken",
						},
						&ruleRefExpr{
							pos:  position{line: 193, col: 20, offset: 4684},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 193, col: 22, offset: 4686},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 193, col: 27, offset: 4691},
								name: "IdSymbol",
							},
						},
						&labeledExpr{
							pos:   position{line: 193, col: 36, offset: 4700},
							label: "implements",
							expr: &zeroOrOneExpr{
								pos: position{line: 193, col: 47, offset: 4711},
								expr: &actionExpr{
									pos: position{line: 193, col: 48, offset: 4712},
									run: (*parser).callonClass9,
									expr: &seqExpr{
										pos: position{line: 193, col: 48, offset: 4712},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 193, col: 48, offset: 4712},
												name: "_",
											},
											&ruleRefExpr{
												pos:  position{line: 193, col: 50, offset: 4714},
												name: "ImplementsToken",
											},
											&ruleRefExpr{
												pos:  position{line: 193, col: 66, offset: 4730},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 193, col: 68, offset: 4732},
												label: "first",
												expr: &ruleRefExpr{
													pos:  position{line: 193, col: 74, offset: 4738},
													name: "IdSymbol",
												},
											},
											&labeledExpr{
												pos:   position{line: 193, col: 83, offset: 4747},
												label: "rest",
												expr: &zeroOrMoreExpr{
													pos: position{line: 193, col: 88, offset: 4752},
													expr: &actionExpr{
														pos: position{line: 193, col: 89, offset: 4753},
														run: (*parser).callonClass18,
														expr: &seqExpr{
															pos: position{line: 193, col: 89, offset: 4753},
															exprs: []any{
																&ruleRefExpr{
																	pos:  position{line: 193, col: 89, offset: 4753},
																	name: "_",
																},
																&litMatcher{
																	pos:        position{line: 193, col: 91, offset: 4755},
																	val:        "&",
																	ignoreCase: false,
																	want:       "\"&\"",
																},
																&ruleRefExpr{
																	pos:  position{line: 193, col: 95, offset: 4759},
																	name: "_",
																},
																&labeledExpr{
																	pos:   position{line: 193, col: 97, offset: 4761},
																	label: "i",
																	expr: &ruleRefExpr{
																		pos:  position{line: 193, col: 99, offset: 4763},
																		name: "IdSymbol",
																	},
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 193, col: 182, offset: 4846},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 193, col: 193, offset: 4857},
								expr: &actionExpr{
									pos: position{line: 193, col: 194, offset: 4858},
									run: (*parser).callonClass27,
									expr: &seqExpr{
										pos: position{line: 193, col: 194, offset: 4858},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 193, col: 194, offset: 4858},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 193, col: 196, offset: 4860},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 193, col: 200, offset: 4864},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 193, col: 243, offset: 4907},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 193, col: 245, offset: 4909},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 193, col: 251, offset: 4915},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeToken",
			pos:  position{line: 207, col: 1, offset: 5264},
			expr: &seqExpr{
				pos: position{line: 207, col: 14, offset: 5277},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 207, col: 14, offset: 5277},
						val:        "type",
						ignoreCase: false,
						want:       "\"type\"",
					},
					&notExpr{
						pos: position{line: 207, col: 21, offset: 5284},
						expr: &ruleRefExpr{
							pos:  position{line: 207, col: 22, offset: 5285},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ImplementsToken",
			pos:  position{line: 208, col: 1, offset: 5294},
			expr: &seqExpr{
				pos: position{line: 208, col: 20, offset: 5313},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 208, col: 20, offset: 5313},
						val:        "implements",
						ignoreCase: false,
						want:       "\"implements\"",
					},
					&notExpr{
						pos: position{line: 208, col: 33, offset: 5326},
						expr: &ruleRefExpr{
							pos:  position{line: 208, col: 34, offset: 5327},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Enum",
			pos:  position{line: 210, col: 1, offset: 5337},
			expr: &actionExpr{
				pos: position{line: 210, col: 9, offset: 5345},
				run: (*parser).callonEnum1,
				expr: &seqExpr{
					pos: position{line: 210, col: 9, offset: 5345},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 210, col: 9, offset: 5345},
							name: "EnumToken",
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 19, offset: 5355},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 21, offset: 5357},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 210, col: 26, offset: 5362},
								name: "IdSymbol",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 35, offset: 5371},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 210, col: 37, offset: 5373},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 41, offset: 5377},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 210, col: 43, offset: 5379},
							label: "values",
							expr: &actionExpr{
								pos: position{line: 210, col: 51, offset: 5387},
								run: (*parser).callonEnum11,
								expr: &seqExpr{
									pos: position{line: 210, col: 51, offset: 5387},
									exprs: []any{
										&labeledExpr{
											pos:   position{line: 210, col: 51, offset: 5387},
											label: "first",
											expr: &ruleRefExpr{
												pos:  position{line: 210, col: 57, offset: 5393},
												name: "CapsSymbol",
											},
										},
										&labeledExpr{
											pos:   position{line: 210, col: 68, offset: 5404},
											label: "rest",
											expr: &zeroOrMoreExpr{
												pos: position{line: 210, col: 73, offset: 5409},
												expr: &actionExpr{
													pos: position{line: 210, col: 74, offset: 5410},
													run: (*parser).callonEnum17,
													expr: &seqExpr{
														pos: position{line: 210, col: 74, offset: 5410},
														exprs: []any{
															&ruleRefExpr{
																pos:  position{line: 210, col: 74, offset: 5410},
																name: "_",
															},
															&labeledExpr{
																pos:   position{line: 210, col: 76, offset: 5412},
																label: "v",
																expr: &ruleRefExpr{
																	pos:  position{line: 210, col: 78, offset: 5414},
																	name: "CapsSymbol",
																},
															},
														},
													},
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 210, col: 162, offset: 5498},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 210, col: 164, offset: 5500},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EnumToken",
			pos:  position{line: 218, col: 1, offset: 5647},
			expr: &seqExpr{
				pos: position{line: 218, col: 14, offset: 5660},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 218, col: 14, offset: 5660},
						val:        "enum",
						ignoreCase: false,
						want:       "\"enum\"",
					},
					&notExpr{
						pos: position{line: 218, col: 21, offset: 5667},
						expr: &ruleRefExpr{
							pos:  position{line: 218, col: 22, offset: 5668},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Scalar",
			pos:  position{line: 220, col: 1, offset: 5678},
			expr: &actionExpr{
				pos: position{line: 220, col: 11, offset: 5688},
				run: (*parser).callonScalar1,
				expr: &seqExpr{
					pos: position{line: 220, col: 11, offset: 5688},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 220, col: 11, offset: 5688},
							name: "ScalarToken",
						},
						&ruleRefExpr{
							pos:  position{line: 220, col: 23, offset: 5700},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 220, col: 25, offset: 5702},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 220, col: 30, offset: 5707},
								name: "IdSymbol",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ScalarToken",
			pos:  position{line: 227, col: 1, offset: 5829},
			expr: &seqExpr{
				pos: position{line: 227, col: 16, offset: 5844},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 227, col: 16, offset: 5844},
						val:        "scalar",
						ignoreCase: false,
						want:       "\"scalar\"",
					},
					&notExpr{
						pos: position{line: 227, col: 25, offset: 5853},
						expr: &ruleRefExpr{
							pos:  position{line: 227, col: 26, offset: 5854},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Slot",
			pos:  position{line: 229, col: 1, offset: 5864},
			expr: &choiceExpr{
				pos: position{line: 229, col: 9, offset: 5872},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 229, col: 9, offset: 5872},
						name: "TypeAndArgsAndBlockSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 230, col: 9, offset: 5941},
						name: "TypeAndBlockSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 231, col: 9, offset: 6075},
						name: "TypeAndValueSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 232, col: 9, offset: 6214},
						name: "ValueOnlySlot",
					},
					&ruleRefExpr{
						pos:  position{line: 233, col: 9, offset: 6308},
						name: "TypeOnlySlot",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeAndValueSlot",
			pos:  position{line: 235, col: 1, offset: 6396},
			expr: &actionExpr{
				pos: position{line: 235, col: 21, offset: 6416},
				run: (*parser).callonTypeAndValueSlot1,
				expr: &seqExpr{
					pos: position{line: 235, col: 21, offset: 6416},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 235, col: 21, offset: 6416},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 25, offset: 6420},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 36, offset: 6431},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 38, offset: 6433},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 43, offset: 6438},
								name: "IdSymbol",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 52, offset: 6447},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 54, offset: 6449},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 65, offset: 6460},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 67, offset: 6462},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 73, offset: 6468},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 78, offset: 6473},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 80, offset: 6475},
							name: "EqualToken",
						},
						&ruleRefExpr{
							pos:  position{line: 235, col: 91, offset: 6486},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 235, col: 93, offset: 6488},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 235, col: 99, offset: 6494},
								name: "Form",
							},
						},
						&labeledExpr{
							pos:   position{line: 235, col: 104, offset: 6499},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 235, col: 115, offset: 6510},
								expr: &actionExpr{
									pos: position{line: 235, col: 116, offset: 6511},
									run: (*parser).callonTypeAndValueSlot20,
									expr: &seqExpr{
										pos: position{line: 235, col: 116, offset: 6511},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 235, col: 116, offset: 6511},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 235, col: 118, offset: 6513},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 235, col: 122, offset: 6517},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ValueOnlySlot",
			pos:  position{line: 246, col: 1, offset: 6786},
			expr: &actionExpr{
				pos: position{line: 246, col: 18, offset: 6803},
				run: (*parser).callonValueOnlySlot1,
				expr: &seqExpr{
					pos: position{line: 246, col: 18, offset: 6803},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 246, col: 18, offset: 6803},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 22, offset: 6807},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 246, col: 33, offset: 6818},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 246, col: 35, offset: 6820},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 40, offset: 6825},
								name: "IdSymbol",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 246, col: 49, offset: 6834},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 246, col: 51, offset: 6836},
							name: "EqualToken",
						},
						&ruleRefExpr{
							pos:  position{line: 246, col: 62, offset: 6847},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 246, col: 64, offset: 6849},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 68, offset: 6853},
								name: "Form",
							},
						},
						&labeledExpr{
							pos:   position{line: 246, col: 73, offset: 6858},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 246, col: 84, offset: 6869},
								expr: &actionExpr{
									pos: position{line: 246, col: 85, offset: 6870},
									run: (*parser).callonValueOnlySlot15,
									expr: &seqExpr{
										pos: position{line: 246, col: 85, offset: 6870},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 246, col: 85, offset: 6870},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 246, col: 87, offset: 6872},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 246, col: 91, offset: 6876},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeOnlySlot",
			pos:  position{line: 256, col: 1, offset: 7114},
			expr: &actionExpr{
				pos: position{line: 256, col: 17, offset: 7130},
				run: (*parser).callonTypeOnlySlot1,
				expr: &seqExpr{
					pos: position{line: 256, col: 17, offset: 7130},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 256, col: 17, offset: 7130},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 256, col: 21, offset: 7134},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 256, col: 32, offset: 7145},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 256, col: 34, offset: 7147},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 256, col: 39, offset: 7152},
								name: "IdSymbol",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 256, col: 48, offset: 7161},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 256, col: 50, offset: 7163},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 256, col: 61, offset: 7174},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 256, col: 63, offset: 7176},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 256, col: 69, offset: 7182},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 256, col: 74, offset: 7187},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 256, col: 85, offset: 7198},
								expr: &actionExpr{
									pos: position{line: 256, col: 86, offset: 7199},
									run: (*parser).callonTypeOnlySlot15,
									expr: &seqExpr{
										pos: position{line: 256, col: 86, offset: 7199},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 256, col: 86, offset: 7199},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 256, col: 88, offset: 7201},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 256, col: 92, offset: 7205},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeAndBlockSlot",
			pos:  position{line: 266, col: 1, offset: 7449},
			expr: &actionExpr{
				pos: position{line: 266, col: 21, offset: 7469},
				run: (*parser).callonTypeAndBlockSlot1,
				expr: &seqExpr{
					pos: position{line: 266, col: 21, offset: 7469},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 266, col: 21, offset: 7469},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 25, offset: 7473},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 266, col: 36, offset: 7484},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 266, col: 38, offset: 7486},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 43, offset: 7491},
								name: "IdSymbol",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 266, col: 52, offset: 7500},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 266, col: 54, offset: 7502},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 266, col: 65, offset: 7513},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 266, col: 67, offset: 7515},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 73, offset: 7521},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 266, col: 78, offset: 7526},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 266, col: 80, offset: 7528},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 86, offset: 7534},
								name: "Block",
							},
						},
						&labeledExpr{
							pos:   position{line: 266, col: 92, offset: 7540},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 266, col: 103, offset: 7551},
								expr: &actionExpr{
									pos: position{line: 266, col: 104, offset: 7552},
									run: (*parser).callonTypeAndBlockSlot18,
									expr: &seqExpr{
										pos: position{line: 266, col: 104, offset: 7552},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 266, col: 104, offset: 7552},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 266, col: 106, offset: 7554},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 266, col: 110, offset: 7558},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeAndArgsAndBlockSlot",
			pos:  position{line: 286, col: 1, offset: 8061},
			expr: &actionExpr{
				pos: position{line: 286, col: 28, offset: 8088},
				run: (*parser).callonTypeAndArgsAndBlockSlot1,
				expr: &seqExpr{
					pos: position{line: 286, col: 28, offset: 8088},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 286, col: 28, offset: 8088},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 32, offset: 8092},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 286, col: 43, offset: 8103},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 286, col: 45, offset: 8105},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 50, offset: 8110},
								name: "IdSymbol",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 286, col: 59, offset: 8119},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 286, col: 61, offset: 8121},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 66, offset: 8126},
								name: "ArgTypes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 286, col: 75, offset: 8135},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 286, col: 77, offset: 8137},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 286, col: 88, offset: 8148},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 286, col: 90, offset: 8150},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 96, offset: 8156},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 286, col: 101, offset: 8161},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 286, col: 103, offset: 8163},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 286, col: 109, offset: 8169},
								name: "Block",
							},
						},
						&labeledExpr{
							pos:   position{line: 286, col: 115, offset: 8175},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 286, col: 126, offset: 8186},
								expr: &actionExpr{
									pos: position{line: 286, col: 127, offset: 8187},
									run: (*parser).callonTypeAndArgsAndBlockSlot21,
									expr: &seqExpr{
										pos: position{line: 286, col: 127, offset: 8187},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 286, col: 127, offset: 8187},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 286, col: 129, offset: 8189},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 286, col: 133, offset: 8193},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "HeaderSlot",
			pos:  position{line: 306, col: 1, offset: 8726},
			expr: &choiceExpr{
				pos: position{line: 306, col: 15, offset: 8740},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 306, col: 15, offset: 8740},
						name: "AnnotatedHeaderSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 306, col: 37, offset: 8762},
						name: "TypeAndArgsSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 306, col: 55, offset: 8780},
						name: "TypeOnlyFunSlot",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AnnotatedHeaderSlot",
			pos:  position{line: 308, col: 1, offset: 8797},
			expr: &actionExpr{
				pos: position{line: 308, col: 24, offset: 8820},
				run: (*parser).callonAnnotatedHeaderSlot1,
				expr: &seqExpr{
					pos: position{line: 308, col: 24, offset: 8820},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 308, col: 24, offset: 8820},
							label: "docstring",
							expr: &ruleRefExpr{
								pos:  position{line: 308, col: 34, offset: 8830},
								name: "DocString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 308, col: 44, offset: 8840},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 308, col: 46, offset: 8842},
							label: "decl",
							expr: &ruleRefExpr{
								pos:  position{line: 308, col: 51, offset: 8847},
								name: "HeaderSlot",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeAndArgsSlot",
			pos:  position{line: 313, col: 1, offset: 8932},
			expr: &actionExpr{
				pos: position{line: 313, col: 20, offset: 8951},
				run: (*parser).callonTypeAndArgsSlot1,
				expr: &seqExpr{
					pos: position{line: 313, col: 20, offset: 8951},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 313, col: 20, offset: 8951},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 313, col: 24, offset: 8955},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 313, col: 35, offset: 8966},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 313, col: 37, offset: 8968},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 313, col: 42, offset: 8973},
								name: "IdSymbol",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 313, col: 51, offset: 8982},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 313, col: 53, offset: 8984},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 313, col: 58, offset: 8989},
								name: "ArgTypes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 313, col: 67, offset: 8998},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 313, col: 69, offset: 9000},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 313, col: 80, offset: 9011},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 313, col: 82, offset: 9013},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 313, col: 88, offset: 9019},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 313, col: 93, offset: 9024},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 313, col: 104, offset: 9035},
								expr: &actionExpr{
									pos: position{line: 313, col: 105, offset: 9036},
									run: (*parser).callonTypeAndArgsSlot18,
									expr: &seqExpr{
										pos: position{line: 313, col: 105, offset: 9036},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 313, col: 105, offset: 9036},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 313, col: 107, offset: 9038},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 313, col: 111, offset: 9042},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeOnlyFunSlot",
			pos:  position{line: 323, col: 1, offset: 9319},
			expr: &actionExpr{
				pos: position{line: 323, col: 20, offset: 9338},
				run: (*parser).callonTypeOnlyFunSlot1,
				expr: &seqExpr{
					pos: position{line: 323, col: 20, offset: 9338},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 323, col: 20, offset: 9338},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 24, offset: 9342},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 323, col: 35, offset: 9353},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 323, col: 37, offset: 9355},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 42, offset: 9360},
								name: "IdSymbol",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 323, col: 51, offset: 9369},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 323, col: 53, offset: 9371},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 323, col: 64, offset: 9382},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 323, col: 66, offset: 9384},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 72, offset: 9390},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 323, col: 77, offset: 9395},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 323, col: 88, offset: 9406},
								expr: &actionExpr{
									pos: position{line: 323, col: 89, offset: 9407},
									run: (*parser).callonTypeOnlyFunSlot15,
									expr: &seqExpr{
										pos: position{line: 323, col: 89, offset: 9407},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 323, col: 89, offset: 9407},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 323, col: 91, offset: 9409},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 323, col: 95, offset: 9413},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Visibility",
			pos:  position{line: 333, col: 1, offset: 9675},
			expr: &choiceExpr{
				pos: position{line: 333, col: 15, offset: 9689},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 333, col: 15, offset: 9689},
						run: (*parser).callonVisibility2,
						expr: &ruleRefExpr{
							pos:  position{line: 333, col: 15, offset: 9689},
							name: "PubToken",
						},
					},
					&actionExpr{
						pos: position{line: 334, col: 15, offset: 9745},
						run: (*parser).callonVisibility4,
						expr: &ruleRefExpr{
							pos:  position{line: 334, col: 15, offset: 9745},
							name: "LetToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PubToken",
			pos:  position{line: 335, col: 1, offset: 9788},
			expr: &seqExpr{
				pos: position{line: 335, col: 13, offset: 9800},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 335, col: 13, offset: 9800},
						val:        "pub",
						ignoreCase: false,
						want:       "\"pub\"",
					},
					&notExpr{
						pos: position{line: 335, col: 19, offset: 9806},
						expr: &ruleRefExpr{
							pos:  position{line: 335, col: 20, offset: 9807},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LetToken",
			pos:  position{line: 336, col: 1, offset: 9816},
			expr: &seqExpr{
				pos: position{line: 336, col: 13, offset: 9828},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 336, col: 13, offset: 9828},
						val:        "let",
						ignoreCase: false,
						want:       "\"let\"",
					},
					&notExpr{
						pos: position{line: 336, col: 19, offset: 9834},
						expr: &ruleRefExpr{
							pos:  position{line: 336, col: 20, offset: 9835},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Id",
			pos:  position{line: 338, col: 1, offset: 9845},
			expr: &ruleRefExpr{
				pos:  position{line: 338, col: 7, offset: 9851},
				name: "WordToken",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IdSymbol",
			pos:  position{line: 339, col: 1, offset: 9861},
			expr: &actionExpr{
				pos: position{line: 339, col: 13, offset: 9873},
				run: (*parser).callonIdSymbol1,
				expr: &labeledExpr{
					pos:   position{line: 339, col: 13, offset: 9873},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 339, col: 18, offset: 9878},
						name: "WordToken",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WordToken",
			pos:  position{line: 345, col: 1, offset: 9962},
			expr: &actionExpr{
				pos: position{line: 345, col: 14, offset: 9975},
				run: (*parser).callonWordToken1,
				expr: &seqExpr{
					pos: position{line: 345, col: 14, offset: 9975},
					exprs: []any{
						&notExpr{
							pos: position{line: 345, col: 14, offset: 9975},
							expr: &ruleRefExpr{
								pos:  position{line: 345, col: 15, offset: 9976},
								name: "NullToken",
							},
						},
						&charClassMatcher{
							pos:        position{line: 345, col: 25, offset: 9986},
							val:        "[a-zA-Z_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 345, col: 34, offset: 9995},
							expr: &charClassMatcher{
								pos:        position{line: 345, col: 34, offset: 9995},
								val:        "[a-zA-Z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WordChar",
			pos:  position{line: 348, col: 1, offset: 10042},
			expr: &charClassMatcher{
				pos:        position{line: 348, col: 13, offset: 10054},
				val:        "[a-zA-Z0-9_]",
				chars:      []rune{'_'},
				ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UpperId",
			pos:  position{line: 349, col: 1, offset: 10067},
			expr: &ruleRefExpr{
				pos:  position{line: 349, col: 12, offset: 10078},
				name: "UpperToken",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UpperToken",
			pos:  position{line: 350, col: 1, offset: 10089},
			expr: &actionExpr{
				pos: position{line: 350, col: 15, offset: 10103},
				run: (*parser).callonUpperToken1,
				expr: &seqExpr{
					pos: position{line: 350, col: 15, offset: 10103},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 350, col: 15, offset: 10103},
							val:        "[A-Z]",
							ranges:     []rune{'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 350, col: 20, offset: 10108},
							expr: &charClassMatcher{
								pos:        position{line: 350, col: 20, offset: 10108},
								val:        "[a-zA-Z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CapsSymbol",
			pos:  position{line: 353, col: 1, offset: 10155},
			expr: &actionExpr{
				pos: position{line: 353, col: 15, offset: 10169},
				run: (*parser).callonCapsSymbol1,
				expr: &labeledExpr{
					pos:   position{line: 353, col: 15, offset: 10169},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 353, col: 20, offset: 10174},
						name: "CapsToken",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CapsToken",
			pos:  position{line: 359, col: 1, offset: 10258},
			expr: &actionExpr{
				pos: position{line: 359, col: 14, offset: 10271},
				run: (*parser).callonCapsToken1,
				expr: &seqExpr{
					pos: position{line: 359, col: 14, offset: 10271},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 359, col: 14, offset: 10271},
							val:        "[A-Z]",
							ranges:     []rune{'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 359, col: 19, offset: 10276},
							expr: &charClassMatcher{
								pos:        position{line: 359, col: 19, offset: 10276},
								val:        "[A-Z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgValues",
			pos:  position{line: 363, col: 1, offset: 10321},
			expr: &actionExpr{
				pos: position{line: 363, col: 14, offset: 10334},
				run: (*parser).callonArgValues1,
				expr: &seqExpr{
					pos: position{line: 363, col: 14, offset: 10334},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 363, col: 14, offset: 10334},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 363, col: 18, offset: 10338},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 363, col: 20, offset: 10340},
							label: "args",
							expr: &zeroOrMoreExpr{
								pos: position{line: 363, col: 25, offset: 10345},
								expr: &actionExpr{
									pos: position{line: 363, col: 26, offset: 10346},
									run: (*parser).callonArgValues7,
									expr: &seqExpr{
										pos: position{line: 363, col: 26, offset: 10346},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 363, col: 26, offset: 10346},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 363, col: 28, offset: 10348},
													name: "Argument",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 363, col: 37, offset: 10357},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 363, col: 61, offset: 10381},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 363, col: 66, offset: 10386},
								expr: &ruleRefExpr{
									pos:  position{line: 363, col: 66, offset: 10386},
									name: "Argument",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 363, col: 76, offset: 10396},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 363, col: 78, offset: 10398},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgTypes",
			pos:  position{line: 366, col: 1, offset: 10459},
			expr: &actionExpr{
				pos: position{line: 366, col: 13, offset: 10471},
				run: (*parser).callonArgTypes1,
				expr: &seqExpr{
					pos: position{line: 366, col: 13, offset: 10471},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 366, col: 13, offset: 10471},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 366, col: 17, offset: 10475},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 366, col: 19, offset: 10477},
							label: "args",
							expr: &zeroOrMoreExpr{
								pos: position{line: 366, col: 24, offset: 10482},
								expr: &actionExpr{
									pos: position{line: 366, col: 25, offset: 10483},
									run: (*parser).callonArgTypes7,
									expr: &seqExpr{
										pos: position{line: 366, col: 25, offset: 10483},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 366, col: 25, offset: 10483},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 366, col: 27, offset: 10485},
													name: "ArgType",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 366, col: 35, offset: 10493},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 366, col: 59, offset: 10517},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 366, col: 64, offset: 10522},
								expr: &ruleRefExpr{
									pos:  position{line: 366, col: 64, offset: 10522},
									name: "ArgType",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 366, col: 73, offset: 10531},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 366, col: 75, offset: 10533},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgType",
			pos:  position{line: 369, col: 1, offset: 10592},
			expr: &choiceExpr{
				pos: position{line: 369, col: 12, offset: 10603},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 369, col: 12, offset: 10603},
						run: (*parser).callonArgType2,
						expr: &seqExpr{
							pos: position{line: 369, col: 12, offset: 10603},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 369, col: 12, offset: 10603},
									label: "docstring",
									expr: &ruleRefExpr{
										pos:  position{line: 369, col: 22, offset: 10613},
										name: "DocString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 369, col: 32, offset: 10623},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 369, col: 34, offset: 10625},
									label: "slot",
									expr: &choiceExpr{
										pos: position{line: 369, col: 40, offset: 10631},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 369, col: 40, offset: 10631},
												name: "ArgWithDefault",
											},
											&ruleRefExpr{
												pos:  position{line: 369, col: 57, offset: 10648},
												name: "ArgWithBlockDefault",
											},
											&ruleRefExpr{
												pos:  position{line: 369, col: 79, offset: 10670},
												name: "ArgWithType",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 379, col: 5, offset: 10923},
						run: (*parser).callonArgType12,
						expr: &labeledExpr{
							pos:   position{line: 379, col: 5, offset: 10923},
							label: "slot",
							expr: &choiceExpr{
								pos: position{line: 379, col: 11, offset: 10929},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 379, col: 11, offset: 10929},
										name: "ArgWithDefault",
									},
									&ruleRefExpr{
										pos:  position{line: 379, col: 28, offset: 10946},
										name: "ArgWithBlockDefault",
									},
									&ruleRefExpr{
										pos:  position{line: 379, col: 50, offset: 10968},
										name: "ArgWithType",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithDefault",
			pos:  position{line: 382, col: 1, offset: 11016},
			expr: &actionExpr{
				pos: position{line: 382, col: 19, offset: 11034},
				run: (*parser).callonArgWithDefault1,
				expr: &seqExpr{
					pos: position{line: 382, col: 19, offset: 11034},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 382, col: 19, offset: 11034},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 382, col: 24, offset: 11039},
								name: "IdSymbol",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 33, offset: 11048},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 35, offset: 11050},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 46, offset: 11061},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 382, col: 48, offset: 11063},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 382, col: 54, offset: 11069},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 59, offset: 11074},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 382, col: 61, offset: 11076},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 382, col: 72, offset: 11087},
								expr: &ruleRefExpr{
									pos:  position{line: 382, col: 72, offset: 11087},
									name: "DirectiveApplication",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 94, offset: 11109},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 96, offset: 11111},
							name: "EqualToken",
						},
						&ruleRefExpr{
							pos:  position{line: 382, col: 107, offset: 11122},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 382, col: 109, offset: 11124},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 382, col: 115, offset: 11130},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithBlockDefault",
			pos:  position{line: 391, col: 1, offset: 11326},
			expr: &actionExpr{
				pos: position{line: 391, col: 24, offset: 11349},
				run: (*parser).callonArgWithBlockDefault1,
				expr: &seqExpr{
					pos: position{line: 391, col: 24, offset: 11349},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 391, col: 24, offset: 11349},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 29, offset: 11354},
								name: "IdSymbol",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 391, col: 38, offset: 11363},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 391, col: 40, offset: 11365},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 391, col: 51, offset: 11376},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 391, col: 53, offset: 11378},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 59, offset: 11384},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 391, col: 64, offset: 11389},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 391, col: 66, offset: 11391},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 391, col: 77, offset: 11402},
								expr: &ruleRefExpr{
									pos:  position{line: 391, col: 77, offset: 11402},
									name: "DirectiveApplication",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 391, col: 99, offset: 11424},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 391, col: 101, offset: 11426},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 391, col: 107, offset: 11432},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithType",
			pos:  position{line: 400, col: 1, offset: 11631},
			expr: &actionExpr{
				pos: position{line: 400, col: 16, offset: 11646},
				run: (*parser).callonArgWithType1,
				expr: &seqExpr{
					pos: position{line: 400, col: 16, offset: 11646},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 400, col: 16, offset: 11646},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 21, offset: 11651},
								name: "IdSymbol",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 400, col: 30, offset: 11660},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 400, col: 32, offset: 11662},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 400, col: 43, offset: 11673},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 400, col: 45, offset: 11675},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 400, col: 51, offset: 11681},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 400, col: 56, offset: 11686},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 400, col: 58, offset: 11688},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 400, col: 69, offset: 11699},
								expr: &ruleRefExpr{
									pos:  position{line: 400, col: 69, offset: 11699},
									name: "DirectiveApplication",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Argument",
			pos:  position{line: 409, col: 1, offset: 11888},
			expr: &choiceExpr{
				pos: position{line: 409, col: 13, offset: 11900},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 409, col: 13, offset: 11900},
						name: "KeyValue",
					},
					&ruleRefExpr{
						pos:  position{line: 409, col: 24, offset: 11911},
						name: "PositionalValue",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "KeyValue",
			pos:  position{line: 411, col: 1, offset: 11928},
			expr: &actionExpr{
				pos: position{line: 411, col: 13, offset: 11940},
				run: (*parser).callonKeyValue1,
				expr: &seqExpr{
					pos: position{line: 411, col: 13, offset: 11940},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 411, col: 13, offset: 11940},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 17, offset: 11944},
								name: "WordToken",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 411, col: 27, offset: 11954},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 411, col: 38, offset: 11965},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 411, col: 40, offset: 11967},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 46, offset: 11973},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PositionalValue",
			pos:  position{line: 415, col: 1, offset: 12068},
			expr: &actionExpr{
				pos: position{line: 415, col: 20, offset: 12087},
				run: (*parser).callonPositionalValue1,
				expr: &labeledExpr{
					pos:   position{line: 415, col: 20, offset: 12087},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 415, col: 26, offset: 12093},
						name: "Form",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ColonToken",
			pos:  position{line: 418, col: 1, offset: 12176},
			expr: &litMatcher{
				pos:        position{line: 418, col: 15, offset: 12190},
				val:        ":",
				ignoreCase: false,
				want:       "\":\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Type",
			pos:  position{line: 420, col: 1, offset: 12195},
			expr: &choiceExpr{
				pos: position{line: 420, col: 9, offset: 12203},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 420, col: 9, offset: 12203},
						name: "NonNull",
					},
					&ruleRefExpr{
						pos:  position{line: 420, col: 19, offset: 12213},
						name: "NamedType",
					},
					&ruleRefExpr{
						pos:  position{line: 420, col: 31, offset: 12225},
						name: "ListType",
					},
					&ruleRefExpr{
						pos:  position{line: 420, col: 42, offset: 12236},
						name: "ObjectType",
					},
					&ruleRefExpr{
						pos:  position{line: 420, col: 55, offset: 12249},
						name: "TypeVariable",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "NamedType",
			pos:  position{line: 421, col: 1, offset: 12262},
			expr: &actionExpr{
				pos: position{line: 421, col: 14, offset: 12275},
				run: (*parser).callonNamedType1,
				expr: &labeledExpr{
					pos:   position{line: 421, col: 14, offset: 12275},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 421, col: 19, offset: 12280},
						name: "UpperId",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ListType",
			pos:  position{line: 424, col: 1, offset: 12345},
			expr: &actionExpr{
				pos: position{line: 424, col: 13, offset: 12357},
				run: (*parser).callonListType1,
				expr: &seqExpr{
					pos: position{line: 424, col: 13, offset: 12357},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 424, col: 13, offset: 12357},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 424, col: 17, offset: 12361},
							label: "inner",
							expr: &ruleRefExpr{
								pos:  position{line: 424, col: 23, offset: 12367},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 424, col: 28, offset: 12372},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ObjectType",
			pos:  position{line: 427, col: 1, offset: 12425},
			expr: &actionExpr{
				pos: position{line: 427, col: 15, offset: 12439},
				run: (*parser).callonObjectType1,
				expr: &seqExpr{
					pos: position{line: 427, col: 15, offset: 12439},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 427, col: 15, offset: 12439},
							val:        "{{",
							ignoreCase: false,
							want:       "\"{{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 427, col: 20, offset: 12444},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 427, col: 22, offset: 12446},
							label: "fields",
							expr: &zeroOrMoreExpr{
								pos: position{line: 427, col: 29, offset: 12453},
								expr: &actionExpr{
									pos: position{line: 427, col: 30, offset: 12454},
									run: (*parser).callonObjectType7,
									expr: &seqExpr{
										pos: position{line: 427, col: 30, offset: 12454},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 427, col: 30, offset: 12454},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 427, col: 32, offset: 12456},
													name: "ObjectTypeField",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 427, col: 48, offset: 12472},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 427, col: 72, offset: 12496},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 427, col: 77, offset: 12501},
								expr: &ruleRefExpr{
									pos:  position{line: 427, col: 77, offset: 12501},
									name: "ObjectTypeField",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 427, col: 94, offset: 12518},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 427, col: 96, offset: 12520},
							val:        "}}",
							ignoreCase: false,
							want:       "\"}}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ObjectTypeField",
			pos:  position{line: 432, col: 1, offset: 12621},
			expr: &actionExpr{
				pos: position{line: 432, col: 20, offset: 12640},
				run: (*parser).callonObjectTypeField1,
				expr: &seqExpr{
					pos: position{line: 432, col: 20, offset: 12640},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 432, col: 20, offset: 12640},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 432, col: 24, offset: 12644},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 432, col: 27, offset: 12647},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 432, col: 29, offset: 12649},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 432, col: 40, offset: 12660},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 432, col: 42, offset: 12662},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 432, col: 48, offset: 12668},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NonNull",
			pos:  position{line: 438, col: 1, offset: 12763},
			expr: &actionExpr{
				pos: position{line: 438, col: 12, offset: 12774},
				run: (*parser).callonNonNull1,
				expr: &seqExpr{
					pos: position{line: 438, col: 12, offset: 12774},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 438, col: 12, offset: 12774},
							label: "inner",
							expr: &ruleRefExpr{
								pos:  position{line: 438, col: 18, offset: 12780},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 438, col: 23, offset: 12785},
							name: "BangToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "TypeVariable",
			pos:  position{line: 441, col: 1, offset: 12847},
			expr: &actionExpr{
				pos: position{line: 441, col: 17, offset: 12863},
				run: (*parser).callonTypeVariable1,
				expr: &labeledExpr{
					pos:   position{line: 441, col: 17, offset: 12863},
					label: "v",
					expr: &charClassMatcher{
						pos:        position{line: 441, col: 19, offset: 12865},
						val:        "[a-z]",
						ranges:     []rune{'a', 'z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "BangToken",
			pos:  position{line: 445, col: 1, offset: 12922},
			expr: &litMatcher{
				pos:        position{line: 445, col: 14, offset: 12935},
				val:        "!",
				ignoreCase: false,
				want:       "\"!\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DefaultExpr",
			pos:  position{line: 448, col: 1, offset: 12984},
			expr: &choiceExpr{
				pos: position{line: 448, col: 16, offset: 12999},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 448, col: 16, offset: 12999},
						run: (*parser).callonDefaultExpr2,
						expr: &seqExpr{
							pos: position{line: 448, col: 16, offset: 12999},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 448, col: 16, offset: 12999},
									label: "left",
									expr: &choiceExpr{
										pos: position{line: 448, col: 22, offset: 13005},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 448, col: 22, offset: 13005},
												name: "EqualityExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 448, col: 37, offset: 13020},
												name: "Term",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 448, col: 43, offset: 13026},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 448, col: 45, offset: 13028},
									name: "DoubleInterroToken",
								},
								&ruleRefExpr{
									pos:  position{line: 448, col: 64, offset: 13047},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 448, col: 66, offset: 13049},
									label: "right",
									expr: &choiceExpr{
										pos: position{line: 448, col: 73, offset: 13056},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 448, col: 73, offset: 13056},
												name: "DefaultExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 448, col: 87, offset: 13070},
												name: "Term",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 454, col: 5, offset: 13176},
						name: "EqualityExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EqualityExpr",
			pos:  position{line: 456, col: 1, offset: 13190},
			expr: &choiceExpr{
				pos: position{line: 456, col: 17, offset: 13206},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 456, col: 17, offset: 13206},
						run: (*parser).callonEqualityExpr2,
						expr: &seqExpr{
							pos: position{line: 456, col: 17, offset: 13206},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 456, col: 17, offset: 13206},
									label: "left",
									expr: &choiceExpr{
										pos: position{line: 456, col: 23, offset: 13212},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 456, col: 23, offset: 13212},
												name: "EqualityExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 456, col: 38, offset: 13227},
												name: "Term",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 456, col: 44, offset: 13233},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 456, col: 46, offset: 13235},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 456, col: 49, offset: 13238},
										name: "EqualityOp",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 456, col: 60, offset: 13249},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 456, col: 62, offset: 13251},
									label: "right",
									expr: &choiceExpr{
										pos: position{line: 456, col: 69, offset: 13258},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 456, col: 69, offset: 13258},
												name: "RelationalExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 456, col: 86, offset: 13275},
												name: "Term",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 469, col: 5, offset: 13595},
						name: "RelationalExpr",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "EqualityOp",
			pos:  position{line: 471, col: 1, offset: 13611},
			expr: &choiceExpr{
				pos: position{line: 471, col: 15, offset: 13625},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 471, col: 15, offset: 13625},
						run: (*parser).callonEqualityOp2,
						expr: &litMatcher{
							pos:        position{line: 471, col: 15, offset: 13625},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
					},
					&actionExpr{
						pos: position{line: 471, col: 43, offset: 13653},
						run: (*parser).callonEqualityOp4,
						expr: &litMatcher{
							pos:        position{line: 471, col: 43, offset: 13653},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "RelationalExpr",
			pos:  position{line: 473, col: 1, offset: 13680},
			expr: &choiceExpr{
				pos: position{line: 473, col: 19, offset: 13698},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 473, col: 19, offset: 13698},
						run: (*parser).callonRelationalExpr2,
						expr: &seqExpr{
							pos: position{line: 473, col: 19, offset: 13698},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 473, col: 19, offset: 13698},
									label: "left",
									expr: &choiceExpr{
										pos: position{line: 473, col: 25, offset: 13704},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 473, col: 25, offset: 13704},
												name: "RelationalExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 473, col: 42, offset: 13721},
												name: "Term",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 473, col: 48, offset: 13727},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 473, col: 50, offset: 13729},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 473, col: 53, offset: 13732},
										name: "RelationalOp",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 473, col: 66, offset: 13745},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 473, col: 68, offset: 13747},
									label: "right",
									expr: &choiceExpr{
										pos: position{line: 473, col: 75, offset: 13754},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 473, col: 75, offset: 13754},
												name: "AdditiveExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 473, col: 90, offset: 13769},
												name: "Term",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 486, col: 5, offset: 14216},
						name: "AdditiveExpr",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "RelationalOp",
			pos:  position{line: 488, col: 1, offset: 14230},
			expr: &choiceExpr{
				pos: position{line: 488, col: 17, offset: 14246},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 488, col: 17, offset: 14246},
						run: (*parser).callonRelationalOp2,
						expr: &litMatcher{
							pos:        position{line: 488, col: 17, offset: 14246},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
					},
					&actionExpr{
						pos: position{line: 488, col: 45, offset: 14274},
						run: (*parser).callonRelationalOp4,
						expr: &litMatcher{
							pos:        position{line: 488, col: 45, offset: 14274},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
					&actionExpr{
						pos: position{line: 488, col: 73, offset: 14302},
						run: (*parser).callonRelationalOp6,
						expr: &litMatcher{
							pos:        position{line: 488, col: 73, offset: 14302},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 488, col: 99, offset: 14328},
						run: (*parser).callonRelationalOp8,
						expr: &litMatcher{
							pos:        position{line: 488, col: 99, offset: 14328},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 490, col: 1, offset: 14353},
			expr: &choiceExpr{
				pos: position{line: 490, col: 17, offset: 14369},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 490, col: 17, offset: 14369},
						run: (*parser).callonAdditiveExpr2,
						expr: &seqExpr{
							pos: position{line: 490, col: 17, offset: 14369},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 490, col: 17, offset: 14369},
									label: "left",
									expr: &choiceExpr{
										pos: position{line: 490, col: 23, offset: 14375},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 490, col: 23, offset: 14375},
												name: "AdditiveExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 490, col: 38, offset: 14390},
												name: "Term",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 490, col: 44, offset: 14396},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 490, col: 46, offset: 14398},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 490, col: 49, offset: 14401},
										name: "AdditiveOp",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 490, col: 60, offset: 14412},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 490, col: 62, offset: 14414},
									label: "right",
									expr: &choiceExpr{
										pos: position{line: 490, col: 69, offset: 14421},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 490, col: 69, offset: 14421},
												name: "MultiplicativeExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 490, col: 90, offset: 14442},
												name: "Term",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 499, col: 5, offset: 14720},
						name: "MultiplicativeExpr",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "AdditiveOp",
			pos:  position{line: 501, col: 1, offset: 14740},
			expr: &choiceExpr{
				pos: position{line: 501, col: 15, offset: 14754},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 501, col: 15, offset: 14754},
						run: (*parser).callonAdditiveOp2,
						expr: &litMatcher{
							pos:        position{line: 501, col: 15, offset: 14754},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
					},
					&actionExpr{
						pos: position{line: 501, col: 41, offset: 14780},
						run: (*parser).callonAdditiveOp4,
						expr: &litMatcher{
							pos:        position{line: 501, col: 41, offset: 14780},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 503, col: 1, offset: 14805},
			expr: &actionExpr{
				pos: position{line: 503, col: 23, offset: 14827},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 503, col: 23, offset: 14827},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 503, col: 23, offset: 14827},
							label: "left",
							expr: &choiceExpr{
								pos: position{line: 503, col: 29, offset: 14833},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 503, col: 29, offset: 14833},
										name: "MultiplicativeExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 503, col: 50, offset: 14854},
										name: "Term",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 503, col: 56, offset: 14860},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 503, col: 58, offset: 14862},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 61, offset: 14865},
								name: "MultiplicativeOp",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 503, col: 78, offset: 14882},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 503, col: 80, offset: 14884},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 503, col: 86, offset: 14890},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "MultiplicativeOp",
			pos:  position{line: 516, col: 1, offset: 15249},
			expr: &choiceExpr{
				pos: position{line: 516, col: 21, offset: 15269},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 516, col: 21, offset: 15269},
						run: (*parser).callonMultiplicativeOp2,
						expr: &litMatcher{
							pos:        position{line: 516, col: 21, offset: 15269},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
					&actionExpr{
						pos: position{line: 516, col: 47, offset: 15295},
						run: (*parser).callonMultiplicativeOp4,
						expr: &litMatcher{
							pos:        position{line: 516, col: 47, offset: 15295},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
					},
					&actionExpr{
						pos: position{line: 516, col: 73, offset: 15321},
						run: (*parser).callonMultiplicativeOp6,
						expr: &litMatcher{
							pos:        position{line: 516, col: 73, offset: 15321},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DoubleInterroToken",
			pos:  position{line: 518, col: 1, offset: 15346},
			expr: &litMatcher{
				pos:        position{line: 518, col: 23, offset: 15368},
				val:        "??",
				ignoreCase: false,
				want:       "\"??\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ReopenToken",
			pos:  position{line: 519, col: 1, offset: 15373},
			expr: &litMatcher{
				pos:        position{line: 519, col: 16, offset: 15388},
				val:        "<<",
				ignoreCase: false,
				want:       "\"<<\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DotToken",
			pos:  position{line: 521, col: 1, offset: 15394},
			expr: &litMatcher{
				pos:        position{line: 521, col: 13, offset: 15406},
				val:        ".",
				ignoreCase: false,
				want:       "\".\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "List",
			pos:  position{line: 523, col: 1, offset: 15411},
			expr: &actionExpr{
				pos: position{line: 523, col: 9, offset: 15419},
				run: (*parser).callonList1,
				expr: &seqExpr{
					pos: position{line: 523, col: 9, offset: 15419},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 523, col: 9, offset: 15419},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 523, col: 13, offset: 15423},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 523, col: 15, offset: 15425},
							label: "eles",
							expr: &zeroOrMoreExpr{
								pos: position{line: 523, col: 20, offset: 15430},
								expr: &actionExpr{
									pos: position{line: 523, col: 21, offset: 15431},
									run: (*parser).callonList7,
									expr: &seqExpr{
										pos: position{line: 523, col: 21, offset: 15431},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 523, col: 21, offset: 15431},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 523, col: 23, offset: 15433},
													name: "Form",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 523, col: 28, offset: 15438},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 523, col: 52, offset: 15462},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 523, col: 57, offset: 15467},
								expr: &ruleRefExpr{
									pos:  position{line: 523, col: 57, offset: 15467},
									name: "Form",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 523, col: 63, offset: 15473},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 523, col: 65, offset: 15475},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Object",
			pos:  position{line: 530, col: 1, offset: 15574},
			expr: &actionExpr{
				pos: position{line: 530, col: 11, offset: 15584},
				run: (*parser).callonObject1,
				expr: &seqExpr{
					pos: position{line: 530, col: 11, offset: 15584},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 530, col: 11, offset: 15584},
							val:        "{{",
							ignoreCase: false,
							want:       "\"{{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 530, col: 16, offset: 15589},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 530, col: 18, offset: 15591},
							label: "vals",
							expr: &zeroOrMoreExpr{
								pos: position{line: 530, col: 23, offset: 15596},
								expr: &actionExpr{
									pos: position{line: 530, col: 24, offset: 15597},
									run: (*parser).callonObject7,
									expr: &seqExpr{
										pos: position{line: 530, col: 24, offset: 15597},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 530, col: 24, offset: 15597},
												label: "v",
												expr: &ruleRefExpr{
													pos:  position{line: 530, col: 26, offset: 15599},
													name: "KeyValue",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 530, col: 35, offset: 15608},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 530, col: 59, offset: 15632},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 530, col: 64, offset: 15637},
								expr: &ruleRefExpr{
									pos:  position{line: 530, col: 64, offset: 15637},
									name: "KeyValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 530, col: 74, offset: 15647},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 530, col: 76, offset: 15649},
							val:        "}}",
							ignoreCase: false,
							want:       "\"}}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Block",
			pos:  position{line: 548, col: 1, offset: 16015},
			expr: &actionExpr{
				pos: position{line: 548, col: 10, offset: 16024},
				run: (*parser).callonBlock1,
				expr: &seqExpr{
					pos: position{line: 548, col: 10, offset: 16024},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 548, col: 10, offset: 16024},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 548, col: 14, offset: 16028},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 548, col: 16, offset: 16030},
							label: "eles",
							expr: &zeroOrMoreExpr{
								pos: position{line: 548, col: 21, offset: 16035},
								expr: &actionExpr{
									pos: position{line: 548, col: 22, offset: 16036},
									run: (*parser).callonBlock7,
									expr: &seqExpr{
										pos: position{line: 548, col: 22, offset: 16036},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 548, col: 22, offset: 16036},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 548, col: 24, offset: 16038},
													name: "Expr",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 548, col: 29, offset: 16043},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 548, col: 53, offset: 16067},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 548, col: 58, offset: 16072},
								expr: &ruleRefExpr{
									pos:  position{line: 548, col: 58, offset: 16072},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 548, col: 64, offset: 16078},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 548, col: 66, offset: 16080},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "HeadersBlock",
			pos:  position{line: 555, col: 1, offset: 16177},
			expr: &actionExpr{
				pos: position{line: 555, col: 17, offset: 16193},
				run: (*parser).callonHeadersBlock1,
				expr: &seqExpr{
					pos: position{line: 555, col: 17, offset: 16193},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 555, col: 17, offset: 16193},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 555, col: 21, offset: 16197},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 555, col: 23, offset: 16199},
							label: "eles",
							expr: &zeroOrMoreExpr{
								pos: position{line: 555, col: 28, offset: 16204},
								expr: &actionExpr{
									pos: position{line: 555, col: 29, offset: 16205},
									run: (*parser).callonHeadersBlock7,
									expr: &seqExpr{
										pos: position{line: 555, col: 29, offset: 16205},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 555, col: 29, offset: 16205},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 555, col: 31, offset: 16207},
													name: "HeaderSlot",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 555, col: 42, offset: 16218},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 555, col: 66, offset: 16242},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 555, col: 71, offset: 16247},
								expr: &ruleRefExpr{
									pos:  position{line: 555, col: 71, offset: 16247},
									name: "HeaderSlot",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 555, col: 83, offset: 16259},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 555, col: 85, offset: 16261},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Literal",
			pos:  position{line: 564, col: 1, offset: 16371},
			expr: &choiceExpr{
				pos: position{line: 564, col: 12, offset: 16382},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 564, col: 12, offset: 16382},
						name: "Float",
					},
					&ruleRefExpr{
						pos:  position{line: 564, col: 20, offset: 16390},
						name: "Int",
					},
					&ruleRefExpr{
						pos:  position{line: 564, col: 26, offset: 16396},
						name: "Boolean",
					},
					&ruleRefExpr{
						pos:  position{line: 564, col: 36, offset: 16406},
						name: "TripleQuoteString",
					},
					&ruleRefExpr{
						pos:  position{line: 564, col: 56, offset: 16426},
						name: "String",
					},
					&ruleRefExpr{
						pos:  position{line: 564, col: 65, offset: 16435},
						name: "Quoted",
					},
					&ruleRefExpr{
						pos:  position{line: 564, col: 74, offset: 16444},
						name: "Null",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Float",
			pos:  position{line: 566, col: 1, offset: 16450},
			expr: &actionExpr{
				pos: position{line: 566, col: 10, offset: 16459},
				run: (*parser).callonFloat1,
				expr: &choiceExpr{
					pos: position{line: 566, col: 11, offset: 16460},
					alternatives: []any{
						&seqExpr{
							pos: position{line: 566, col: 12, offset: 16461},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 566, col: 13, offset: 16462},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 566, col: 13, offset: 16462},
											val:        "0",
											ignoreCase: false,
											want:       "\"0\"",
										},
										&seqExpr{
											pos: position{line: 566, col: 19, offset: 16468},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 566, col: 19, offset: 16468},
													name: "NonZeroDecimalDigit",
												},
												&zeroOrMoreExpr{
													pos: position{line: 566, col: 39, offset: 16488},
													expr: &ruleRefExpr{
														pos:  position{line: 566, col: 39, offset: 16488},
														name: "DecimalDigit",
													},
												},
											},
										},
									},
								},
								&litMatcher{
									pos:        position{line: 566, col: 54, offset: 16503},
									val:        ".",
									ignoreCase: false,
									want:       "\".\"",
								},
								&oneOrMoreExpr{
									pos: position{line: 566, col: 58, offset: 16507},
									expr: &ruleRefExpr{
										pos:  position{line: 566, col: 58, offset: 16507},
										name: "DecimalDigit",
									},
								},
								&zeroOrOneExpr{
									pos: position{line: 566, col: 72, offset: 16521},
									expr: &ruleRefExpr{
										pos:  position{line: 566, col: 72, offset: 16521},
										name: "Exponent",
									},
								},
							},
						},
						&seqExpr{
							pos: position{line: 566, col: 86, offset: 16535},
							exprs: []any{
								&choiceExpr{
									pos: position{line: 566, col: 87, offset: 16536},
									alternatives: []any{
										&litMatcher{
											pos:        position{line: 566, col: 87, offset: 16536},
											val:        "0",
											ignoreCase: false,
											want:       "\"0\"",
										},
										&seqExpr{
											pos: position{line: 566, col: 93, offset: 16542},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 566, col: 93, offset: 16542},
													name: "NonZeroDecimalDigit",
												},
												&oneOrMoreExpr{
													pos: position{line: 566, col: 113, offset: 16562},
													expr: &ruleRefExpr{
														pos:  position{line: 566, col: 113, offset: 16562},
														name: "DecimalDigit",
													},
												},
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 566, col: 128, offset: 16577},
									name: "Exponent",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Int",
			pos:  position{line: 577, col: 1, offset: 16752},
			expr: &actionExpr{
				pos: position{line: 577, col: 8, offset: 16759},
				run: (*parser).callonInt1,
				expr: &choiceExpr{
					pos: position{line: 577, col: 9, offset: 16760},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 577, col: 9, offset: 16760},
							val:        "0",
							ignoreCase: false,
							want:       "\"0\"",
						},
						&seqExpr{
							pos: position{line: 577, col: 15, offset: 16766},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 577, col: 15, offset: 16766},
									name: "NonZeroDecimalDigit",
								},
								&zeroOrMoreExpr{
									pos: position{line: 577, col: 35, offset: 16786},
									expr: &ruleRefExpr{
										pos:  position{line: 577, col: 35, offset: 16786},
										name: "DecimalDigit",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NonZeroDecimalDigit",
			pos:  position{line: 588, col: 1, offset: 16965},
			expr: &charClassMatcher{
				pos:        position{line: 588, col: 24, offset: 16988},
				val:        "[1-9]",
				ranges:     []rune{'1', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DecimalDigit",
			pos:  position{line: 590, col: 1, offset: 16995},
			expr: &charClassMatcher{
				pos:        position{line: 590, col: 17, offset: 17011},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Exponent",
			pos:  position{line: 592, col: 1, offset: 17018},
			expr: &seqExpr{
				pos: position{line: 592, col: 13, offset: 17030},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 592, col: 13, offset: 17030},
						val:        "e",
						ignoreCase: true,
						want:       "\"e\"i",
					},
					&zeroOrOneExpr{
						pos: position{line: 592, col: 18, offset: 17035},
						expr: &charClassMatcher{
							pos:        position{line: 592, col: 18, offset: 17035},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 592, col: 24, offset: 17041},
						expr: &ruleRefExpr{
							pos:  position{line: 592, col: 24, offset: 17041},
							name: "DecimalDigit",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TripleQuoteString",
			pos:  position{line: 594, col: 1, offset: 17056},
			expr: &choiceExpr{
				pos: position{line: 594, col: 22, offset: 17077},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 594, col: 22, offset: 17077},
						run: (*parser).callonTripleQuoteString2,
						expr: &seqExpr{
							pos: position{line: 594, col: 22, offset: 17077},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 594, col: 22, offset: 17077},
									name: "TripleQuote",
								},
								&labeledExpr{
									pos:   position{line: 594, col: 34, offset: 17089},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 594, col: 42, offset: 17097},
										name: "ImmediateTripleQuoteStringContent",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 594, col: 76, offset: 17131},
									name: "TripleQuote",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 599, col: 5, offset: 17251},
						run: (*parser).callonTripleQuoteString8,
						expr: &seqExpr{
							pos: position{line: 599, col: 5, offset: 17251},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 599, col: 5, offset: 17251},
									name: "TripleQuote",
								},
								&ruleRefExpr{
									pos:  position{line: 599, col: 17, offset: 17263},
									name: "TripleQuote",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ImmediateTripleQuoteStringContent",
			pos:  position{line: 606, col: 1, offset: 17340},
			expr: &actionExpr{
				pos: position{line: 606, col: 38, offset: 17377},
				run: (*parser).callonImmediateTripleQuoteStringContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 606, col: 38, offset: 17377},
					expr: &choiceExpr{
						pos: position{line: 606, col: 40, offset: 17379},
						alternatives: []any{
							&charClassMatcher{
								pos:        position{line: 606, col: 40, offset: 17379},
								val:        "[^\"]",
								chars:      []rune{'"'},
								ignoreCase: false,
								inverted:   true,
							},
							&litMatcher{
								pos:        position{line: 606, col: 47, offset: 17386},
								val:        "\n",
								ignoreCase: false,
								want:       "\"\\n\"",
							},
							&seqExpr{
								pos: position{line: 606, col: 54, offset: 17393},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 606, col: 54, offset: 17393},
										val:        "\"",
										ignoreCase: false,
										want:       "\"\\\"\"",
									},
									&zeroOrOneExpr{
										pos: position{line: 606, col: 58, offset: 17397},
										expr: &litMatcher{
											pos:        position{line: 606, col: 58, offset: 17397},
											val:        "\"",
											ignoreCase: false,
											want:       "\"\\\"\"",
										},
									},
									&charClassMatcher{
										pos:        position{line: 606, col: 63, offset: 17402},
										val:        "[^\"]",
										chars:      []rune{'"'},
										ignoreCase: false,
										inverted:   true,
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TripleQuote",
			pos:  position{line: 610, col: 1, offset: 17435},
			expr: &litMatcher{
				pos:        position{line: 610, col: 16, offset: 17450},
				val:        "\"\"\"",
				ignoreCase: false,
				want:       "\"\\\"\\\"\\\"\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "String",
			pos:  position{line: 613, col: 1, offset: 17461},
			expr: &actionExpr{
				pos: position{line: 613, col: 11, offset: 17471},
				run: (*parser).callonString1,
				expr: &seqExpr{
					pos: position{line: 613, col: 11, offset: 17471},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 613, col: 11, offset: 17471},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 613, col: 15, offset: 17475},
							expr: &choiceExpr{
								pos: position{line: 613, col: 17, offset: 17477},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 613, col: 17, offset: 17477},
										name: "ImmediateStringContent",
									},
									&ruleRefExpr{
										pos:  position{line: 613, col: 42, offset: 17502},
										name: "ImmediateEscape",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 613, col: 61, offset: 17521},
							name: "ImmediateQuoteToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ImmediateQuoteToken",
			pos:  position{line: 625, col: 1, offset: 17763},
			expr: &litMatcher{
				pos:        position{line: 625, col: 24, offset: 17786},
				val:        "\"",
				ignoreCase: false,
				want:       "\"\\\"\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ImmediateStringContent",
			pos:  position{line: 626, col: 1, offset: 17790},
			expr: &oneOrMoreExpr{
				pos: position{line: 626, col: 27, offset: 17816},
				expr: &charClassMatcher{
					pos:        position{line: 626, col: 27, offset: 17816},
					val:        "[^\\\\\"\\n]",
					chars:      []rune{'\\', '"', '\n'},
					ignoreCase: false,
					inverted:   true,
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ImmediateEscape",
			pos:  position{line: 627, col: 1, offset: 17826},
			expr: &seqExpr{
				pos: position{line: 627, col: 20, offset: 17845},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 627, col: 20, offset: 17845},
						val:        "\\",
						ignoreCase: false,
						want:       "\"\\\\\"",
					},
					&choiceExpr{
						pos: position{line: 628, col: 5, offset: 17856},
						alternatives: []any{
							&charClassMatcher{
								pos:        position{line: 628, col: 5, offset: 17856},
								val:        "[abfnrtv\"\\\\]",
								chars:      []rune{'a', 'b', 'f', 'n', 'r', 't', 'v', '"', '\\'},
								ignoreCase: false,
								inverted:   false,
							},
							&seqExpr{
								pos: position{line: 629, col: 5, offset: 17873},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 629, col: 5, offset: 17873},
										val:        "x",
										ignoreCase: false,
										want:       "\"x\"",
									},
									&charClassMatcher{
										pos:        position{line: 629, col: 9, offset: 17877},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 629, col: 19, offset: 17887},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
								},
							},
							&seqExpr{
								pos: position{line: 630, col: 5, offset: 17901},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 630, col: 5, offset: 17901},
										val:        "u",
										ignoreCase: false,
										want:       "\"u\"",
									},
									&charClassMatcher{
										pos:        position{line: 630, col: 9, offset: 17905},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 630, col: 19, offset: 17915},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 630, col: 29, offset: 17925},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 630, col: 39, offset: 17935},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
								},
							},
							&seqExpr{
								pos: position{line: 631, col: 5, offset: 17949},
								exprs: []any{
									&litMatcher{
										pos:        position{line: 631, col: 5, offset: 17949},
										val:        "U",
										ignoreCase: false,
										want:       "\"U\"",
									},
									&charClassMatcher{
										pos:        position{line: 631, col: 9, offset: 17953},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 631, col: 19, offset: 17963},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 631, col: 29, offset: 17973},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 631, col: 39, offset: 17983},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 631, col: 49, offset: 17993},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 631, col: 59, offset: 18003},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 631, col: 69, offset: 18013},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 631, col: 79, offset: 18023},
										val:        "[0-9a-f]i",
										ranges:     []rune{'0', '9', 'a', 'f'},
										ignoreCase: true,
										inverted:   false,
									},
								},
							},
							&seqExpr{
								pos: position{line: 632, col: 5, offset: 18037},
								exprs: []any{
									&charClassMatcher{
										pos:        position{line: 632, col: 5, offset: 18037},
										val:        "[0-7]",
										ranges:     []rune{'0', '7'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 632, col: 11, offset: 18043},
										val:        "[0-7]",
										ranges:     []rune{'0', '7'},
										ignoreCase: false,
										inverted:   false,
									},
									&charClassMatcher{
										pos:        position{line: 632, col: 17, offset: 18049},
										val:        "[0-7]",
										ranges:     []rune{'0', '7'},
										ignoreCase: false,
										inverted:   false,
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DocString",
			pos:  position{line: 635, col: 1, offset: 18058},
			expr: &choiceExpr{
				pos: position{line: 635, col: 14, offset: 18071},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 635, col: 14, offset: 18071},
						run: (*parser).callonDocString2,
						expr: &seqExpr{
							pos: position{line: 635, col: 14, offset: 18071},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 635, col: 14, offset: 18071},
									name: "TripleQuote",
								},
								&labeledExpr{
									pos:   position{line: 635, col: 26, offset: 18083},
									label: "content",
									expr: &ruleRefExpr{
										pos:  position{line: 635, col: 34, offset: 18091},
										name: "ImmediateTripleQuoteStringContent",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 635, col: 68, offset: 18125},
									name: "TripleQuote",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 637, col: 5, offset: 18194},
						run: (*parser).callonDocString8,
						expr: &seqExpr{
							pos: position{line: 637, col: 5, offset: 18194},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 637, col: 5, offset: 18194},
									name: "TripleQuote",
								},
								&ruleRefExpr{
									pos:  position{line: 637, col: 17, offset: 18206},
									name: "TripleQuote",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Quoted",
			pos:  position{line: 641, col: 1, offset: 18240},
			expr: &actionExpr{
				pos: position{line: 641, col: 11, offset: 18250},
				run: (*parser).callonQuoted1,
				expr: &seqExpr{
					pos: position{line: 641, col: 11, offset: 18250},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 641, col: 11, offset: 18250},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 641, col: 15, offset: 18254},
							label: "quoter",
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 22, offset: 18261},
								name: "WordToken",
							},
						},
						&litMatcher{
							pos:        position{line: 641, col: 32, offset: 18271},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 641, col: 36, offset: 18275},
							label: "raw",
							expr: &ruleRefExpr{
								pos:  position{line: 641, col: 40, offset: 18279},
								name: "QuotedRawToken",
							},
						},
						&litMatcher{
							pos:        position{line: 641, col: 55, offset: 18294},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "QuotedRawToken",
			pos:  position{line: 647, col: 1, offset: 18384},
			expr: &actionExpr{
				pos: position{line: 647, col: 19, offset: 18402},
				run: (*parser).callonQuotedRawToken1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 647, col: 19, offset: 18402},
					expr: &charClassMatcher{
						pos:        position{line: 647, col: 19, offset: 18402},
						val:        "[^}]",
						chars:      []rune{'}'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Boolean",
			pos:  position{line: 651, col: 1, offset: 18442},
			expr: &choiceExpr{
				pos: position{line: 651, col: 12, offset: 18453},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 651, col: 12, offset: 18453},
						run: (*parser).callonBoolean2,
						expr: &ruleRefExpr{
							pos:  position{line: 651, col: 12, offset: 18453},
							name: "TrueToken",
						},
					},
					&actionExpr{
						pos: position{line: 656, col: 5, offset: 18532},
						run: (*parser).callonBoolean4,
						expr: &ruleRefExpr{
							pos:  position{line: 656, col: 5, offset: 18532},
							name: "FalseToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TrueToken",
			pos:  position{line: 662, col: 1, offset: 18611},
			expr: &seqExpr{
				pos: position{line: 662, col: 14, offset: 18624},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 662, col: 14, offset: 18624},
						val:        "true",
						ignoreCase: false,
						want:       "\"true\"",
					},
					&notExpr{
						pos: position{line: 662, col: 21, offset: 18631},
						expr: &ruleRefExpr{
							pos:  position{line: 662, col: 22, offset: 18632},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FalseToken",
			pos:  position{line: 663, col: 1, offset: 18641},
			expr: &seqExpr{
				pos: position{line: 663, col: 15, offset: 18655},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 663, col: 15, offset: 18655},
						val:        "false",
						ignoreCase: false,
						want:       "\"false\"",
					},
					&notExpr{
						pos: position{line: 663, col: 23, offset: 18663},
						expr: &ruleRefExpr{
							pos:  position{line: 663, col: 24, offset: 18664},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Null",
			pos:  position{line: 665, col: 1, offset: 18674},
			expr: &actionExpr{
				pos: position{line: 665, col: 9, offset: 18682},
				run: (*parser).callonNull1,
				expr: &ruleRefExpr{
					pos:  position{line: 665, col: 9, offset: 18682},
					name: "NullToken",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NullToken",
			pos:  position{line: 670, col: 1, offset: 18739},
			expr: &seqExpr{
				pos: position{line: 670, col: 14, offset: 18752},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 670, col: 14, offset: 18752},
						val:        "null",
						ignoreCase: false,
						want:       "\"null\"",
					},
					&notExpr{
						pos: position{line: 670, col: 21, offset: 18759},
						expr: &ruleRefExpr{
							pos:  position{line: 670, col: 22, offset: 18760},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CommentToken",
			pos:  position{line: 672, col: 1, offset: 18770},
			expr: &seqExpr{
				pos: position{line: 672, col: 17, offset: 18786},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 672, col: 17, offset: 18786},
						val:        "#",
						ignoreCase: false,
						want:       "\"#\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 672, col: 21, offset: 18790},
						expr: &charClassMatcher{
							pos:        position{line: 672, col: 21, offset: 18790},
							val:        "[^\\n]",
							chars:      []rune{'\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Conditional",
			pos:  position{line: 676, col: 1, offset: 18833},
			expr: &actionExpr{
				pos: position{line: 676, col: 16, offset: 18848},
				run: (*parser).callonConditional1,
				expr: &seqExpr{
					pos: position{line: 676, col: 16, offset: 18848},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 676, col: 16, offset: 18848},
							name: "IfToken",
						},
						&ruleRefExpr{
							pos:  position{line: 676, col: 24, offset: 18856},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 676, col: 26, offset: 18858},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 676, col: 31, offset: 18863},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 676, col: 36, offset: 18868},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 676, col: 38, offset: 18870},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 676, col: 44, offset: 18876},
								name: "Block",
							},
						},
						&labeledExpr{
							pos:   position{line: 676, col: 50, offset: 18882},
							label: "else_",
							expr: &zeroOrOneExpr{
								pos: position{line: 676, col: 56, offset: 18888},
								expr: &ruleRefExpr{
									pos:  position{line: 676, col: 56, offset: 18888},
									name: "ElseClause",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ElseClause",
			pos:  position{line: 685, col: 1, offset: 19026},
			expr: &choiceExpr{
				pos: position{line: 685, col: 15, offset: 19040},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 685, col: 15, offset: 19040},
						run: (*parser).callonElseClause2,
						expr: &seqExpr{
							pos: position{line: 685, col: 15, offset: 19040},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 685, col: 15, offset: 19040},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 685, col: 17, offset: 19042},
									name: "ElseToken",
								},
								&ruleRefExpr{
									pos:  position{line: 685, col: 27, offset: 19052},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 685, col: 29, offset: 19054},
									label: "elseif",
									expr: &ruleRefExpr{
										pos:  position{line: 685, col: 36, offset: 19061},
										name: "Conditional",
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 691, col: 5, offset: 19230},
						run: (*parser).callonElseClause9,
						expr: &seqExpr{
							pos: position{line: 691, col: 5, offset: 19230},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 691, col: 5, offset: 19230},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 691, col: 7, offset: 19232},
									name: "ElseToken",
								},
								&ruleRefExpr{
									pos:  position{line: 691, col: 17, offset: 19242},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 691, col: 19, offset: 19244},
									label: "block",
									expr: &ruleRefExpr{
										pos:  position{line: 691, col: 25, offset: 19250},
										name: "Block",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IfToken",
			pos:  position{line: 695, col: 1, offset: 19290},
			expr: &seqExpr{
				pos: position{line: 695, col: 12, offset: 19301},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 695, col: 12, offset: 19301},
						val:        "if",
						ignoreCase: false,
						want:       "\"if\"",
					},
					&notExpr{
						pos: position{line: 695, col: 17, offset: 19306},
						expr: &ruleRefExpr{
							pos:  position{line: 695, col: 18, offset: 19307},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ElseToken",
			pos:  position{line: 696, col: 1, offset: 19316},
			expr: &seqExpr{
				pos: position{line: 696, col: 14, offset: 19329},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 696, col: 14, offset: 19329},
						val:        "else",
						ignoreCase: false,
						want:       "\"else\"",
					},
					&notExpr{
						pos: position{line: 696, col: 21, offset: 19336},
						expr: &ruleRefExpr{
							pos:  position{line: 696, col: 22, offset: 19337},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ForLoop",
			pos:  position{line: 698, col: 1, offset: 19347},
			expr: &choiceExpr{
				pos: position{line: 698, col: 12, offset: 19358},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 698, col: 12, offset: 19358},
						name: "ForTwoVarLoop",
					},
					&ruleRefExpr{
						pos:  position{line: 698, col: 28, offset: 19374},
						name: "ForSingleVarLoop",
					},
					&ruleRefExpr{
						pos:  position{line: 698, col: 47, offset: 19393},
						name: "ForConditionLoop",
					},
					&ruleRefExpr{
						pos:  position{line: 698, col: 66, offset: 19412},
						name: "ForInfiniteLoop",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ForSingleVarLoop",
			pos:  position{line: 700, col: 1, offset: 19429},
			expr: &actionExpr{
				pos: position{line: 700, col: 21, offset: 19449},
				run: (*parser).callonForSingleVarLoop1,
				expr: &seqExpr{
					pos: position{line: 700, col: 21, offset: 19449},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 700, col: 21, offset: 19449},
							name: "ForToken",
						},
						&ruleRefExpr{
							pos:  position{line: 700, col: 30, offset: 19458},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 700, col: 32, offset: 19460},
							label: "variable",
							expr: &ruleRefExpr{
								pos:  position{line: 700, col: 41, offset: 19469},
								name: "Id",
							},
						},
						&labeledExpr{
							pos:   position{line: 700, col: 44, offset: 19472},
							label: "typeAnnotation",
							expr: &zeroOrOneExpr{
								pos: position{line: 700, col: 59, offset: 19487},
								expr: &seqExpr{
									pos: position{line: 700, col: 60, offset: 19488},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 700, col: 60, offset: 19488},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 700, col: 62, offset: 19490},
											name: "ColonToken",
										},
										&ruleRefExpr{
											pos:  position{line: 700, col: 73, offset: 19501},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 700, col: 75, offset: 19503},
											label: "t",
											expr: &ruleRefExpr{
												pos:  position{line: 700, col: 77, offset: 19505},
												name: "Type",
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 700, col: 84, offset: 19512},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 700, col: 86, offset: 19514},
							name: "InToken",
						},
						&ruleRefExpr{
							pos:  position{line: 700, col: 94, offset: 19522},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 700, col: 96, offset: 19524},
							label: "iterable",
							expr: &ruleRefExpr{
								pos:  position{line: 700, col: 105, offset: 19533},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 700, col: 110, offset: 19538},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 700, col: 112, offset: 19540},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 700, col: 117, offset: 19545},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ForTwoVarLoop",
			pos:  position{line: 714, col: 1, offset: 19829},
			expr: &actionExpr{
				pos: position{line: 714, col: 18, offset: 19846},
				run: (*parser).callonForTwoVarLoop1,
				expr: &seqExpr{
					pos: position{line: 714, col: 18, offset: 19846},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 714, col: 18, offset: 19846},
							name: "ForToken",
						},
						&ruleRefExpr{
							pos:  position{line: 714, col: 27, offset: 19855},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 714, col: 29, offset: 19857},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 714, col: 33, offset: 19861},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 714, col: 36, offset: 19864},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 714, col: 38, offset: 19866},
							name: "CommaToken",
						},
						&ruleRefExpr{
							pos:  position{line: 714, col: 49, offset: 19877},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 714, col: 51, offset: 19879},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 714, col: 57, offset: 19885},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 714, col: 60, offset: 19888},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 714, col: 62, offset: 19890},
							name: "InToken",
						},
						&ruleRefExpr{
							pos:  position{line: 714, col: 70, offset: 19898},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 714, col: 72, offset: 19900},
							label: "iterable",
							expr: &ruleRefExpr{
								pos:  position{line: 714, col: 81, offset: 19909},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 714, col: 86, offset: 19914},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 714, col: 88, offset: 19916},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 714, col: 93, offset: 19921},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ForConditionLoop",
			pos:  position{line: 724, col: 1, offset: 20104},
			expr: &actionExpr{
				pos: position{line: 724, col: 21, offset: 20124},
				run: (*parser).callonForConditionLoop1,
				expr: &seqExpr{
					pos: position{line: 724, col: 21, offset: 20124},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 724, col: 21, offset: 20124},
							name: "ForToken",
						},
						&ruleRefExpr{
							pos:  position{line: 724, col: 30, offset: 20133},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 724, col: 32, offset: 20135},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 724, col: 37, offset: 20140},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 724, col: 42, offset: 20145},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 724, col: 44, offset: 20147},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 724, col: 49, offset: 20152},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ForInfiniteLoop",
			pos:  position{line: 732, col: 1, offset: 20266},
			expr: &actionExpr{
				pos: position{line: 732, col: 20, offset: 20285},
				run: (*parser).callonForInfiniteLoop1,
				expr: &seqExpr{
					pos: position{line: 732, col: 20, offset: 20285},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 732, col: 20, offset: 20285},
							name: "ForToken",
						},
						&ruleRefExpr{
							pos:  position{line: 732, col: 29, offset: 20294},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 732, col: 31, offset: 20296},
							label: "body",
							expr: &ruleRefExpr{
								pos:  position{line: 732, col: 36, offset: 20301},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ForToken",
			pos:  position{line: 739, col: 1, offset: 20387},
			expr: &seqExpr{
				pos: position{line: 739, col: 13, offset: 20399},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 739, col: 13, offset: 20399},
						val:        "for",
						ignoreCase: false,
						want:       "\"for\"",
					},
					&notExpr{
						pos: position{line: 739, col: 19, offset: 20405},
						expr: &ruleRefExpr{
							pos:  position{line: 739, col: 20, offset: 20406},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "InToken",
			pos:  position{line: 740, col: 1, offset: 20415},
			expr: &seqExpr{
				pos: position{line: 740, col: 12, offset: 20426},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 740, col: 12, offset: 20426},
						val:        "in",
						ignoreCase: false,
						want:       "\"in\"",
					},
					&notExpr{
						pos: position{line: 740, col: 17, offset: 20431},
						expr: &ruleRefExpr{
							pos:  position{line: 740, col: 18, offset: 20432},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Lambda",
			pos:  position{line: 742, col: 1, offset: 20442},
			expr: &actionExpr{
				pos: position{line: 742, col: 11, offset: 20452},
				run: (*parser).callonLambda1,
				expr: &seqExpr{
					pos: position{line: 742, col: 11, offset: 20452},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 742, col: 11, offset: 20452},
							name: "LambdaToken",
						},
						&labeledExpr{
							pos:   position{line: 742, col: 23, offset: 20464},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 742, col: 28, offset: 20469},
								name: "LambdaArgs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 742, col: 39, offset: 20480},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 742, col: 41, offset: 20482},
							name: "ArrowToken",
						},
						&ruleRefExpr{
							pos:  position{line: 742, col: 52, offset: 20493},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 742, col: 54, offset: 20495},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 742, col: 59, offset: 20500},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LambdaToken",
			pos:  position{line: 751, col: 1, offset: 20652},
			expr: &litMatcher{
				pos:        position{line: 751, col: 16, offset: 20667},
				val:        "\\",
				ignoreCase: false,
				want:       "\"\\\\\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArrowToken",
			pos:  position{line: 752, col: 1, offset: 20672},
			expr: &litMatcher{
				pos:        position{line: 752, col: 15, offset: 20686},
				val:        "->",
				ignoreCase: false,
				want:       "\"->\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LambdaArgs",
			pos:  position{line: 754, col: 1, offset: 20692},
			expr: &choiceExpr{
				pos: position{line: 754, col: 15, offset: 20706},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 754, col: 15, offset: 20706},
						run: (*parser).callonLambdaArgs2,
						expr: &seqExpr{
							pos: position{line: 754, col: 15, offset: 20706},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 754, col: 15, offset: 20706},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 754, col: 19, offset: 20710},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 754, col: 21, offset: 20712},
									label: "args",
									expr: &zeroOrMoreExpr{
										pos: position{line: 754, col: 26, offset: 20717},
										expr: &actionExpr{
											pos: position{line: 754, col: 27, offset: 20718},
											run: (*parser).callonLambdaArgs8,
											expr: &seqExpr{
												pos: position{line: 754, col: 27, offset: 20718},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 754, col: 27, offset: 20718},
														label: "a",
														expr: &ruleRefExpr{
															pos:  position{line: 754, col: 29, offset: 20720},
															name: "LambdaArg",
														},
													},
													&ruleRefExpr{
														pos:  position{line: 754, col: 39, offset: 20730},
														name: "Sep",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 754, col: 63, offset: 20754},
									label: "last",
									expr: &zeroOrOneExpr{
										pos: position{line: 754, col: 68, offset: 20759},
										expr: &ruleRefExpr{
											pos:  position{line: 754, col: 68, offset: 20759},
											name: "LambdaArg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 754, col: 79, offset: 20770},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 754, col: 81, offset: 20772},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 756, col: 5, offset: 20833},
						run: (*parser).callonLambdaArgs18,
						expr: &labeledExpr{
							pos:   position{line: 756, col: 5, offset: 20833},
							label: "arg",
							expr: &ruleRefExpr{
								pos:  position{line: 756, col: 9, offset: 20837},
								name: "LambdaArg",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LambdaArg",
			pos:  position{line: 760, col: 1, offset: 20895},
			expr: &choiceExpr{
				pos: position{line: 760, col: 14, offset: 20908},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 760, col: 14, offset: 20908},
						name: "ArgWithDefault",
					},
					&ruleRefExpr{
						pos:  position{line: 760, col: 31, offset: 20925},
						name: "ArgWithBlockDefault",
					},
					&ruleRefExpr{
						pos:  position{line: 760, col: 53, offset: 20947},
						name: "ArgWithType",
					},
					&ruleRefExpr{
						pos:  position{line: 760, col: 67, offset: 20961},
						name: "ArgWithoutType",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithoutType",
			pos:  position{line: 762, col: 1, offset: 20977},
			expr: &actionExpr{
				pos: position{line: 762, col: 19, offset: 20995},
				run: (*parser).callonArgWithoutType1,
				expr: &labeledExpr{
					pos:   position{line: 762, col: 19, offset: 20995},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 762, col: 24, offset: 21000},
						name: "IdSymbol",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Match",
			pos:  position{line: 769, col: 1, offset: 21087},
			expr: &actionExpr{
				pos: position{line: 769, col: 10, offset: 21096},
				run: (*parser).callonMatch1,
				expr: &seqExpr{
					pos: position{line: 769, col: 10, offset: 21096},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 769, col: 10, offset: 21096},
							name: "MatchToken",
						},
						&ruleRefExpr{
							pos:  position{line: 769, col: 21, offset: 21107},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 769, col: 23, offset: 21109},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 769, col: 28, offset: 21114},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 769, col: 33, offset: 21119},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 769, col: 35, offset: 21121},
							name: "WithToken",
						},
						&ruleRefExpr{
							pos:  position{line: 769, col: 45, offset: 21131},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 769, col: 47, offset: 21133},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 769, col: 51, offset: 21137},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 769, col: 53, offset: 21139},
							label: "cs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 769, col: 56, offset: 21142},
								expr: &actionExpr{
									pos: position{line: 769, col: 57, offset: 21143},
									run: (*parser).callonMatch14,
									expr: &seqExpr{
										pos: position{line: 769, col: 57, offset: 21143},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 769, col: 57, offset: 21143},
												label: "m",
												expr: &ruleRefExpr{
													pos:  position{line: 769, col: 59, offset: 21145},
													name: "MatchCase",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 769, col: 69, offset: 21155},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 769, col: 93, offset: 21179},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 769, col: 98, offset: 21184},
								expr: &ruleRefExpr{
									pos:  position{line: 769, col: 98, offset: 21184},
									name: "MatchCase",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 769, col: 109, offset: 21195},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 769, col: 111, offset: 21197},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MatchCase",
			pos:  position{line: 777, col: 1, offset: 21321},
			expr: &actionExpr{
				pos: position{line: 777, col: 14, offset: 21334},
				run: (*parser).callonMatchCase1,
				expr: &seqExpr{
					pos: position{line: 777, col: 14, offset: 21334},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 777, col: 14, offset: 21334},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 777, col: 22, offset: 21342},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 777, col: 30, offset: 21350},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 777, col: 32, offset: 21352},
							val:        "->",
							ignoreCase: false,
							want:       "\"->\"",
						},
						&ruleRefExpr{
							pos:  position{line: 777, col: 37, offset: 21357},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 777, col: 39, offset: 21359},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 777, col: 44, offset: 21364},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Pattern",
			pos:  position{line: 785, col: 1, offset: 21477},
			expr: &choiceExpr{
				pos: position{line: 785, col: 12, offset: 21488},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 785, col: 12, offset: 21488},
						name: "WildcardPattern",
					},
					&ruleRefExpr{
						pos:  position{line: 785, col: 30, offset: 21506},
						name: "LiteralPattern",
					},
					&ruleRefExpr{
						pos:  position{line: 785, col: 47, offset: 21523},
						name: "ConstructorPattern",
					},
					&ruleRefExpr{
						pos:  position{line: 785, col: 68, offset: 21544},
						name: "VariablePattern",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WildcardPattern",
			pos:  position{line: 787, col: 1, offset: 21561},
			expr: &actionExpr{
				pos: position{line: 787, col: 20, offset: 21580},
				run: (*parser).callonWildcardPattern1,
				expr: &litMatcher{
					pos:        position{line: 787, col: 20, offset: 21580},
					val:        "_",
					ignoreCase: false,
					want:       "\"_\"",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LiteralPattern",
			pos:  position{line: 791, col: 1, offset: 21621},
			expr: &actionExpr{
				pos: position{line: 791, col: 19, offset: 21639},
				run: (*parser).callonLiteralPattern1,
				expr: &labeledExpr{
					pos:   position{line: 791, col: 19, offset: 21639},
					label: "lit",
					expr: &ruleRefExpr{
						pos:  position{line: 791, col: 23, offset: 21643},
						name: "Literal",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ConstructorPattern",
			pos:  position{line: 795, col: 1, offset: 21704},
			expr: &actionExpr{
				pos: position{line: 795, col: 23, offset: 21726},
				run: (*parser).callonConstructorPattern1,
				expr: &seqExpr{
					pos: position{line: 795, col: 23, offset: 21726},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 795, col: 23, offset: 21726},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 795, col: 28, offset: 21731},
								name: "UpperId",
							},
						},
						&labeledExpr{
							pos:   position{line: 795, col: 36, offset: 21739},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 795, col: 41, offset: 21744},
								expr: &ruleRefExpr{
									pos:  position{line: 795, col: 41, offset: 21744},
									name: "PatternArgs",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PatternArgs",
			pos:  position{line: 806, col: 1, offset: 21925},
			expr: &actionExpr{
				pos: position{line: 806, col: 16, offset: 21940},
				run: (*parser).callonPatternArgs1,
				expr: &seqExpr{
					pos: position{line: 806, col: 16, offset: 21940},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 806, col: 16, offset: 21940},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 806, col: 20, offset: 21944},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 806, col: 22, offset: 21946},
							label: "patterns",
							expr: &zeroOrMoreExpr{
								pos: position{line: 806, col: 31, offset: 21955},
								expr: &actionExpr{
									pos: position{line: 806, col: 32, offset: 21956},
									run: (*parser).callonPatternArgs7,
									expr: &seqExpr{
										pos: position{line: 806, col: 32, offset: 21956},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 806, col: 32, offset: 21956},
												label: "p",
												expr: &ruleRefExpr{
													pos:  position{line: 806, col: 34, offset: 21958},
													name: "Pattern",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 806, col: 42, offset: 21966},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 806, col: 66, offset: 21990},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 806, col: 71, offset: 21995},
								expr: &ruleRefExpr{
									pos:  position{line: 806, col: 71, offset: 21995},
									name: "Pattern",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 806, col: 80, offset: 22004},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 806, col: 82, offset: 22006},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VariablePattern",
			pos:  position{line: 810, col: 1, offset: 22068},
			expr: &actionExpr{
				pos: position{line: 810, col: 20, offset: 22087},
				run: (*parser).callonVariablePattern1,
				expr: &labeledExpr{
					pos:   position{line: 810, col: 20, offset: 22087},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 810, col: 25, offset: 22092},
						name: "Id",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MatchToken",
			pos:  position{line: 814, col: 1, offset: 22151},
			expr: &seqExpr{
				pos: position{line: 814, col: 15, offset: 22165},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 814, col: 15, offset: 22165},
						val:        "match",
						ignoreCase: false,
						want:       "\"match\"",
					},
					&notExpr{
						pos: position{line: 814, col: 23, offset: 22173},
						expr: &ruleRefExpr{
							pos:  position{line: 814, col: 24, offset: 22174},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WithToken",
			pos:  position{line: 815, col: 1, offset: 22183},
			expr: &seqExpr{
				pos: position{line: 815, col: 14, offset: 22196},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 815, col: 14, offset: 22196},
						val:        "with",
						ignoreCase: false,
						want:       "\"with\"",
					},
					&notExpr{
						pos: position{line: 815, col: 21, offset: 22203},
						expr: &ruleRefExpr{
							pos:  position{line: 815, col: 22, offset: 22204},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Assert",
			pos:  position{line: 817, col: 1, offset: 22214},
			expr: &actionExpr{
				pos: position{line: 817, col: 11, offset: 22224},
				run: (*parser).callonAssert1,
				expr: &seqExpr{
					pos: position{line: 817, col: 11, offset: 22224},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 817, col: 11, offset: 22224},
							name: "AssertToken",
						},
						&labeledExpr{
							pos:   position{line: 817, col: 23, offset: 22236},
							label: "message",
							expr: &zeroOrOneExpr{
								pos: position{line: 817, col: 31, offset: 22244},
								expr: &ruleRefExpr{
									pos:  position{line: 817, col: 31, offset: 22244},
									name: "MessageArgs",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 817, col: 44, offset: 22257},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 817, col: 46, offset: 22259},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 817, col: 52, offset: 22265},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MessageArgs",
			pos:  position{line: 829, col: 1, offset: 22432},
			expr: &actionExpr{
				pos: position{line: 829, col: 16, offset: 22447},
				run: (*parser).callonMessageArgs1,
				expr: &seqExpr{
					pos: position{line: 829, col: 16, offset: 22447},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 829, col: 16, offset: 22447},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 829, col: 20, offset: 22451},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 829, col: 22, offset: 22453},
							label: "msg",
							expr: &ruleRefExpr{
								pos:  position{line: 829, col: 26, offset: 22457},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 829, col: 31, offset: 22462},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 829, col: 33, offset: 22464},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AssertToken",
			pos:  position{line: 833, col: 1, offset: 22491},
			expr: &seqExpr{
				pos: position{line: 833, col: 16, offset: 22506},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 833, col: 16, offset: 22506},
						val:        "assert",
						ignoreCase: false,
						want:       "\"assert\"",
					},
					&notExpr{
						pos: position{line: 833, col: 25, offset: 22515},
						expr: &ruleRefExpr{
							pos:  position{line: 833, col: 26, offset: 22516},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Break",
			pos:  position{line: 835, col: 1, offset: 22526},
			expr: &actionExpr{
				pos: position{line: 835, col: 10, offset: 22535},
				run: (*parser).callonBreak1,
				expr: &ruleRefExpr{
					pos:  position{line: 835, col: 10, offset: 22535},
					name: "BreakToken",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "BreakToken",
			pos:  position{line: 841, col: 1, offset: 22595},
			expr: &seqExpr{
				pos: position{line: 841, col: 15, offset: 22609},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 841, col: 15, offset: 22609},
						val:        "break",
						ignoreCase: false,
						want:       "\"break\"",
					},
					&notExpr{
						pos: position{line: 841, col: 23, offset: 22617},
						expr: &ruleRefExpr{
							pos:  position{line: 841, col: 24, offset: 22618},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Continue",
			pos:  position{line: 843, col: 1, offset: 22628},
			expr: &actionExpr{
				pos: position{line: 843, col: 13, offset: 22640},
				run: (*parser).callonContinue1,
				expr: &ruleRefExpr{
					pos:  position{line: 843, col: 13, offset: 22640},
					name: "ContinueToken",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ContinueToken",
			pos:  position{line: 849, col: 1, offset: 22706},
			expr: &seqExpr{
				pos: position{line: 849, col: 18, offset: 22723},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 849, col: 18, offset: 22723},
						val:        "continue",
						ignoreCase: false,
						want:       "\"continue\"",
					},
					&notExpr{
						pos: position{line: 849, col: 29, offset: 22734},
						expr: &ruleRefExpr{
							pos:  position{line: 849, col: 30, offset: 22735},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Reassignment",
			pos:  position{line: 851, col: 1, offset: 22745},
			expr: &actionExpr{
				pos: position{line: 851, col: 17, offset: 22761},
				run: (*parser).callonReassignment1,
				expr: &seqExpr{
					pos: position{line: 851, col: 17, offset: 22761},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 851, col: 17, offset: 22761},
							label: "target",
							expr: &ruleRefExpr{
								pos:  position{line: 851, col: 24, offset: 22768},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 851, col: 29, offset: 22773},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 851, col: 31, offset: 22775},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 851, col: 34, offset: 22778},
								name: "AssignOp",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 851, col: 43, offset: 22787},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 851, col: 45, offset: 22789},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 851, col: 51, offset: 22795},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AssignOp",
			pos:  position{line: 860, col: 1, offset: 22935},
			expr: &choiceExpr{
				pos: position{line: 860, col: 13, offset: 22947},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 860, col: 13, offset: 22947},
						run: (*parser).callonAssignOp2,
						expr: &ruleRefExpr{
							pos:  position{line: 860, col: 13, offset: 22947},
							name: "PlusEqualToken",
						},
					},
					&actionExpr{
						pos: position{line: 860, col: 50, offset: 22984},
						run: (*parser).callonAssignOp4,
						expr: &ruleRefExpr{
							pos:  position{line: 860, col: 50, offset: 22984},
							name: "EqualToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PlusEqualToken",
			pos:  position{line: 861, col: 1, offset: 23015},
			expr: &litMatcher{
				pos:        position{line: 861, col: 19, offset: 23033},
				val:        "+=",
				ignoreCase: false,
				want:       "\"+=\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EqualToken",
			pos:  position{line: 862, col: 1, offset: 23038},
			expr: &litMatcher{
				pos:        position{line: 862, col: 15, offset: 23052},
				val:        "=",
				ignoreCase: false,
				want:       "\"=\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeHint",
			pos:  position{line: 864, col: 1, offset: 23057},
			expr: &actionExpr{
				pos: position{line: 864, col: 13, offset: 23069},
				run: (*parser).callonTypeHint1,
				expr: &seqExpr{
					pos: position{line: 864, col: 13, offset: 23069},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 864, col: 13, offset: 23069},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 864, col: 18, offset: 23074},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 864, col: 23, offset: 23079},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 864, col: 25, offset: 23081},
							name: "DoubleColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 864, col: 42, offset: 23098},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 864, col: 44, offset: 23100},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 864, col: 50, offset: 23106},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DoubleColonToken",
			pos:  position{line: 872, col: 1, offset: 23214},
			expr: &litMatcher{
				pos:        position{line: 872, col: 21, offset: 23234},
				val:        "::",
				ignoreCase: false,
				want:       "\"::\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Reopen",
			pos:  position{line: 874, col: 1, offset: 23240},
			expr: &actionExpr{
				pos: position{line: 874, col: 11, offset: 23250},
				run: (*parser).callonReopen1,
				expr: &seqExpr{
					pos: position{line: 874, col: 11, offset: 23250},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 874, col: 11, offset: 23250},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 874, col: 16, offset: 23255},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 874, col: 19, offset: 23258},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 874, col: 21, offset: 23260},
							name: "ReopenToken",
						},
						&ruleRefExpr{
							pos:  position{line: 874, col: 33, offset: 23272},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 874, col: 35, offset: 23274},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 874, col: 37, offset: 23276},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveDecl",
			pos:  position{line: 882, col: 1, offset: 23380},
			expr: &actionExpr{
				pos: position{line: 882, col: 18, offset: 23397},
				run: (*parser).callonDirectiveDecl1,
				expr: &seqExpr{
					pos: position{line: 882, col: 18, offset: 23397},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 882, col: 18, offset: 23397},
							name: "DirectiveToken",
						},
						&ruleRefExpr{
							pos:  position{line: 882, col: 33, offset: 23412},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 882, col: 35, offset: 23414},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 882, col: 40, offset: 23419},
								name: "DirectiveName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 882, col: 54, offset: 23433},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 882, col: 56, offset: 23435},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 882, col: 61, offset: 23440},
								expr: &ruleRefExpr{
									pos:  position{line: 882, col: 61, offset: 23440},
									name: "ArgTypes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 882, col: 71, offset: 23450},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 882, col: 73, offset: 23452},
							name: "OnToken",
						},
						&ruleRefExpr{
							pos:  position{line: 882, col: 81, offset: 23460},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 882, col: 83, offset: 23462},
							label: "locations",
							expr: &ruleRefExpr{
								pos:  position{line: 882, col: 93, offset: 23472},
								name: "DirectiveLocations",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveApplication",
			pos:  position{line: 895, col: 1, offset: 23725},
			expr: &actionExpr{
				pos: position{line: 895, col: 25, offset: 23749},
				run: (*parser).callonDirectiveApplication1,
				expr: &seqExpr{
					pos: position{line: 895, col: 25, offset: 23749},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 895, col: 25, offset: 23749},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 895, col: 29, offset: 23753},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 895, col: 34, offset: 23758},
								name: "Id",
							},
						},
						&labeledExpr{
							pos:   position{line: 895, col: 37, offset: 23761},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 895, col: 42, offset: 23766},
								expr: &ruleRefExpr{
									pos:  position{line: 895, col: 42, offset: 23766},
									name: "ArgValues",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveLocations",
			pos:  position{line: 907, col: 1, offset: 23977},
			expr: &actionExpr{
				pos: position{line: 907, col: 23, offset: 23999},
				run: (*parser).callonDirectiveLocations1,
				expr: &seqExpr{
					pos: position{line: 907, col: 23, offset: 23999},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 907, col: 23, offset: 23999},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 907, col: 29, offset: 24005},
								name: "DirectiveLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 907, col: 47, offset: 24023},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 907, col: 52, offset: 24028},
								expr: &actionExpr{
									pos: position{line: 907, col: 53, offset: 24029},
									run: (*parser).callonDirectiveLocations7,
									expr: &seqExpr{
										pos: position{line: 907, col: 53, offset: 24029},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 907, col: 53, offset: 24029},
												name: "_",
											},
											&litMatcher{
												pos:        position{line: 907, col: 55, offset: 24031},
												val:        "|",
												ignoreCase: false,
												want:       "\"|\"",
											},
											&ruleRefExpr{
												pos:  position{line: 907, col: 59, offset: 24035},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 907, col: 61, offset: 24037},
												label: "loc",
												expr: &ruleRefExpr{
													pos:  position{line: 907, col: 65, offset: 24041},
													name: "DirectiveLocation",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveLocation",
			pos:  position{line: 911, col: 1, offset: 24146},
			expr: &actionExpr{
				pos: position{line: 911, col: 22, offset: 24167},
				run: (*parser).callonDirectiveLocation1,
				expr: &labeledExpr{
					pos:   position{line: 911, col: 22, offset: 24167},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 911, col: 27, offset: 24172},
						name: "UpperId",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveName",
			pos:  position{line: 915, col: 1, offset: 24238},
			expr: &actionExpr{
				pos: position{line: 915, col: 18, offset: 24255},
				run: (*parser).callonDirectiveName1,
				expr: &seqExpr{
					pos: position{line: 915, col: 18, offset: 24255},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 915, col: 18, offset: 24255},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 915, col: 22, offset: 24259},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 915, col: 27, offset: 24264},
								name: "Id",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveToken",
			pos:  position{line: 919, col: 1, offset: 24300},
			expr: &seqExpr{
				pos: position{line: 919, col: 19, offset: 24318},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 919, col: 19, offset: 24318},
						val:        "directive",
						ignoreCase: false,
						want:       "\"directive\"",
					},
					&notExpr{
						pos: position{line: 919, col: 31, offset: 24330},
						expr: &ruleRefExpr{
							pos:  position{line: 919, col: 32, offset: 24331},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OnToken",
			pos:  position{line: 920, col: 1, offset: 24340},
			expr: &seqExpr{
				pos: position{line: 920, col: 12, offset: 24351},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 920, col: 12, offset: 24351},
						val:        "on",
						ignoreCase: false,
						want:       "\"on\"",
					},
					&notExpr{
						pos: position{line: 920, col: 17, offset: 24356},
						expr: &ruleRefExpr{
							pos:  position{line: 920, col: 18, offset: 24357},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Import",
			pos:  position{line: 922, col: 1, offset: 24367},
			expr: &actionExpr{
				pos: position{line: 922, col: 11, offset: 24377},
				run: (*parser).callonImport1,
				expr: &seqExpr{
					pos: position{line: 922, col: 11, offset: 24377},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 922, col: 11, offset: 24377},
							name: "ImportToken",
						},
						&ruleRefExpr{
							pos:  position{line: 922, col: 23, offset: 24389},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 922, col: 25, offset: 24391},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 922, col: 32, offset: 24398},
								name: "ImportSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 922, col: 45, offset: 24411},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 922, col: 51, offset: 24417},
								expr: &seqExpr{
									pos: position{line: 922, col: 52, offset: 24418},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 922, col: 52, offset: 24418},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 922, col: 54, offset: 24420},
											name: "AsToken",
										},
										&ruleRefExpr{
											pos:  position{line: 922, col: 62, offset: 24428},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 922, col: 64, offset: 24430},
											label: "name",
											expr: &ruleRefExpr{
												pos:  position{line: 922, col: 69, offset: 24435},
												name: "Id",
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ImportSource",
			pos:  position{line: 936, col: 1, offset: 24711},
			expr: &choiceExpr{
				pos: position{line: 936, col: 17, offset: 24727},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 936, col: 17, offset: 24727},
						name: "DaggerKeyword",
					},
					&ruleRefExpr{
						pos:  position{line: 936, col: 33, offset: 24743},
						name: "SchemaURL",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DaggerKeyword",
			pos:  position{line: 937, col: 1, offset: 24753},
			expr: &actionExpr{
				pos: position{line: 937, col: 18, offset: 24770},
				run: (*parser).callonDaggerKeyword1,
				expr: &seqExpr{
					pos: position{line: 937, col: 18, offset: 24770},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 937, col: 18, offset: 24770},
							val:        "dagger",
							ignoreCase: false,
							want:       "\"dagger\"",
						},
						&notExpr{
							pos: position{line: 937, col: 27, offset: 24779},
							expr: &ruleRefExpr{
								pos:  position{line: 937, col: 28, offset: 24780},
								name: "WordChar",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SchemaURL",
			pos:  position{line: 940, col: 1, offset: 24816},
			expr: &actionExpr{
				pos: position{line: 940, col: 14, offset: 24829},
				run: (*parser).callonSchemaURL1,
				expr: &seqExpr{
					pos: position{line: 940, col: 14, offset: 24829},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 940, col: 14, offset: 24829},
							val:        "[a-zA-Z]",
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 940, col: 23, offset: 24838},
							expr: &charClassMatcher{
								pos:        position{line: 940, col: 23, offset: 24838},
								val:        "[a-zA-Z0-9.-/]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9', '.', '/'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ImportToken",
			pos:  position{line: 944, col: 1, offset: 24888},
			expr: &seqExpr{
				pos: position{line: 944, col: 16, offset: 24903},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 944, col: 16, offset: 24903},
						val:        "import",
						ignoreCase: false,
						want:       "\"import\"",
					},
					&notExpr{
						pos: position{line: 944, col: 25, offset: 24912},
						expr: &ruleRefExpr{
							pos:  position{line: 944, col: 26, offset: 24913},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AsToken",
			pos:  position{line: 945, col: 1, offset: 24922},
			expr: &seqExpr{
				pos: position{line: 945, col: 12, offset: 24933},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 945, col: 12, offset: 24933},
						val:        "as",
						ignoreCase: false,
						want:       "\"as\"",
					},
					&notExpr{
						pos: position{line: 945, col: 17, offset: 24938},
						expr: &ruleRefExpr{
							pos:  position{line: 945, col: 18, offset: 24939},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
	},
}

func (c *current) onDang6(e any) (any, error) {
	return e, nil
}

func (p *parser) callonDang6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDang6(stack["e"])
}

func (c *current) onDang1(eles, last any) (any, error) {
	return &ModuleBlock{
		Forms: sliceOfAppend[Node](eles, last),
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonDang1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDang1(stack["eles"], stack["last"])
}

func (c *current) onAnnotatedDecl1(docstring, decl any) (any, error) {
	switch node := decl.(type) {
	case *InterfaceDecl:
		node.DocString = docstring.(string)
		return node, nil
	case *EnumDecl:
		node.DocString = docstring.(string)
		return node, nil
	case *ScalarDecl:
		node.DocString = docstring.(string)
		return node, nil
	case *ClassDecl:
		node.DocString = docstring.(string)
		return node, nil
	case *SlotDecl:
		node.DocString = docstring.(string)
		return node, nil
	case *DirectiveDecl:
		node.DocString = docstring.(string)
		return node, nil
	default:
		return decl, nil
	}
}

func (p *parser) callonAnnotatedDecl1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnnotatedDecl1(stack["docstring"], stack["decl"])
}

func (c *current) onUnaryExpr1(expr any) (any, error) {
	return &UnaryNegation{
		Expr: expr.(Node),
		Loc:  c.Loc(),
	}, nil
}

func (p *parser) callonUnaryExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnaryExpr1(stack["expr"])
}

func (c *current) onParenForm1(expr any) (any, error) {
	return expr.(Node), nil
}

func (p *parser) callonParenForm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenForm1(stack["expr"])
}

func (c *current) onCall1(name, args any) (any, error) {
	// Symbol followed by () - create FunCall
	argRecord := Record(args.([]Keyed[Node]))
	return &FunCall{
		Fun: &Symbol{
			Name: name.(string),
			Loc:  c.Loc(),
		},
		Args: argRecord,
		Loc:  c.Loc(),
	}, nil
}

func (p *parser) callonCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCall1(stack["name"], stack["args"])
}

func (c *current) onSymbol1(name any) (any, error) {
	// Just a Symbol
	return &Symbol{
		Name:     name.(string),
		AutoCall: true,
		Loc:      c.Loc(),
	}, nil
}

func (p *parser) callonSymbol1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol1(stack["name"])
}

func (c *current) onSelectOrCall1(left, selection any) (any, error) {
	switch sel := selection.(type) {
	case *ObjectSelection:
		// Object selection: obj.{field1, field2}
		sel.Receiver = left.(Node)
		return sel, nil
	case []interface{}:
		// Regular field access with optional args
		name := sel[0].(string)
		args := sel[1]
		if args != nil {
			// Select followed by () - create FunCall
			argRecord := Record(args.([]Keyed[Node]))
			return &FunCall{
				Fun: &Select{
					Receiver: left.(Node),
					Field:    name,
					Loc:      c.Loc(),
				},
				Args: argRecord,
				Loc:  c.Loc(),
			}, nil
		} else {
			// Just a Select
			return &Select{
				Receiver: left.(Node),
				Field:    name,
				AutoCall: true,
				Loc:      c.Loc(),
			}, nil
		}
	default:
		return nil, fmt.Errorf("unexpected selection type")
	}
}

func (p *parser) callonSelectOrCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectOrCall1(stack["left"], stack["selection"])
}

func (c *current) onIndexOrCall1(left, index, args any) (any, error) {
	if args != nil {
		// Index followed by () - create FunCall
		argRecord := Record(args.([]Keyed[Node]))
		return &FunCall{
			Fun: &Index{
				Receiver: left.(Node),
				Index:    index.(Node),
				Loc:      c.Loc(),
			},
			Args: argRecord,
			Loc:  c.Loc(),
		}, nil
	} else {
		// Just an Index
		return &Index{
			Receiver: left.(Node),
			Index:    index.(Node),
			AutoCall: true,
			Loc:      c.Loc(),
		}, nil
	}
}

func (p *parser) callonIndexOrCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexOrCall1(stack["left"], stack["index"], stack["args"])
}

func (c *current) onObjectSelection7(f any) (any, error) {
	return f, nil
}

func (p *parser) callonObjectSelection7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObjectSelection7(stack["f"])
}

func (c *current) onObjectSelection1(fields, last any) (any, error) {
	return &ObjectSelection{
		Receiver: nil, // Will be set by parent SelectOrCall
		Fields:   sliceOfAppend[*FieldSelection](fields, last),
		Loc:      c.Loc(),
	}, nil
}

func (p *parser) callonObjectSelection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObjectSelection1(stack["fields"], stack["last"])
}

func (c *current) onFieldSelection1(name, args, selection any) (any, error) {
	var argRecord Record
	if args != nil {
		argRecord = Record(args.([]Keyed[Node]))
	}

	if selection != nil {
		return &FieldSelection{
			Name:      name.(string),
			Args:      argRecord,
			Selection: selection.([]interface{})[1].(*ObjectSelection),
			Loc:       c.Loc(),
		}, nil
	} else {
		return &FieldSelection{
			Name:      name.(string),
			Args:      argRecord,
			Selection: nil,
			Loc:       c.Loc(),
		}, nil
	}
}

func (p *parser) callonFieldSelection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldSelection1(stack["name"], stack["args"], stack["selection"])
}

func (c *current) onInterface1(name, block any) (any, error) {
	return &InterfaceDecl{
		Name:       name.(*Symbol),
		Value:      block.(*Block),
		Visibility: PublicVisibility,
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonInterface1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInterface1(stack["name"], stack["block"])
}

func (c *current) onClass18(i any) (any, error) {
	return i, nil
}

func (p *parser) callonClass18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClass18(stack["i"])
}

func (c *current) onClass9(first, rest any) (any, error) {
	return sliceOfAppend[*Symbol](rest, first), nil
}

func (p *parser) callonClass9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClass9(stack["first"], stack["rest"])
}

func (c *current) onClass27(app any) (any, error) {
	return app, nil
}

func (p *parser) callonClass27() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClass27(stack["app"])
}

func (c *current) onClass1(name, implements, directives, block any) (any, error) {
	var implementsList []*Symbol
	if implements != nil {
		implementsList = implements.([]*Symbol)
	}
	return &ClassDecl{
		Name:       name.(*Symbol),
		Value:      block.(*Block),
		Implements: implementsList,
		Visibility: PublicVisibility, // TODO
		Directives: sliceOf[*DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonClass1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClass1(stack["name"], stack["implements"], stack["directives"], stack["block"])
}

func (c *current) onEnum17(v any) (any, error) {
	return v, nil
}

func (p *parser) callonEnum17() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnum17(stack["v"])
}

func (c *current) onEnum11(first, rest any) (any, error) {
	return sliceOfAppend[*Symbol](rest, first), nil
}

func (p *parser) callonEnum11() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnum11(stack["first"], stack["rest"])
}

func (c *current) onEnum1(name, values any) (any, error) {
	return &EnumDecl{
		Name:       name.(*Symbol),
		Values:     values.([]*Symbol),
		Visibility: PublicVisibility,
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonEnum1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEnum1(stack["name"], stack["values"])
}

func (c *current) onScalar1(name any) (any, error) {
	return &ScalarDecl{
		Name:       name.(*Symbol),
		Visibility: PublicVisibility,
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonScalar1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onScalar1(stack["name"])
}

func (c *current) onTypeAndValueSlot20(app any) (any, error) {
	return app, nil
}

func (p *parser) callonTypeAndValueSlot20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndValueSlot20(stack["app"])
}

func (c *current) onTypeAndValueSlot1(vis, name, type_, value, directives any) (any, error) {
	return &SlotDecl{
		Name:       name.(*Symbol),
		Type_:      type_.(TypeNode),
		Value:      value.(Node),
		Visibility: vis.(Visibility),
		Directives: sliceOf[*DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonTypeAndValueSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndValueSlot1(stack["vis"], stack["name"], stack["type_"], stack["value"], stack["directives"])
}

func (c *current) onValueOnlySlot15(app any) (any, error) {
	return app, nil
}

func (p *parser) callonValueOnlySlot15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueOnlySlot15(stack["app"])
}

func (c *current) onValueOnlySlot1(vis, name, val, directives any) (any, error) {
	return &SlotDecl{
		Name:       name.(*Symbol),
		Value:      val.(Node),
		Visibility: vis.(Visibility),
		Directives: sliceOf[*DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonValueOnlySlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueOnlySlot1(stack["vis"], stack["name"], stack["val"], stack["directives"])
}

func (c *current) onTypeOnlySlot15(app any) (any, error) {
	return app, nil
}

func (p *parser) callonTypeOnlySlot15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeOnlySlot15(stack["app"])
}

func (c *current) onTypeOnlySlot1(vis, name, type_, directives any) (any, error) {
	return &SlotDecl{
		Name:       name.(*Symbol),
		Type_:      type_.(TypeNode),
		Visibility: vis.(Visibility),
		Directives: sliceOf[*DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonTypeOnlySlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeOnlySlot1(stack["vis"], stack["name"], stack["type_"], stack["directives"])
}

func (c *current) onTypeAndBlockSlot18(app any) (any, error) {
	return app, nil
}

func (p *parser) callonTypeAndBlockSlot18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndBlockSlot18(stack["app"])
}

func (c *current) onTypeAndBlockSlot1(vis, name, type_, block, directives any) (any, error) {
	return &SlotDecl{
		Name:  name.(*Symbol),
		Type_: FunTypeNode{nil, type_.(TypeNode)},
		Value: &FunDecl{
			FunctionBase: FunctionBase{
				Args: nil,
				Body: block.(*Block),
				Loc:  c.Loc(),
			},
			Named:      name.(*Symbol).Name,
			Ret:        type_.(TypeNode),
			Visibility: vis.(Visibility),
		},
		Visibility: vis.(Visibility),
		Directives: sliceOf[*DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonTypeAndBlockSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndBlockSlot1(stack["vis"], stack["name"], stack["type_"], stack["block"], stack["directives"])
}

func (c *current) onTypeAndArgsAndBlockSlot21(app any) (any, error) {
	return app, nil
}

func (p *parser) callonTypeAndArgsAndBlockSlot21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndArgsAndBlockSlot21(stack["app"])
}

func (c *current) onTypeAndArgsAndBlockSlot1(vis, name, args, type_, block, directives any) (any, error) {
	return &SlotDecl{
		Name:  name.(*Symbol),
		Type_: FunTypeNode{args.([]*SlotDecl), type_.(TypeNode)},
		Value: &FunDecl{
			FunctionBase: FunctionBase{
				Args: args.([]*SlotDecl),
				Body: block.(*Block),
				Loc:  c.Loc(),
			},
			Named:      name.(*Symbol).Name,
			Ret:        type_.(TypeNode),
			Visibility: vis.(Visibility),
		},
		Visibility: vis.(Visibility),
		Directives: sliceOf[*DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonTypeAndArgsAndBlockSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndArgsAndBlockSlot1(stack["vis"], stack["name"], stack["args"], stack["type_"], stack["block"], stack["directives"])
}

func (c *current) onAnnotatedHeaderSlot1(docstring, decl any) (any, error) {
	decl.(*SlotDecl).DocString = docstring.(string)
	return decl, nil
}

func (p *parser) callonAnnotatedHeaderSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnnotatedHeaderSlot1(stack["docstring"], stack["decl"])
}

func (c *current) onTypeAndArgsSlot18(app any) (any, error) {
	return app, nil
}

func (p *parser) callonTypeAndArgsSlot18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndArgsSlot18(stack["app"])
}

func (c *current) onTypeAndArgsSlot1(vis, name, args, type_, directives any) (any, error) {
	return &SlotDecl{
		Name:       name.(*Symbol),
		Type_:      FunTypeNode{args.([]*SlotDecl), type_.(TypeNode)},
		Visibility: vis.(Visibility),
		Directives: sliceOf[*DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonTypeAndArgsSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndArgsSlot1(stack["vis"], stack["name"], stack["args"], stack["type_"], stack["directives"])
}

func (c *current) onTypeOnlyFunSlot15(app any) (any, error) {
	return app, nil
}

func (p *parser) callonTypeOnlyFunSlot15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeOnlyFunSlot15(stack["app"])
}

func (c *current) onTypeOnlyFunSlot1(vis, name, type_, directives any) (any, error) {
	return &SlotDecl{
		Name:       name.(*Symbol),
		Type_:      FunTypeNode{nil, type_.(TypeNode)},
		Visibility: vis.(Visibility),
		Directives: sliceOf[*DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonTypeOnlyFunSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeOnlyFunSlot1(stack["vis"], stack["name"], stack["type_"], stack["directives"])
}

func (c *current) onVisibility2() (any, error) {
	return PublicVisibility, nil
}

func (p *parser) callonVisibility2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVisibility2()
}

func (c *current) onVisibility4() (any, error) {
	return PrivateVisibility, nil
}

func (p *parser) callonVisibility4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVisibility4()
}

func (c *current) onIdSymbol1(name any) (any, error) {
	return &Symbol{
		Name: name.(string),
		Loc:  c.Loc(),
	}, nil
}

func (p *parser) callonIdSymbol1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdSymbol1(stack["name"])
}

func (c *current) onWordToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonWordToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWordToken1()
}

func (c *current) onUpperToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUpperToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpperToken1()
}

func (c *current) onCapsSymbol1(name any) (any, error) {
	return &Symbol{
		Name: name.(string),
		Loc:  c.Loc(),
	}, nil
}

func (p *parser) callonCapsSymbol1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCapsSymbol1(stack["name"])
}

func (c *current) onCapsToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonCapsToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCapsToken1()
}

func (c *current) onArgValues7(a any) (any, error) {
	return a, nil
}

func (p *parser) callonArgValues7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgValues7(stack["a"])
}

func (c *current) onArgValues1(args, last any) (any, error) {
	return sliceOfAppend[Keyed[Node]](args, last), nil
}

func (p *parser) callonArgValues1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgValues1(stack["args"], stack["last"])
}

func (c *current) onArgTypes7(a any) (any, error) {
	return a, nil
}

func (p *parser) callonArgTypes7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgTypes7(stack["a"])
}

func (c *current) onArgTypes1(args, last any) (any, error) {
	return sliceOfAppend[*SlotDecl](args, last), nil
}

func (p *parser) callonArgTypes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgTypes1(stack["args"], stack["last"])
}

func (c *current) onArgType2(docstring, slot any) (any, error) {
	slotDecl := slot.(*SlotDecl)
	return &SlotDecl{
		Name:       slotDecl.Name,
		Type_:      slotDecl.Type_,
		Value:      slotDecl.Value,
		Directives: slotDecl.Directives,
		DocString:  docstring.(string),
		Loc:        slotDecl.Loc,
	}, nil
}

func (p *parser) callonArgType2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgType2(stack["docstring"], stack["slot"])
}

func (c *current) onArgType12(slot any) (any, error) {
	return slot.(*SlotDecl), nil
}

func (p *parser) callonArgType12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgType12(stack["slot"])
}

func (c *current) onArgWithDefault1(name, type_, directives, value any) (any, error) {
	return &SlotDecl{
		Name:       name.(*Symbol),
		Type_:      type_.(TypeNode),
		Directives: sliceOf[*DirectiveApplication](directives),
		Value:      value.(Node),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonArgWithDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithDefault1(stack["name"], stack["type_"], stack["directives"], stack["value"])
}

func (c *current) onArgWithBlockDefault1(name, type_, directives, block any) (any, error) {
	return &SlotDecl{
		Name:       name.(*Symbol),
		Type_:      type_.(TypeNode),
		Directives: sliceOf[*DirectiveApplication](directives),
		Value:      block.(*Block),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonArgWithBlockDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithBlockDefault1(stack["name"], stack["type_"], stack["directives"], stack["block"])
}

func (c *current) onArgWithType1(name, type_, directives any) (any, error) {
	return &SlotDecl{
		Name:       name.(*Symbol),
		Type_:      type_.(TypeNode),
		Directives: sliceOf[*DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonArgWithType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithType1(stack["name"], stack["type_"], stack["directives"])
}

func (c *current) onKeyValue1(key, value any) (any, error) {
	return Keyed[Node]{Key: key.(string), Value: value.(Node), Positional: false}, nil
}

func (p *parser) callonKeyValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyValue1(stack["key"], stack["value"])
}

func (c *current) onPositionalValue1(value any) (any, error) {
	return Keyed[Node]{Key: "", Value: value.(Node), Positional: true}, nil
}

func (p *parser) callonPositionalValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedType1(name any) (any, error) {
	return &NamedTypeNode{name.(string), c.Loc()}, nil
}

func (p *parser) callonNamedType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedType1(stack["name"])
}

func (c *current) onListType1(inner any) (any, error) {
	return ListTypeNode{inner.(TypeNode)}, nil
}

func (p *parser) callonListType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListType1(stack["inner"])
}

func (c *current) onObjectType7(f any) (any, error) {
	return f, nil
}

func (p *parser) callonObjectType7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObjectType7(stack["f"])
}

func (c *current) onObjectType1(fields, last any) (any, error) {
	return ObjectTypeNode{
		Fields: sliceOfAppend[ObjectTypeField](fields, last),
	}, nil
}

func (p *parser) callonObjectType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObjectType1(stack["fields"], stack["last"])
}

func (c *current) onObjectTypeField1(key, type_ any) (any, error) {
	return ObjectTypeField{
		Key:  key.(string),
		Type: type_.(TypeNode),
	}, nil
}

func (p *parser) callonObjectTypeField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObjectTypeField1(stack["key"], stack["type_"])
}

func (c *current) onNonNull1(inner any) (any, error) {
	return NonNullTypeNode{inner.(TypeNode)}, nil
}

func (p *parser) callonNonNull1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonNull1(stack["inner"])
}

func (c *current) onTypeVariable1(v any) (any, error) {
	return VariableTypeNode{v.([]byte)[0]}, nil
}

func (p *parser) callonTypeVariable1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeVariable1(stack["v"])
}

func (c *current) onDefaultExpr2(left, right any) (any, error) {
	return &Default{
		Left:  left.(Node),
		Right: right.(Node),
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonDefaultExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultExpr2(stack["left"], stack["right"])
}

func (c *current) onEqualityExpr2(left, op, right any) (any, error) {
	switch op.(string) {
	case "==":
		return &Equality{
			Left:  left.(Node),
			Right: right.(Node),
			Loc:   c.Loc(),
		}, nil
	case "!=":
		return NewInequality(left.(Node), right.(Node), c.Loc()), nil
	default:
		return nil, fmt.Errorf("unknown equality operator: %s", op.(string))
	}
}

func (p *parser) callonEqualityExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityExpr2(stack["left"], stack["op"], stack["right"])
}

func (c *current) onEqualityOp2() (any, error) {
	return "==", nil
}

func (p *parser) callonEqualityOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOp2()
}

func (c *current) onEqualityOp4() (any, error) {
	return "!=", nil
}

func (p *parser) callonEqualityOp4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOp4()
}

func (c *current) onRelationalExpr2(left, op, right any) (any, error) {
	switch op.(string) {
	case "<":
		return NewLessThan(left.(Node), right.(Node), c.Loc()), nil
	case "<=":
		return NewLessThanEqual(left.(Node), right.(Node), c.Loc()), nil
	case ">":
		return NewGreaterThan(left.(Node), right.(Node), c.Loc()), nil
	case ">=":
		return NewGreaterThanEqual(left.(Node), right.(Node), c.Loc()), nil
	default:
		return nil, fmt.Errorf("unknown relational operator: %s", op.(string))
	}
}

func (p *parser) callonRelationalExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelationalExpr2(stack["left"], stack["op"], stack["right"])
}

func (c *current) onRelationalOp2() (any, error) {
	return "<=", nil
}

func (p *parser) callonRelationalOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelationalOp2()
}

func (c *current) onRelationalOp4() (any, error) {
	return ">=", nil
}

func (p *parser) callonRelationalOp4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelationalOp4()
}

func (c *current) onRelationalOp6() (any, error) {
	return "<", nil
}

func (p *parser) callonRelationalOp6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelationalOp6()
}

func (c *current) onRelationalOp8() (any, error) {
	return ">", nil
}

func (p *parser) callonRelationalOp8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelationalOp8()
}

func (c *current) onAdditiveExpr2(left, op, right any) (any, error) {
	switch op.(string) {
	case "+":
		return NewAddition(left.(Node), right.(Node), c.Loc()), nil
	case "-":
		return NewSubtraction(left.(Node), right.(Node), c.Loc()), nil
	default:
		return nil, fmt.Errorf("unknown additive operator: %s", op.(string))
	}
}

func (p *parser) callonAdditiveExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr2(stack["left"], stack["op"], stack["right"])
}

func (c *current) onAdditiveOp2() (any, error) {
	return "+", nil
}

func (p *parser) callonAdditiveOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOp2()
}

func (c *current) onAdditiveOp4() (any, error) {
	return "-", nil
}

func (p *parser) callonAdditiveOp4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOp4()
}

func (c *current) onMultiplicativeExpr1(left, op, right any) (any, error) {
	switch op.(string) {
	case "*":
		return NewMultiplication(left.(Node), right.(Node), c.Loc()), nil
	case "/":
		return NewDivision(left.(Node), right.(Node), c.Loc()), nil
	case "%":
		return NewModulo(left.(Node), right.(Node), c.Loc()), nil
	default:
		return nil, fmt.Errorf("unknown multiplicative operator: %s", op.(string))
	}
}

func (p *parser) callonMultiplicativeExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onMultiplicativeOp2() (any, error) {
	return "*", nil
}

func (p *parser) callonMultiplicativeOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOp2()
}

func (c *current) onMultiplicativeOp4() (any, error) {
	return "/", nil
}

func (p *parser) callonMultiplicativeOp4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOp4()
}

func (c *current) onMultiplicativeOp6() (any, error) {
	return "%", nil
}

func (p *parser) callonMultiplicativeOp6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOp6()
}

func (c *current) onList7(e any) (any, error) {
	return e, nil
}

func (p *parser) callonList7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onList7(stack["e"])
}

func (c *current) onList1(eles, last any) (any, error) {
	return &List{
		Elements: sliceOfAppend[Node](eles, last),
		Loc:      c.Loc(),
	}, nil
}

func (p *parser) callonList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onList1(stack["eles"], stack["last"])
}

func (c *current) onObject7(v any) (any, error) {
	return v, nil
}

func (p *parser) callonObject7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObject7(stack["v"])
}

func (c *current) onObject1(vals, last any) (any, error) {
	var slots []*SlotDecl
	for _, kv := range sliceOfAppend[Keyed[Node]](vals, last) {
		slots = append(slots, &SlotDecl{
			Name: &Symbol{
				Name: kv.Key,
				Loc:  kv.Value.GetSourceLocation(),
			},
			Value: kv.Value,
			Loc:   kv.Value.GetSourceLocation(),
		})
	}
	return &Object{
		Slots: slots,
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonObject1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObject1(stack["vals"], stack["last"])
}

func (c *current) onBlock7(e any) (any, error) {
	return e, nil
}

func (p *parser) callonBlock7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock7(stack["e"])
}

func (c *current) onBlock1(eles, last any) (any, error) {
	return &Block{
		Forms: sliceOfAppend[Node](eles, last),
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock1(stack["eles"], stack["last"])
}

func (c *current) onHeadersBlock7(e any) (any, error) {
	return e, nil
}

func (p *parser) callonHeadersBlock7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadersBlock7(stack["e"])
}

func (c *current) onHeadersBlock1(eles, last any) (any, error) {
	return &Block{
		Forms: sliceOfAppend[Node](eles, last),
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonHeadersBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onHeadersBlock1(stack["eles"], stack["last"])
}

func (c *current) onFloat1() (any, error) {
	value, err := strconv.ParseFloat(string(c.text), 64)
	if err != nil {
		return nil, err
	}
	return &Float{
		Value: value,
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonFloat1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFloat1()
}

func (c *current) onInt1() (any, error) {
	value, err := strconv.ParseInt(string(c.text), 10, 64)
	if err != nil {
		return nil, err
	}
	return &Int{
		Value: value,
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonInt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInt1()
}

func (c *current) onTripleQuoteString2(content any) (any, error) {
	return &String{
		Value: normalizeTripleQuoteString(content.([]byte)),
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonTripleQuoteString2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTripleQuoteString2(stack["content"])
}

func (c *current) onTripleQuoteString8() (any, error) {
	return &String{
		Value: "",
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonTripleQuoteString8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTripleQuoteString8()
}

func (c *current) onImmediateTripleQuoteStringContent1() (any, error) {
	return c.text, nil
}

func (p *parser) callonImmediateTripleQuoteStringContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImmediateTripleQuoteStringContent1()
}

func (c *current) onString1() (any, error) {
	c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
	value, err := strconv.Unquote(string(c.text))
	if err != nil {
		return nil, err
	}
	return &String{
		Value: value,
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1()
}

func (c *current) onDocString2(content any) (any, error) {
	return normalizeDocString(content.([]byte)), nil
}

func (p *parser) callonDocString2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocString2(stack["content"])
}

func (c *current) onDocString8() (any, error) {
	return "", nil
}

func (p *parser) callonDocString8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocString8()
}

func (c *current) onQuoted1(quoter, raw any) (any, error) {
	return &Quoted{
		Quoter: quoter.(string),
		Raw:    raw.(string),
	}, nil
}

func (p *parser) callonQuoted1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoted1(stack["quoter"], stack["raw"])
}

func (c *current) onQuotedRawToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonQuotedRawToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedRawToken1()
}

func (c *current) onBoolean2() (any, error) {
	return &Boolean{
		Value: true,
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonBoolean2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean2()
}

func (c *current) onBoolean4() (any, error) {
	return &Boolean{
		Value: false,
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonBoolean4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean4()
}

func (c *current) onNull1() (any, error) {
	return &Null{
		Loc: c.Loc(),
	}, nil
}

func (p *parser) callonNull1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNull1()
}

func (c *current) onConditional1(cond, block, else_ any) (any, error) {
	return &Conditional{
		Condition: cond.(Node),
		Then:      block.(*Block),
		Else:      else_,
		Loc:       c.Loc(),
	}, nil
}

func (p *parser) callonConditional1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditional1(stack["cond"], stack["block"], stack["else_"])
}

func (c *current) onElseClause2(elseif any) (any, error) {
	// else if - wrap the conditional in a block
	return &Block{
		Forms: []Node{elseif.(Node)},
		Loc:   elseif.(Node).GetSourceLocation(),
	}, nil
}

func (p *parser) callonElseClause2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseClause2(stack["elseif"])
}

func (c *current) onElseClause9(block any) (any, error) {
	return block.(*Block), nil
}

func (p *parser) callonElseClause9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseClause9(stack["block"])
}

func (c *current) onForSingleVarLoop1(variable, typeAnnotation, iterable, body any) (any, error) {
	var varType TypeNode
	if typeAnnotation != nil {
		varType = typeAnnotation.([]interface{})[2].(TypeNode)
	}
	return &ForLoop{
		Variable: variable.(string),
		Type:     varType,
		Iterable: iterable.(Node),
		LoopBody: body.(*Block),
		Loc:      c.Loc(),
	}, nil
}

func (p *parser) callonForSingleVarLoop1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForSingleVarLoop1(stack["variable"], stack["typeAnnotation"], stack["iterable"], stack["body"])
}

func (c *current) onForTwoVarLoop1(key, value, iterable, body any) (any, error) {
	return &ForLoop{
		KeyVariable:   key.(string),
		ValueVariable: value.(string),
		Iterable:      iterable.(Node),
		LoopBody:      body.(*Block),
		Loc:           c.Loc(),
	}, nil
}

func (p *parser) callonForTwoVarLoop1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForTwoVarLoop1(stack["key"], stack["value"], stack["iterable"], stack["body"])
}

func (c *current) onForConditionLoop1(cond, body any) (any, error) {
	return &ForLoop{
		Condition: cond.(Node),
		LoopBody:  body.(*Block),
		Loc:       c.Loc(),
	}, nil
}

func (p *parser) callonForConditionLoop1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForConditionLoop1(stack["cond"], stack["body"])
}

func (c *current) onForInfiniteLoop1(body any) (any, error) {
	return &ForLoop{
		LoopBody: body.(*Block),
		Loc:      c.Loc(),
	}, nil
}

func (p *parser) callonForInfiniteLoop1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onForInfiniteLoop1(stack["body"])
}

func (c *current) onLambda1(args, expr any) (any, error) {
	return &Lambda{
		FunctionBase: FunctionBase{
			Args: args.([]*SlotDecl),
			Body: expr.(Node),
			Loc:  c.Loc(),
		},
	}, nil
}

func (p *parser) callonLambda1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambda1(stack["args"], stack["expr"])
}

func (c *current) onLambdaArgs8(a any) (any, error) {
	return a, nil
}

func (p *parser) callonLambdaArgs8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaArgs8(stack["a"])
}

func (c *current) onLambdaArgs2(args, last any) (any, error) {
	return sliceOfAppend[*SlotDecl](args, last), nil
}

func (p *parser) callonLambdaArgs2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaArgs2(stack["args"], stack["last"])
}

func (c *current) onLambdaArgs18(arg any) (any, error) {
	return []*SlotDecl{arg.(*SlotDecl)}, nil
}

func (p *parser) callonLambdaArgs18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaArgs18(stack["arg"])
}

func (c *current) onArgWithoutType1(name any) (any, error) {
	return &SlotDecl{
		Name: name.(*Symbol),
		Loc:  c.Loc(),
	}, nil
}

func (p *parser) callonArgWithoutType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithoutType1(stack["name"])
}

func (c *current) onMatch14(m any) (any, error) {
	return m, nil
}

func (p *parser) callonMatch14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatch14(stack["m"])
}

func (c *current) onMatch1(expr, cs, last any) (any, error) {
	return &Match{
		Expr:  expr.(Node),
		Cases: sliceOfAppend[*MatchCase](cs, last),
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonMatch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatch1(stack["expr"], stack["cs"], stack["last"])
}

func (c *current) onMatchCase1(pattern, expr any) (any, error) {
	return &MatchCase{
		Pattern: pattern.(Pattern),
		Expr:    expr.(Node),
		Loc:     c.Loc(),
	}, nil
}

func (p *parser) callonMatchCase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchCase1(stack["pattern"], stack["expr"])
}

func (c *current) onWildcardPattern1() (any, error) {
	return WildcardPattern{}, nil
}

func (p *parser) callonWildcardPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWildcardPattern1()
}

func (c *current) onLiteralPattern1(lit any) (any, error) {
	return LiteralPattern{Value: lit.(Node)}, nil
}

func (p *parser) callonLiteralPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralPattern1(stack["lit"])
}

func (c *current) onConstructorPattern1(name, args any) (any, error) {
	var patterns []Pattern
	if args != nil {
		patterns = args.([]Pattern)
	}
	return ConstructorPattern{
		Name: name.(string),
		Args: patterns,
	}, nil
}

func (p *parser) callonConstructorPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstructorPattern1(stack["name"], stack["args"])
}

func (c *current) onPatternArgs7(p any) (any, error) {
	return p, nil
}

func (p *parser) callonPatternArgs7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternArgs7(stack["p"])
}

func (c *current) onPatternArgs1(patterns, last any) (any, error) {
	return sliceOfAppend[Pattern](patterns, last), nil
}

func (p *parser) callonPatternArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternArgs1(stack["patterns"], stack["last"])
}

func (c *current) onVariablePattern1(name any) (any, error) {
	return VariablePattern{Name: name.(string)}, nil
}

func (p *parser) callonVariablePattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariablePattern1(stack["name"])
}

func (c *current) onAssert1(message, block any) (any, error) {
	var msg Node
	if message != nil {
		msg = message.(Node)
	}
	return &Assert{
		Message: msg,
		Block:   block.(*Block),
		Loc:     c.Loc(),
	}, nil
}

func (p *parser) callonAssert1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssert1(stack["message"], stack["block"])
}

func (c *current) onMessageArgs1(msg any) (any, error) {
	return msg, nil
}

func (p *parser) callonMessageArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMessageArgs1(stack["msg"])
}

func (c *current) onBreak1() (any, error) {
	return &Break{
		Loc: c.Loc(),
	}, nil
}

func (p *parser) callonBreak1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBreak1()
}

func (c *current) onContinue1() (any, error) {
	return &Continue{
		Loc: c.Loc(),
	}, nil
}

func (p *parser) callonContinue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onContinue1()
}

func (c *current) onReassignment1(target, op, value any) (any, error) {
	return &Reassignment{
		Target:   target.(Node),
		Modifier: op.(string),
		Value:    value.(Node),
		Loc:      c.Loc(),
	}, nil
}

func (p *parser) callonReassignment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReassignment1(stack["target"], stack["op"], stack["value"])
}

func (c *current) onAssignOp2() (any, error) {
	return "+", nil
}

func (p *parser) callonAssignOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignOp2()
}

func (c *current) onAssignOp4() (any, error) {
	return "=", nil
}

func (p *parser) callonAssignOp4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignOp4()
}

func (c *current) onTypeHint1(expr, type_ any) (any, error) {
	return &TypeHint{
		Expr: expr.(Node),
		Type: type_.(TypeNode),
		Loc:  c.Loc(),
	}, nil
}

func (p *parser) callonTypeHint1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeHint1(stack["expr"], stack["type_"])
}

func (c *current) onReopen1(name, b any) (any, error) {
	return &Reopen{
		Name:  name.(string),
		Block: b.(*Block),
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonReopen1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReopen1(stack["name"], stack["b"])
}

func (c *current) onDirectiveDecl1(name, args, locations any) (any, error) {
	var argTypes []*SlotDecl
	if args != nil {
		argTypes = args.([]*SlotDecl)
	}
	return &DirectiveDecl{
		Name:      name.(string),
		Args:      argTypes,
		Locations: locations.([]DirectiveLocation),
		Loc:       c.Loc(),
	}, nil
}

func (p *parser) callonDirectiveDecl1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveDecl1(stack["name"], stack["args"], stack["locations"])
}

func (c *current) onDirectiveApplication1(name, args any) (any, error) {
	var argValues []Keyed[Node]
	if args != nil {
		argValues = args.([]Keyed[Node])
	}
	return &DirectiveApplication{
		Name: name.(string),
		Args: argValues,
		Loc:  c.Loc(),
	}, nil
}

func (p *parser) callonDirectiveApplication1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveApplication1(stack["name"], stack["args"])
}

func (c *current) onDirectiveLocations7(loc any) (any, error) {
	return loc, nil
}

func (p *parser) callonDirectiveLocations7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveLocations7(stack["loc"])
}

func (c *current) onDirectiveLocations1(first, rest any) (any, error) {
	return sliceOfAppend[DirectiveLocation](rest, first), nil
}

func (p *parser) callonDirectiveLocations1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveLocations1(stack["first"], stack["rest"])
}

func (c *current) onDirectiveLocation1(name any) (any, error) {
	return DirectiveLocation{Name: name.(string)}, nil
}

func (p *parser) callonDirectiveLocation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveLocation1(stack["name"])
}

func (c *current) onDirectiveName1(name any) (any, error) {
	return name.(string), nil
}

func (p *parser) callonDirectiveName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveName1(stack["name"])
}

func (c *current) onImport1(source, alias any) (any, error) {
	var aliasStr *string
	if alias != nil {
		// alias is [_, "as", _, string]
		aliasValue := alias.([]interface{})[3].(string)
		aliasStr = &aliasValue
	}
	return &ImportDecl{
		Source: source.(string),
		Alias:  aliasStr,
		Loc:    c.Loc(),
	}, nil
}

func (p *parser) callonImport1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImport1(stack["source"], stack["alias"])
}

func (c *current) onDaggerKeyword1() (any, error) {
	return "dagger", nil
}

func (p *parser) callonDaggerKeyword1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDaggerKeyword1()
}

func (c *current) onSchemaURL1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSchemaURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSchemaURL1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any

	leader        bool
	leftRecursive bool
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type ruleWithExpsStack struct {
	rule   *rule
	estack []any
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleRecursiveLeader(rule *rule) (any, bool) {
	result, ok := p.getMemoized(rule)
	if ok {
		p.restore(result.end)
		return result.v, result.b
	}

	if p.debug {
		defer p.out(p.in("recursive " + rule.name))
	}

	var (
		depth      = 0
		startMark  = p.pt
		lastResult = resultTuple{nil, false, startMark}
		lastErrors = *p.errs
	)

	for {
		lastState := p.cloneState()
		p.setMemoized(startMark, rule, lastResult)
		val, ok := p.parseRule(rule)
		endMark := p.pt
		if p.debug {
			p.printIndent("RECURSIVE", fmt.Sprintf(
				"Rule %s depth %d: %t -> %s",
				rule.name, depth, ok, string(p.sliceFrom(startMark))))
		}
		if (!ok) || (endMark.offset <= lastResult.end.offset && depth != 0) {
			p.restoreState(lastState)
			*p.errs = lastErrors
			break
		}
		lastResult = resultTuple{val, ok, endMark}
		lastErrors = *p.errs
		p.restore(startMark)
		depth++
	}

	p.restore(lastResult.end)
	p.setMemoized(startMark, rule, lastResult)
	return lastResult.v, lastResult.b
}

func (p *parser) parseRuleRecursiveNoLeader(rule *rule) (any, bool) {
	return p.parseRule(rule)
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize || rule.leftRecursive {
		if rule.leader {
			val, ok = p.parseRuleRecursiveLeader(rule)
		} else if p.memoize && !rule.leftRecursive {
			val, ok = p.parseRuleMemoize(rule)
		} else {
			val, ok = p.parseRuleRecursiveNoLeader(rule)
		}
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	isLeftRecursion := p.rstack[len(p.rstack)-1].leftRecursive
	if p.memoize && !isLeftRecursion {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize && !isLeftRecursion {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
