// Code generated by pigeon; DO NOT EDIT.

package dang

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Dang",
			pos:  position{line: 11, col: 1, offset: 72},
			expr: &actionExpr{
				pos: position{line: 11, col: 9, offset: 80},
				run: (*parser).callonDang1,
				expr: &seqExpr{
					pos: position{line: 11, col: 9, offset: 80},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 11, col: 9, offset: 80},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 11, col: 11, offset: 82},
							label: "eles",
							expr: &zeroOrMoreExpr{
								pos: position{line: 11, col: 16, offset: 87},
								expr: &actionExpr{
									pos: position{line: 11, col: 17, offset: 88},
									run: (*parser).callonDang6,
									expr: &seqExpr{
										pos: position{line: 11, col: 17, offset: 88},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 11, col: 17, offset: 88},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 11, col: 19, offset: 90},
													name: "Expr",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 11, col: 24, offset: 95},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 11, col: 48, offset: 119},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 11, col: 53, offset: 124},
								expr: &ruleRefExpr{
									pos:  position{line: 11, col: 53, offset: 124},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 11, col: 59, offset: 130},
							name: "_",
						},
						&notExpr{
							pos: position{line: 11, col: 61, offset: 132},
							expr: &anyMatcher{
								line: 11, col: 62, offset: 133,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 18, col: 1, offset: 227},
			expr: &zeroOrMoreExpr{
				pos: position{line: 18, col: 19, offset: 245},
				expr: &choiceExpr{
					pos: position{line: 18, col: 20, offset: 246},
					alternatives: []any{
						&charClassMatcher{
							pos:        position{line: 18, col: 20, offset: 246},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
						&ruleRefExpr{
							pos:  position{line: 18, col: 32, offset: 258},
							name: "CommentToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "_lineSpace",
			pos:  position{line: 19, col: 1, offset: 273},
			expr: &seqExpr{
				pos: position{line: 19, col: 15, offset: 287},
				exprs: []any{
					&zeroOrMoreExpr{
						pos: position{line: 19, col: 15, offset: 287},
						expr: &charClassMatcher{
							pos:        position{line: 19, col: 15, offset: 287},
							val:        "[ \\t]",
							chars:      []rune{' ', '\t'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&zeroOrOneExpr{
						pos: position{line: 19, col: 22, offset: 294},
						expr: &ruleRefExpr{
							pos:  position{line: 19, col: 22, offset: 294},
							name: "CommentToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Sep",
			pos:  position{line: 21, col: 1, offset: 309},
			expr: &seqExpr{
				pos: position{line: 21, col: 8, offset: 316},
				exprs: []any{
					&choiceExpr{
						pos: position{line: 21, col: 9, offset: 317},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 21, col: 9, offset: 317},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 21, col: 9, offset: 317},
										name: "_",
									},
									&ruleRefExpr{
										pos:  position{line: 21, col: 11, offset: 319},
										name: "CommaToken",
									},
								},
							},
							&seqExpr{
								pos: position{line: 21, col: 24, offset: 332},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 21, col: 24, offset: 332},
										name: "_lineSpace",
									},
									&litMatcher{
										pos:        position{line: 21, col: 35, offset: 343},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 21, col: 41, offset: 349},
						name: "_",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CommaToken",
			pos:  position{line: 22, col: 1, offset: 351},
			expr: &litMatcher{
				pos:        position{line: 22, col: 15, offset: 365},
				val:        ",",
				ignoreCase: false,
				want:       "\",\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Expr",
			pos:  position{line: 24, col: 1, offset: 370},
			expr: &choiceExpr{
				pos: position{line: 24, col: 9, offset: 378},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 24, col: 9, offset: 378},
						name: "Import",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 18, offset: 387},
						name: "AnnotatedDecl",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 34, offset: 403},
						name: "Class",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 42, offset: 411},
						name: "Slot",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 49, offset: 418},
						name: "DirectiveDecl",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 65, offset: 434},
						name: "Reassignment",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 80, offset: 449},
						name: "Form",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AnnotatedDecl",
			pos:  position{line: 26, col: 1, offset: 455},
			expr: &actionExpr{
				pos: position{line: 26, col: 18, offset: 472},
				run: (*parser).callonAnnotatedDecl1,
				expr: &seqExpr{
					pos: position{line: 26, col: 18, offset: 472},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 26, col: 18, offset: 472},
							label: "docstring",
							expr: &ruleRefExpr{
								pos:  position{line: 26, col: 28, offset: 482},
								name: "DocString",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 26, col: 38, offset: 492},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 26, col: 40, offset: 494},
							label: "decl",
							expr: &choiceExpr{
								pos: position{line: 26, col: 46, offset: 500},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 26, col: 46, offset: 500},
										name: "Class",
									},
									&ruleRefExpr{
										pos:  position{line: 26, col: 54, offset: 508},
										name: "Slot",
									},
									&ruleRefExpr{
										pos:  position{line: 26, col: 61, offset: 515},
										name: "DirectiveDecl",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Form",
			pos:  position{line: 42, col: 1, offset: 844},
			expr: &choiceExpr{
				pos: position{line: 42, col: 9, offset: 852},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 42, col: 9, offset: 852},
						name: "Conditional",
					},
					&ruleRefExpr{
						pos:  position{line: 42, col: 23, offset: 866},
						name: "While",
					},
					&ruleRefExpr{
						pos:  position{line: 42, col: 31, offset: 874},
						name: "Lambda",
					},
					&ruleRefExpr{
						pos:  position{line: 42, col: 40, offset: 883},
						name: "Match",
					},
					&ruleRefExpr{
						pos:  position{line: 42, col: 48, offset: 891},
						name: "Assert",
					},
					&ruleRefExpr{
						pos:  position{line: 42, col: 57, offset: 900},
						name: "DefaultExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 42, col: 71, offset: 914},
						name: "TypeHint",
					},
					&ruleRefExpr{
						pos:  position{line: 42, col: 82, offset: 925},
						name: "Term",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Term",
			pos:  position{line: 44, col: 1, offset: 931},
			expr: &choiceExpr{
				pos: position{line: 44, col: 9, offset: 939},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 44, col: 9, offset: 939},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 19, offset: 949},
						name: "IndexOrCall",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 33, offset: 963},
						name: "SelectOrCall",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 48, offset: 978},
						name: "List",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 55, offset: 985},
						name: "Object",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 64, offset: 994},
						name: "Block",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 72, offset: 1002},
						name: "ParenForm",
					},
					&ruleRefExpr{
						pos:  position{line: 44, col: 84, offset: 1014},
						name: "SymbolOrCall",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "ParenForm",
			pos:  position{line: 46, col: 1, offset: 1028},
			expr: &actionExpr{
				pos: position{line: 46, col: 14, offset: 1041},
				run: (*parser).callonParenForm1,
				expr: &seqExpr{
					pos: position{line: 46, col: 14, offset: 1041},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 46, col: 14, offset: 1041},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 46, col: 18, offset: 1045},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 46, col: 20, offset: 1047},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 46, col: 25, offset: 1052},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 46, col: 30, offset: 1057},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 46, col: 32, offset: 1059},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SymbolOrCall",
			pos:  position{line: 51, col: 1, offset: 1135},
			expr: &choiceExpr{
				pos: position{line: 51, col: 17, offset: 1151},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 51, col: 17, offset: 1151},
						name: "Call",
					},
					&ruleRefExpr{
						pos:  position{line: 51, col: 24, offset: 1158},
						name: "Symbol",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Call",
			pos:  position{line: 52, col: 1, offset: 1165},
			expr: &actionExpr{
				pos: position{line: 52, col: 9, offset: 1173},
				run: (*parser).callonCall1,
				expr: &seqExpr{
					pos: position{line: 52, col: 9, offset: 1173},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 52, col: 9, offset: 1173},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 52, col: 14, offset: 1178},
								name: "Id",
							},
						},
						&labeledExpr{
							pos:   position{line: 52, col: 17, offset: 1181},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 52, col: 22, offset: 1186},
								name: "ArgValues",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Symbol",
			pos:  position{line: 64, col: 1, offset: 1425},
			expr: &actionExpr{
				pos: position{line: 64, col: 11, offset: 1435},
				run: (*parser).callonSymbol1,
				expr: &labeledExpr{
					pos:   position{line: 64, col: 11, offset: 1435},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 64, col: 16, offset: 1440},
						name: "Id",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SelectOrCall",
			pos:  position{line: 74, col: 1, offset: 1617},
			expr: &actionExpr{
				pos: position{line: 74, col: 17, offset: 1633},
				run: (*parser).callonSelectOrCall1,
				expr: &seqExpr{
					pos: position{line: 74, col: 17, offset: 1633},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 74, col: 17, offset: 1633},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 74, col: 22, offset: 1638},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 74, col: 27, offset: 1643},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 74, col: 29, offset: 1645},
							name: "DotToken",
						},
						&ruleRefExpr{
							pos:  position{line: 74, col: 38, offset: 1654},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 74, col: 40, offset: 1656},
							label: "selection",
							expr: &choiceExpr{
								pos: position{line: 74, col: 51, offset: 1667},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 74, col: 51, offset: 1667},
										name: "ObjectSelection",
									},
									&seqExpr{
										pos: position{line: 74, col: 69, offset: 1685},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 74, col: 69, offset: 1685},
												label: "name",
												expr: &ruleRefExpr{
													pos:  position{line: 74, col: 74, offset: 1690},
													name: "Id",
												},
											},
											&labeledExpr{
												pos:   position{line: 74, col: 77, offset: 1693},
												label: "args",
												expr: &zeroOrOneExpr{
													pos: position{line: 74, col: 82, offset: 1698},
													expr: &ruleRefExpr{
														pos:  position{line: 74, col: 82, offset: 1698},
														name: "ArgValues",
													},
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "IndexOrCall",
			pos:  position{line: 111, col: 1, offset: 2603},
			expr: &actionExpr{
				pos: position{line: 111, col: 16, offset: 2618},
				run: (*parser).callonIndexOrCall1,
				expr: &seqExpr{
					pos: position{line: 111, col: 16, offset: 2618},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 111, col: 16, offset: 2618},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 21, offset: 2623},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 111, col: 26, offset: 2628},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 111, col: 28, offset: 2630},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 111, col: 32, offset: 2634},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 111, col: 34, offset: 2636},
							label: "index",
							expr: &ruleRefExpr{
								pos:  position{line: 111, col: 40, offset: 2642},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 111, col: 45, offset: 2647},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 111, col: 47, offset: 2649},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
						&labeledExpr{
							pos:   position{line: 111, col: 51, offset: 2653},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 111, col: 56, offset: 2658},
								expr: &ruleRefExpr{
									pos:  position{line: 111, col: 56, offset: 2658},
									name: "ArgValues",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "ObjectSelection",
			pos:  position{line: 135, col: 1, offset: 3147},
			expr: &actionExpr{
				pos: position{line: 135, col: 20, offset: 3166},
				run: (*parser).callonObjectSelection1,
				expr: &seqExpr{
					pos: position{line: 135, col: 20, offset: 3166},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 135, col: 20, offset: 3166},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 135, col: 24, offset: 3170},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 135, col: 26, offset: 3172},
							label: "fields",
							expr: &zeroOrMoreExpr{
								pos: position{line: 135, col: 33, offset: 3179},
								expr: &actionExpr{
									pos: position{line: 135, col: 34, offset: 3180},
									run: (*parser).callonObjectSelection7,
									expr: &seqExpr{
										pos: position{line: 135, col: 34, offset: 3180},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 135, col: 34, offset: 3180},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 135, col: 36, offset: 3182},
													name: "FieldSelection",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 135, col: 51, offset: 3197},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 135, col: 75, offset: 3221},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 135, col: 80, offset: 3226},
								expr: &ruleRefExpr{
									pos:  position{line: 135, col: 80, offset: 3226},
									name: "FieldSelection",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 135, col: 96, offset: 3242},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 135, col: 98, offset: 3244},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FieldSelection",
			pos:  position{line: 143, col: 1, offset: 3421},
			expr: &actionExpr{
				pos: position{line: 143, col: 19, offset: 3439},
				run: (*parser).callonFieldSelection1,
				expr: &seqExpr{
					pos: position{line: 143, col: 19, offset: 3439},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 143, col: 19, offset: 3439},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 143, col: 24, offset: 3444},
								name: "Id",
							},
						},
						&labeledExpr{
							pos:   position{line: 143, col: 27, offset: 3447},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 143, col: 32, offset: 3452},
								expr: &ruleRefExpr{
									pos:  position{line: 143, col: 32, offset: 3452},
									name: "ArgValues",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 143, col: 43, offset: 3463},
							label: "selection",
							expr: &zeroOrOneExpr{
								pos: position{line: 143, col: 53, offset: 3473},
								expr: &seqExpr{
									pos: position{line: 143, col: 54, offset: 3474},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 143, col: 54, offset: 3474},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
										&labeledExpr{
											pos:   position{line: 143, col: 58, offset: 3478},
											label: "sel",
											expr: &ruleRefExpr{
												pos:  position{line: 143, col: 62, offset: 3482},
												name: "ObjectSelection",
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Class",
			pos:  position{line: 166, col: 1, offset: 3940},
			expr: &actionExpr{
				pos: position{line: 166, col: 10, offset: 3949},
				run: (*parser).callonClass1,
				expr: &seqExpr{
					pos: position{line: 166, col: 10, offset: 3949},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 166, col: 10, offset: 3949},
							name: "TypeToken",
						},
						&ruleRefExpr{
							pos:  position{line: 166, col: 20, offset: 3959},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 166, col: 22, offset: 3961},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 27, offset: 3966},
								name: "Id",
							},
						},
						&labeledExpr{
							pos:   position{line: 166, col: 30, offset: 3969},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 166, col: 41, offset: 3980},
								expr: &actionExpr{
									pos: position{line: 166, col: 42, offset: 3981},
									run: (*parser).callonClass9,
									expr: &seqExpr{
										pos: position{line: 166, col: 42, offset: 3981},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 166, col: 42, offset: 3981},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 166, col: 44, offset: 3983},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 166, col: 48, offset: 3987},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 166, col: 91, offset: 4030},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 166, col: 93, offset: 4032},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 99, offset: 4038},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeToken",
			pos:  position{line: 175, col: 1, offset: 4249},
			expr: &seqExpr{
				pos: position{line: 175, col: 14, offset: 4262},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 175, col: 14, offset: 4262},
						val:        "type",
						ignoreCase: false,
						want:       "\"type\"",
					},
					&notExpr{
						pos: position{line: 175, col: 21, offset: 4269},
						expr: &ruleRefExpr{
							pos:  position{line: 175, col: 22, offset: 4270},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Slot",
			pos:  position{line: 177, col: 1, offset: 4280},
			expr: &choiceExpr{
				pos: position{line: 177, col: 9, offset: 4288},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 177, col: 9, offset: 4288},
						name: "TypeAndArgsAndBlockSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 178, col: 9, offset: 4357},
						name: "TypeAndBlockSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 179, col: 9, offset: 4491},
						name: "TypeAndValueSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 180, col: 9, offset: 4630},
						name: "ValueOnlySlot",
					},
					&ruleRefExpr{
						pos:  position{line: 181, col: 9, offset: 4724},
						name: "TypeOnlySlot",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeAndValueSlot",
			pos:  position{line: 183, col: 1, offset: 4812},
			expr: &actionExpr{
				pos: position{line: 183, col: 21, offset: 4832},
				run: (*parser).callonTypeAndValueSlot1,
				expr: &seqExpr{
					pos: position{line: 183, col: 21, offset: 4832},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 183, col: 21, offset: 4832},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 25, offset: 4836},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 183, col: 36, offset: 4847},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 183, col: 38, offset: 4849},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 43, offset: 4854},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 183, col: 46, offset: 4857},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 183, col: 48, offset: 4859},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 183, col: 59, offset: 4870},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 183, col: 61, offset: 4872},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 67, offset: 4878},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 183, col: 72, offset: 4883},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 183, col: 74, offset: 4885},
							name: "EqualToken",
						},
						&ruleRefExpr{
							pos:  position{line: 183, col: 85, offset: 4896},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 183, col: 87, offset: 4898},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 183, col: 93, offset: 4904},
								name: "Form",
							},
						},
						&labeledExpr{
							pos:   position{line: 183, col: 98, offset: 4909},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 183, col: 109, offset: 4920},
								expr: &actionExpr{
									pos: position{line: 183, col: 110, offset: 4921},
									run: (*parser).callonTypeAndValueSlot20,
									expr: &seqExpr{
										pos: position{line: 183, col: 110, offset: 4921},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 183, col: 110, offset: 4921},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 183, col: 112, offset: 4923},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 183, col: 116, offset: 4927},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ValueOnlySlot",
			pos:  position{line: 194, col: 1, offset: 5194},
			expr: &actionExpr{
				pos: position{line: 194, col: 18, offset: 5211},
				run: (*parser).callonValueOnlySlot1,
				expr: &seqExpr{
					pos: position{line: 194, col: 18, offset: 5211},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 194, col: 18, offset: 5211},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 22, offset: 5215},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 194, col: 33, offset: 5226},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 194, col: 35, offset: 5228},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 40, offset: 5233},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 194, col: 43, offset: 5236},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 194, col: 45, offset: 5238},
							name: "EqualToken",
						},
						&ruleRefExpr{
							pos:  position{line: 194, col: 56, offset: 5249},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 194, col: 58, offset: 5251},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 194, col: 62, offset: 5255},
								name: "Form",
							},
						},
						&labeledExpr{
							pos:   position{line: 194, col: 67, offset: 5260},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 194, col: 78, offset: 5271},
								expr: &actionExpr{
									pos: position{line: 194, col: 79, offset: 5272},
									run: (*parser).callonValueOnlySlot15,
									expr: &seqExpr{
										pos: position{line: 194, col: 79, offset: 5272},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 194, col: 79, offset: 5272},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 194, col: 81, offset: 5274},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 194, col: 85, offset: 5278},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeOnlySlot",
			pos:  position{line: 204, col: 1, offset: 5514},
			expr: &actionExpr{
				pos: position{line: 204, col: 17, offset: 5530},
				run: (*parser).callonTypeOnlySlot1,
				expr: &seqExpr{
					pos: position{line: 204, col: 17, offset: 5530},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 204, col: 17, offset: 5530},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 204, col: 21, offset: 5534},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 204, col: 32, offset: 5545},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 204, col: 34, offset: 5547},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 204, col: 39, offset: 5552},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 204, col: 42, offset: 5555},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 204, col: 44, offset: 5557},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 204, col: 55, offset: 5568},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 204, col: 57, offset: 5570},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 204, col: 63, offset: 5576},
								name: "Type",
							},
						},
						&labeledExpr{
							pos:   position{line: 204, col: 68, offset: 5581},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 204, col: 79, offset: 5592},
								expr: &actionExpr{
									pos: position{line: 204, col: 80, offset: 5593},
									run: (*parser).callonTypeOnlySlot15,
									expr: &seqExpr{
										pos: position{line: 204, col: 80, offset: 5593},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 204, col: 80, offset: 5593},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 204, col: 82, offset: 5595},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 204, col: 86, offset: 5599},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeAndBlockSlot",
			pos:  position{line: 214, col: 1, offset: 5841},
			expr: &actionExpr{
				pos: position{line: 214, col: 21, offset: 5861},
				run: (*parser).callonTypeAndBlockSlot1,
				expr: &seqExpr{
					pos: position{line: 214, col: 21, offset: 5861},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 214, col: 21, offset: 5861},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 214, col: 25, offset: 5865},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 214, col: 36, offset: 5876},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 38, offset: 5878},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 214, col: 43, offset: 5883},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 214, col: 46, offset: 5886},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 214, col: 48, offset: 5888},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 214, col: 59, offset: 5899},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 61, offset: 5901},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 214, col: 67, offset: 5907},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 214, col: 72, offset: 5912},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 74, offset: 5914},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 214, col: 80, offset: 5920},
								name: "Block",
							},
						},
						&labeledExpr{
							pos:   position{line: 214, col: 86, offset: 5926},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 214, col: 97, offset: 5937},
								expr: &actionExpr{
									pos: position{line: 214, col: 98, offset: 5938},
									run: (*parser).callonTypeAndBlockSlot18,
									expr: &seqExpr{
										pos: position{line: 214, col: 98, offset: 5938},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 214, col: 98, offset: 5938},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 214, col: 100, offset: 5940},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 214, col: 104, offset: 5944},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeAndArgsAndBlockSlot",
			pos:  position{line: 234, col: 1, offset: 6438},
			expr: &actionExpr{
				pos: position{line: 234, col: 28, offset: 6465},
				run: (*parser).callonTypeAndArgsAndBlockSlot1,
				expr: &seqExpr{
					pos: position{line: 234, col: 28, offset: 6465},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 234, col: 28, offset: 6465},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 32, offset: 6469},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 234, col: 43, offset: 6480},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 234, col: 45, offset: 6482},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 50, offset: 6487},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 234, col: 53, offset: 6490},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 234, col: 55, offset: 6492},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 60, offset: 6497},
								name: "ArgTypes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 234, col: 69, offset: 6506},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 234, col: 71, offset: 6508},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 234, col: 82, offset: 6519},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 234, col: 84, offset: 6521},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 90, offset: 6527},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 234, col: 95, offset: 6532},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 234, col: 97, offset: 6534},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 234, col: 103, offset: 6540},
								name: "Block",
							},
						},
						&labeledExpr{
							pos:   position{line: 234, col: 109, offset: 6546},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 234, col: 120, offset: 6557},
								expr: &actionExpr{
									pos: position{line: 234, col: 121, offset: 6558},
									run: (*parser).callonTypeAndArgsAndBlockSlot21,
									expr: &seqExpr{
										pos: position{line: 234, col: 121, offset: 6558},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 234, col: 121, offset: 6558},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 234, col: 123, offset: 6560},
												label: "app",
												expr: &ruleRefExpr{
													pos:  position{line: 234, col: 127, offset: 6564},
													name: "DirectiveApplication",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Visibility",
			pos:  position{line: 254, col: 1, offset: 7086},
			expr: &choiceExpr{
				pos: position{line: 254, col: 15, offset: 7100},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 254, col: 15, offset: 7100},
						run: (*parser).callonVisibility2,
						expr: &ruleRefExpr{
							pos:  position{line: 254, col: 15, offset: 7100},
							name: "PubToken",
						},
					},
					&actionExpr{
						pos: position{line: 255, col: 15, offset: 7156},
						run: (*parser).callonVisibility4,
						expr: &ruleRefExpr{
							pos:  position{line: 255, col: 15, offset: 7156},
							name: "LetToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PubToken",
			pos:  position{line: 256, col: 1, offset: 7199},
			expr: &seqExpr{
				pos: position{line: 256, col: 13, offset: 7211},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 256, col: 13, offset: 7211},
						val:        "pub",
						ignoreCase: false,
						want:       "\"pub\"",
					},
					&notExpr{
						pos: position{line: 256, col: 19, offset: 7217},
						expr: &ruleRefExpr{
							pos:  position{line: 256, col: 20, offset: 7218},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LetToken",
			pos:  position{line: 257, col: 1, offset: 7227},
			expr: &seqExpr{
				pos: position{line: 257, col: 13, offset: 7239},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 257, col: 13, offset: 7239},
						val:        "let",
						ignoreCase: false,
						want:       "\"let\"",
					},
					&notExpr{
						pos: position{line: 257, col: 19, offset: 7245},
						expr: &ruleRefExpr{
							pos:  position{line: 257, col: 20, offset: 7246},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Id",
			pos:  position{line: 259, col: 1, offset: 7256},
			expr: &ruleRefExpr{
				pos:  position{line: 259, col: 7, offset: 7262},
				name: "WordToken",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WordToken",
			pos:  position{line: 260, col: 1, offset: 7272},
			expr: &actionExpr{
				pos: position{line: 260, col: 14, offset: 7285},
				run: (*parser).callonWordToken1,
				expr: &seqExpr{
					pos: position{line: 260, col: 14, offset: 7285},
					exprs: []any{
						&notExpr{
							pos: position{line: 260, col: 14, offset: 7285},
							expr: &ruleRefExpr{
								pos:  position{line: 260, col: 15, offset: 7286},
								name: "NullToken",
							},
						},
						&charClassMatcher{
							pos:        position{line: 260, col: 25, offset: 7296},
							val:        "[a-zA-Z_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 260, col: 34, offset: 7305},
							expr: &charClassMatcher{
								pos:        position{line: 260, col: 34, offset: 7305},
								val:        "[a-zA-Z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WordChar",
			pos:  position{line: 263, col: 1, offset: 7352},
			expr: &charClassMatcher{
				pos:        position{line: 263, col: 13, offset: 7364},
				val:        "[a-zA-Z0-9_]",
				chars:      []rune{'_'},
				ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UpperId",
			pos:  position{line: 264, col: 1, offset: 7377},
			expr: &ruleRefExpr{
				pos:  position{line: 264, col: 12, offset: 7388},
				name: "UpperToken",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UpperToken",
			pos:  position{line: 265, col: 1, offset: 7399},
			expr: &actionExpr{
				pos: position{line: 265, col: 15, offset: 7413},
				run: (*parser).callonUpperToken1,
				expr: &seqExpr{
					pos: position{line: 265, col: 15, offset: 7413},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 265, col: 15, offset: 7413},
							val:        "[A-Z]",
							ranges:     []rune{'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 265, col: 20, offset: 7418},
							expr: &charClassMatcher{
								pos:        position{line: 265, col: 20, offset: 7418},
								val:        "[a-zA-Z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgValues",
			pos:  position{line: 269, col: 1, offset: 7466},
			expr: &actionExpr{
				pos: position{line: 269, col: 14, offset: 7479},
				run: (*parser).callonArgValues1,
				expr: &seqExpr{
					pos: position{line: 269, col: 14, offset: 7479},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 269, col: 14, offset: 7479},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 269, col: 18, offset: 7483},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 269, col: 20, offset: 7485},
							label: "args",
							expr: &zeroOrMoreExpr{
								pos: position{line: 269, col: 25, offset: 7490},
								expr: &actionExpr{
									pos: position{line: 269, col: 26, offset: 7491},
									run: (*parser).callonArgValues7,
									expr: &seqExpr{
										pos: position{line: 269, col: 26, offset: 7491},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 269, col: 26, offset: 7491},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 269, col: 28, offset: 7493},
													name: "Argument",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 269, col: 37, offset: 7502},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 269, col: 61, offset: 7526},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 269, col: 66, offset: 7531},
								expr: &ruleRefExpr{
									pos:  position{line: 269, col: 66, offset: 7531},
									name: "Argument",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 269, col: 76, offset: 7541},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 269, col: 78, offset: 7543},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgTypes",
			pos:  position{line: 272, col: 1, offset: 7604},
			expr: &actionExpr{
				pos: position{line: 272, col: 13, offset: 7616},
				run: (*parser).callonArgTypes1,
				expr: &seqExpr{
					pos: position{line: 272, col: 13, offset: 7616},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 272, col: 13, offset: 7616},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 272, col: 17, offset: 7620},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 272, col: 19, offset: 7622},
							label: "args",
							expr: &zeroOrMoreExpr{
								pos: position{line: 272, col: 24, offset: 7627},
								expr: &actionExpr{
									pos: position{line: 272, col: 25, offset: 7628},
									run: (*parser).callonArgTypes7,
									expr: &seqExpr{
										pos: position{line: 272, col: 25, offset: 7628},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 272, col: 25, offset: 7628},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 272, col: 27, offset: 7630},
													name: "ArgType",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 272, col: 35, offset: 7638},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 272, col: 59, offset: 7662},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 272, col: 64, offset: 7667},
								expr: &ruleRefExpr{
									pos:  position{line: 272, col: 64, offset: 7667},
									name: "ArgType",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 272, col: 73, offset: 7676},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 272, col: 75, offset: 7678},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgType",
			pos:  position{line: 275, col: 1, offset: 7736},
			expr: &choiceExpr{
				pos: position{line: 275, col: 12, offset: 7747},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 275, col: 12, offset: 7747},
						run: (*parser).callonArgType2,
						expr: &seqExpr{
							pos: position{line: 275, col: 12, offset: 7747},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 275, col: 12, offset: 7747},
									label: "docstring",
									expr: &ruleRefExpr{
										pos:  position{line: 275, col: 22, offset: 7757},
										name: "DocString",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 275, col: 32, offset: 7767},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 275, col: 34, offset: 7769},
									label: "slot",
									expr: &choiceExpr{
										pos: position{line: 275, col: 40, offset: 7775},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 275, col: 40, offset: 7775},
												name: "ArgWithDefault",
											},
											&ruleRefExpr{
												pos:  position{line: 275, col: 57, offset: 7792},
												name: "ArgWithBlockDefault",
											},
											&ruleRefExpr{
												pos:  position{line: 275, col: 79, offset: 7814},
												name: "ArgWithType",
											},
										},
									},
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 285, col: 5, offset: 8067},
						run: (*parser).callonArgType12,
						expr: &labeledExpr{
							pos:   position{line: 285, col: 5, offset: 8067},
							label: "slot",
							expr: &choiceExpr{
								pos: position{line: 285, col: 11, offset: 8073},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 285, col: 11, offset: 8073},
										name: "ArgWithDefault",
									},
									&ruleRefExpr{
										pos:  position{line: 285, col: 28, offset: 8090},
										name: "ArgWithBlockDefault",
									},
									&ruleRefExpr{
										pos:  position{line: 285, col: 50, offset: 8112},
										name: "ArgWithType",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithDefault",
			pos:  position{line: 288, col: 1, offset: 8159},
			expr: &actionExpr{
				pos: position{line: 288, col: 19, offset: 8177},
				run: (*parser).callonArgWithDefault1,
				expr: &seqExpr{
					pos: position{line: 288, col: 19, offset: 8177},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 288, col: 19, offset: 8177},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 24, offset: 8182},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 288, col: 27, offset: 8185},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 288, col: 29, offset: 8187},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 288, col: 40, offset: 8198},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 288, col: 42, offset: 8200},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 48, offset: 8206},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 288, col: 53, offset: 8211},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 288, col: 55, offset: 8213},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 288, col: 66, offset: 8224},
								expr: &ruleRefExpr{
									pos:  position{line: 288, col: 66, offset: 8224},
									name: "DirectiveApplication",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 288, col: 88, offset: 8246},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 288, col: 90, offset: 8248},
							name: "EqualToken",
						},
						&ruleRefExpr{
							pos:  position{line: 288, col: 101, offset: 8259},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 288, col: 103, offset: 8261},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 288, col: 109, offset: 8267},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithBlockDefault",
			pos:  position{line: 297, col: 1, offset: 8461},
			expr: &actionExpr{
				pos: position{line: 297, col: 24, offset: 8484},
				run: (*parser).callonArgWithBlockDefault1,
				expr: &seqExpr{
					pos: position{line: 297, col: 24, offset: 8484},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 297, col: 24, offset: 8484},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 29, offset: 8489},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 32, offset: 8492},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 34, offset: 8494},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 45, offset: 8505},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 297, col: 47, offset: 8507},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 53, offset: 8513},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 58, offset: 8518},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 297, col: 60, offset: 8520},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 297, col: 71, offset: 8531},
								expr: &ruleRefExpr{
									pos:  position{line: 297, col: 71, offset: 8531},
									name: "DirectiveApplication",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 297, col: 93, offset: 8553},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 297, col: 95, offset: 8555},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 297, col: 101, offset: 8561},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithType",
			pos:  position{line: 306, col: 1, offset: 8757},
			expr: &actionExpr{
				pos: position{line: 306, col: 16, offset: 8772},
				run: (*parser).callonArgWithType1,
				expr: &seqExpr{
					pos: position{line: 306, col: 16, offset: 8772},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 306, col: 16, offset: 8772},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 21, offset: 8777},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 24, offset: 8780},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 26, offset: 8782},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 37, offset: 8793},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 306, col: 39, offset: 8795},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 306, col: 45, offset: 8801},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 306, col: 50, offset: 8806},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 306, col: 52, offset: 8808},
							label: "directives",
							expr: &zeroOrMoreExpr{
								pos: position{line: 306, col: 63, offset: 8819},
								expr: &ruleRefExpr{
									pos:  position{line: 306, col: 63, offset: 8819},
									name: "DirectiveApplication",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Argument",
			pos:  position{line: 315, col: 1, offset: 9006},
			expr: &choiceExpr{
				pos: position{line: 315, col: 13, offset: 9018},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 315, col: 13, offset: 9018},
						name: "KeyValue",
					},
					&ruleRefExpr{
						pos:  position{line: 315, col: 24, offset: 9029},
						name: "PositionalValue",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "KeyValue",
			pos:  position{line: 317, col: 1, offset: 9046},
			expr: &actionExpr{
				pos: position{line: 317, col: 13, offset: 9058},
				run: (*parser).callonKeyValue1,
				expr: &seqExpr{
					pos: position{line: 317, col: 13, offset: 9058},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 317, col: 13, offset: 9058},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 317, col: 17, offset: 9062},
								name: "WordToken",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 317, col: 27, offset: 9072},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 317, col: 38, offset: 9083},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 317, col: 40, offset: 9085},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 317, col: 46, offset: 9091},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PositionalValue",
			pos:  position{line: 321, col: 1, offset: 9186},
			expr: &actionExpr{
				pos: position{line: 321, col: 20, offset: 9205},
				run: (*parser).callonPositionalValue1,
				expr: &labeledExpr{
					pos:   position{line: 321, col: 20, offset: 9205},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 321, col: 26, offset: 9211},
						name: "Form",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ColonToken",
			pos:  position{line: 324, col: 1, offset: 9294},
			expr: &litMatcher{
				pos:        position{line: 324, col: 15, offset: 9308},
				val:        ":",
				ignoreCase: false,
				want:       "\":\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Type",
			pos:  position{line: 326, col: 1, offset: 9313},
			expr: &choiceExpr{
				pos: position{line: 326, col: 9, offset: 9321},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 326, col: 9, offset: 9321},
						name: "NonNull",
					},
					&ruleRefExpr{
						pos:  position{line: 326, col: 19, offset: 9331},
						name: "NamedType",
					},
					&ruleRefExpr{
						pos:  position{line: 326, col: 31, offset: 9343},
						name: "ListType",
					},
					&ruleRefExpr{
						pos:  position{line: 326, col: 42, offset: 9354},
						name: "ObjectType",
					},
					&ruleRefExpr{
						pos:  position{line: 326, col: 55, offset: 9367},
						name: "TypeVariable",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "NamedType",
			pos:  position{line: 327, col: 1, offset: 9380},
			expr: &actionExpr{
				pos: position{line: 327, col: 14, offset: 9393},
				run: (*parser).callonNamedType1,
				expr: &labeledExpr{
					pos:   position{line: 327, col: 14, offset: 9393},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 327, col: 19, offset: 9398},
						name: "UpperId",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ListType",
			pos:  position{line: 330, col: 1, offset: 9453},
			expr: &actionExpr{
				pos: position{line: 330, col: 13, offset: 9465},
				run: (*parser).callonListType1,
				expr: &seqExpr{
					pos: position{line: 330, col: 13, offset: 9465},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 330, col: 13, offset: 9465},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 330, col: 17, offset: 9469},
							label: "inner",
							expr: &ruleRefExpr{
								pos:  position{line: 330, col: 23, offset: 9475},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 330, col: 28, offset: 9480},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ObjectType",
			pos:  position{line: 333, col: 1, offset: 9533},
			expr: &actionExpr{
				pos: position{line: 333, col: 15, offset: 9547},
				run: (*parser).callonObjectType1,
				expr: &seqExpr{
					pos: position{line: 333, col: 15, offset: 9547},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 333, col: 15, offset: 9547},
							val:        "{{",
							ignoreCase: false,
							want:       "\"{{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 333, col: 20, offset: 9552},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 333, col: 22, offset: 9554},
							label: "fields",
							expr: &zeroOrMoreExpr{
								pos: position{line: 333, col: 29, offset: 9561},
								expr: &actionExpr{
									pos: position{line: 333, col: 30, offset: 9562},
									run: (*parser).callonObjectType7,
									expr: &seqExpr{
										pos: position{line: 333, col: 30, offset: 9562},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 333, col: 30, offset: 9562},
												label: "f",
												expr: &ruleRefExpr{
													pos:  position{line: 333, col: 32, offset: 9564},
													name: "ObjectTypeField",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 333, col: 48, offset: 9580},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 333, col: 72, offset: 9604},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 333, col: 77, offset: 9609},
								expr: &ruleRefExpr{
									pos:  position{line: 333, col: 77, offset: 9609},
									name: "ObjectTypeField",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 333, col: 94, offset: 9626},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 333, col: 96, offset: 9628},
							val:        "}}",
							ignoreCase: false,
							want:       "\"}}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ObjectTypeField",
			pos:  position{line: 338, col: 1, offset: 9729},
			expr: &actionExpr{
				pos: position{line: 338, col: 20, offset: 9748},
				run: (*parser).callonObjectTypeField1,
				expr: &seqExpr{
					pos: position{line: 338, col: 20, offset: 9748},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 338, col: 20, offset: 9748},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 24, offset: 9752},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 338, col: 27, offset: 9755},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 338, col: 29, offset: 9757},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 338, col: 40, offset: 9768},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 338, col: 42, offset: 9770},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 338, col: 48, offset: 9776},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NonNull",
			pos:  position{line: 344, col: 1, offset: 9871},
			expr: &actionExpr{
				pos: position{line: 344, col: 12, offset: 9882},
				run: (*parser).callonNonNull1,
				expr: &seqExpr{
					pos: position{line: 344, col: 12, offset: 9882},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 344, col: 12, offset: 9882},
							label: "inner",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 18, offset: 9888},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 344, col: 23, offset: 9893},
							name: "BangToken",
						},
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "TypeVariable",
			pos:  position{line: 347, col: 1, offset: 9955},
			expr: &actionExpr{
				pos: position{line: 347, col: 17, offset: 9971},
				run: (*parser).callonTypeVariable1,
				expr: &labeledExpr{
					pos:   position{line: 347, col: 17, offset: 9971},
					label: "v",
					expr: &charClassMatcher{
						pos:        position{line: 347, col: 19, offset: 9973},
						val:        "[a-z]",
						ranges:     []rune{'a', 'z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "BangToken",
			pos:  position{line: 351, col: 1, offset: 10030},
			expr: &litMatcher{
				pos:        position{line: 351, col: 14, offset: 10043},
				val:        "!",
				ignoreCase: false,
				want:       "\"!\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DefaultExpr",
			pos:  position{line: 354, col: 1, offset: 10092},
			expr: &choiceExpr{
				pos: position{line: 354, col: 16, offset: 10107},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 354, col: 16, offset: 10107},
						run: (*parser).callonDefaultExpr2,
						expr: &seqExpr{
							pos: position{line: 354, col: 16, offset: 10107},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 354, col: 16, offset: 10107},
									label: "left",
									expr: &choiceExpr{
										pos: position{line: 354, col: 22, offset: 10113},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 354, col: 22, offset: 10113},
												name: "EqualityExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 354, col: 37, offset: 10128},
												name: "Term",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 354, col: 43, offset: 10134},
									name: "_",
								},
								&ruleRefExpr{
									pos:  position{line: 354, col: 45, offset: 10136},
									name: "InterroToken",
								},
								&ruleRefExpr{
									pos:  position{line: 354, col: 58, offset: 10149},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 354, col: 60, offset: 10151},
									label: "right",
									expr: &choiceExpr{
										pos: position{line: 354, col: 67, offset: 10158},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 354, col: 67, offset: 10158},
												name: "DefaultExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 354, col: 81, offset: 10172},
												name: "Term",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 360, col: 5, offset: 10277},
						name: "EqualityExpr",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EqualityExpr",
			pos:  position{line: 362, col: 1, offset: 10291},
			expr: &choiceExpr{
				pos: position{line: 362, col: 17, offset: 10307},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 362, col: 17, offset: 10307},
						run: (*parser).callonEqualityExpr2,
						expr: &seqExpr{
							pos: position{line: 362, col: 17, offset: 10307},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 362, col: 17, offset: 10307},
									label: "left",
									expr: &choiceExpr{
										pos: position{line: 362, col: 23, offset: 10313},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 362, col: 23, offset: 10313},
												name: "EqualityExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 362, col: 38, offset: 10328},
												name: "Term",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 362, col: 44, offset: 10334},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 362, col: 46, offset: 10336},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 362, col: 49, offset: 10339},
										name: "EqualityOp",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 362, col: 60, offset: 10350},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 362, col: 62, offset: 10352},
									label: "right",
									expr: &choiceExpr{
										pos: position{line: 362, col: 69, offset: 10359},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 362, col: 69, offset: 10359},
												name: "RelationalExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 362, col: 86, offset: 10376},
												name: "Term",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 375, col: 5, offset: 10695},
						name: "RelationalExpr",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "EqualityOp",
			pos:  position{line: 377, col: 1, offset: 10711},
			expr: &choiceExpr{
				pos: position{line: 377, col: 15, offset: 10725},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 377, col: 15, offset: 10725},
						run: (*parser).callonEqualityOp2,
						expr: &litMatcher{
							pos:        position{line: 377, col: 15, offset: 10725},
							val:        "==",
							ignoreCase: false,
							want:       "\"==\"",
						},
					},
					&actionExpr{
						pos: position{line: 377, col: 43, offset: 10753},
						run: (*parser).callonEqualityOp4,
						expr: &litMatcher{
							pos:        position{line: 377, col: 43, offset: 10753},
							val:        "!=",
							ignoreCase: false,
							want:       "\"!=\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "RelationalExpr",
			pos:  position{line: 379, col: 1, offset: 10780},
			expr: &choiceExpr{
				pos: position{line: 379, col: 19, offset: 10798},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 379, col: 19, offset: 10798},
						run: (*parser).callonRelationalExpr2,
						expr: &seqExpr{
							pos: position{line: 379, col: 19, offset: 10798},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 379, col: 19, offset: 10798},
									label: "left",
									expr: &choiceExpr{
										pos: position{line: 379, col: 25, offset: 10804},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 379, col: 25, offset: 10804},
												name: "RelationalExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 379, col: 42, offset: 10821},
												name: "Term",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 379, col: 48, offset: 10827},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 379, col: 50, offset: 10829},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 379, col: 53, offset: 10832},
										name: "RelationalOp",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 379, col: 66, offset: 10845},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 379, col: 68, offset: 10847},
									label: "right",
									expr: &choiceExpr{
										pos: position{line: 379, col: 75, offset: 10854},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 379, col: 75, offset: 10854},
												name: "AdditiveExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 379, col: 90, offset: 10869},
												name: "Term",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 392, col: 5, offset: 11316},
						name: "AdditiveExpr",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "RelationalOp",
			pos:  position{line: 394, col: 1, offset: 11330},
			expr: &choiceExpr{
				pos: position{line: 394, col: 17, offset: 11346},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 394, col: 17, offset: 11346},
						run: (*parser).callonRelationalOp2,
						expr: &litMatcher{
							pos:        position{line: 394, col: 17, offset: 11346},
							val:        "<=",
							ignoreCase: false,
							want:       "\"<=\"",
						},
					},
					&actionExpr{
						pos: position{line: 394, col: 45, offset: 11374},
						run: (*parser).callonRelationalOp4,
						expr: &litMatcher{
							pos:        position{line: 394, col: 45, offset: 11374},
							val:        ">=",
							ignoreCase: false,
							want:       "\">=\"",
						},
					},
					&actionExpr{
						pos: position{line: 394, col: 73, offset: 11402},
						run: (*parser).callonRelationalOp6,
						expr: &litMatcher{
							pos:        position{line: 394, col: 73, offset: 11402},
							val:        "<",
							ignoreCase: false,
							want:       "\"<\"",
						},
					},
					&actionExpr{
						pos: position{line: 394, col: 99, offset: 11428},
						run: (*parser).callonRelationalOp8,
						expr: &litMatcher{
							pos:        position{line: 394, col: 99, offset: 11428},
							val:        ">",
							ignoreCase: false,
							want:       "\">\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AdditiveExpr",
			pos:  position{line: 396, col: 1, offset: 11453},
			expr: &choiceExpr{
				pos: position{line: 396, col: 17, offset: 11469},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 396, col: 17, offset: 11469},
						run: (*parser).callonAdditiveExpr2,
						expr: &seqExpr{
							pos: position{line: 396, col: 17, offset: 11469},
							exprs: []any{
								&labeledExpr{
									pos:   position{line: 396, col: 17, offset: 11469},
									label: "left",
									expr: &choiceExpr{
										pos: position{line: 396, col: 23, offset: 11475},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 396, col: 23, offset: 11475},
												name: "AdditiveExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 396, col: 38, offset: 11490},
												name: "Term",
											},
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 396, col: 44, offset: 11496},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 396, col: 46, offset: 11498},
									label: "op",
									expr: &ruleRefExpr{
										pos:  position{line: 396, col: 49, offset: 11501},
										name: "AdditiveOp",
									},
								},
								&ruleRefExpr{
									pos:  position{line: 396, col: 60, offset: 11512},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 396, col: 62, offset: 11514},
									label: "right",
									expr: &choiceExpr{
										pos: position{line: 396, col: 69, offset: 11521},
										alternatives: []any{
											&ruleRefExpr{
												pos:  position{line: 396, col: 69, offset: 11521},
												name: "MultiplicativeExpr",
											},
											&ruleRefExpr{
												pos:  position{line: 396, col: 90, offset: 11542},
												name: "Term",
											},
										},
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 405, col: 5, offset: 11820},
						name: "MultiplicativeExpr",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "AdditiveOp",
			pos:  position{line: 407, col: 1, offset: 11840},
			expr: &choiceExpr{
				pos: position{line: 407, col: 15, offset: 11854},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 407, col: 15, offset: 11854},
						run: (*parser).callonAdditiveOp2,
						expr: &litMatcher{
							pos:        position{line: 407, col: 15, offset: 11854},
							val:        "+",
							ignoreCase: false,
							want:       "\"+\"",
						},
					},
					&actionExpr{
						pos: position{line: 407, col: 41, offset: 11880},
						run: (*parser).callonAdditiveOp4,
						expr: &litMatcher{
							pos:        position{line: 407, col: 41, offset: 11880},
							val:        "-",
							ignoreCase: false,
							want:       "\"-\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MultiplicativeExpr",
			pos:  position{line: 409, col: 1, offset: 11905},
			expr: &actionExpr{
				pos: position{line: 409, col: 23, offset: 11927},
				run: (*parser).callonMultiplicativeExpr1,
				expr: &seqExpr{
					pos: position{line: 409, col: 23, offset: 11927},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 409, col: 23, offset: 11927},
							label: "left",
							expr: &choiceExpr{
								pos: position{line: 409, col: 29, offset: 11933},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 409, col: 29, offset: 11933},
										name: "MultiplicativeExpr",
									},
									&ruleRefExpr{
										pos:  position{line: 409, col: 50, offset: 11954},
										name: "Term",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 409, col: 56, offset: 11960},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 409, col: 58, offset: 11962},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 409, col: 61, offset: 11965},
								name: "MultiplicativeOp",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 409, col: 78, offset: 11982},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 409, col: 80, offset: 11984},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 409, col: 86, offset: 11990},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "MultiplicativeOp",
			pos:  position{line: 422, col: 1, offset: 12349},
			expr: &choiceExpr{
				pos: position{line: 422, col: 21, offset: 12369},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 422, col: 21, offset: 12369},
						run: (*parser).callonMultiplicativeOp2,
						expr: &litMatcher{
							pos:        position{line: 422, col: 21, offset: 12369},
							val:        "*",
							ignoreCase: false,
							want:       "\"*\"",
						},
					},
					&actionExpr{
						pos: position{line: 422, col: 47, offset: 12395},
						run: (*parser).callonMultiplicativeOp4,
						expr: &litMatcher{
							pos:        position{line: 422, col: 47, offset: 12395},
							val:        "/",
							ignoreCase: false,
							want:       "\"/\"",
						},
					},
					&actionExpr{
						pos: position{line: 422, col: 73, offset: 12421},
						run: (*parser).callonMultiplicativeOp6,
						expr: &litMatcher{
							pos:        position{line: 422, col: 73, offset: 12421},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "InterroToken",
			pos:  position{line: 424, col: 1, offset: 12446},
			expr: &litMatcher{
				pos:        position{line: 424, col: 17, offset: 12462},
				val:        "?",
				ignoreCase: false,
				want:       "\"?\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ReopenToken",
			pos:  position{line: 425, col: 1, offset: 12466},
			expr: &litMatcher{
				pos:        position{line: 425, col: 16, offset: 12481},
				val:        "<<",
				ignoreCase: false,
				want:       "\"<<\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DotToken",
			pos:  position{line: 427, col: 1, offset: 12487},
			expr: &litMatcher{
				pos:        position{line: 427, col: 13, offset: 12499},
				val:        ".",
				ignoreCase: false,
				want:       "\".\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "List",
			pos:  position{line: 429, col: 1, offset: 12504},
			expr: &actionExpr{
				pos: position{line: 429, col: 9, offset: 12512},
				run: (*parser).callonList1,
				expr: &seqExpr{
					pos: position{line: 429, col: 9, offset: 12512},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 429, col: 9, offset: 12512},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 429, col: 13, offset: 12516},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 429, col: 15, offset: 12518},
							label: "eles",
							expr: &zeroOrMoreExpr{
								pos: position{line: 429, col: 20, offset: 12523},
								expr: &actionExpr{
									pos: position{line: 429, col: 21, offset: 12524},
									run: (*parser).callonList7,
									expr: &seqExpr{
										pos: position{line: 429, col: 21, offset: 12524},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 429, col: 21, offset: 12524},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 429, col: 23, offset: 12526},
													name: "Form",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 429, col: 28, offset: 12531},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 429, col: 52, offset: 12555},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 429, col: 57, offset: 12560},
								expr: &ruleRefExpr{
									pos:  position{line: 429, col: 57, offset: 12560},
									name: "Form",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 429, col: 63, offset: 12566},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 429, col: 65, offset: 12568},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Object",
			pos:  position{line: 436, col: 1, offset: 12666},
			expr: &actionExpr{
				pos: position{line: 436, col: 11, offset: 12676},
				run: (*parser).callonObject1,
				expr: &seqExpr{
					pos: position{line: 436, col: 11, offset: 12676},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 436, col: 11, offset: 12676},
							val:        "{{",
							ignoreCase: false,
							want:       "\"{{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 436, col: 16, offset: 12681},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 436, col: 18, offset: 12683},
							label: "vals",
							expr: &zeroOrMoreExpr{
								pos: position{line: 436, col: 23, offset: 12688},
								expr: &actionExpr{
									pos: position{line: 436, col: 24, offset: 12689},
									run: (*parser).callonObject7,
									expr: &seqExpr{
										pos: position{line: 436, col: 24, offset: 12689},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 436, col: 24, offset: 12689},
												label: "v",
												expr: &ruleRefExpr{
													pos:  position{line: 436, col: 26, offset: 12691},
													name: "KeyValue",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 436, col: 35, offset: 12700},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 436, col: 59, offset: 12724},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 436, col: 64, offset: 12729},
								expr: &ruleRefExpr{
									pos:  position{line: 436, col: 64, offset: 12729},
									name: "KeyValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 436, col: 74, offset: 12739},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 436, col: 76, offset: 12741},
							val:        "}}",
							ignoreCase: false,
							want:       "\"}}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Block",
			pos:  position{line: 451, col: 1, offset: 13031},
			expr: &actionExpr{
				pos: position{line: 451, col: 10, offset: 13040},
				run: (*parser).callonBlock1,
				expr: &seqExpr{
					pos: position{line: 451, col: 10, offset: 13040},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 451, col: 10, offset: 13040},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 451, col: 14, offset: 13044},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 451, col: 16, offset: 13046},
							label: "eles",
							expr: &zeroOrMoreExpr{
								pos: position{line: 451, col: 21, offset: 13051},
								expr: &actionExpr{
									pos: position{line: 451, col: 22, offset: 13052},
									run: (*parser).callonBlock7,
									expr: &seqExpr{
										pos: position{line: 451, col: 22, offset: 13052},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 451, col: 22, offset: 13052},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 451, col: 24, offset: 13054},
													name: "Expr",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 451, col: 29, offset: 13059},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 451, col: 53, offset: 13083},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 451, col: 58, offset: 13088},
								expr: &ruleRefExpr{
									pos:  position{line: 451, col: 58, offset: 13088},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 451, col: 64, offset: 13094},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 451, col: 66, offset: 13096},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Literal",
			pos:  position{line: 460, col: 1, offset: 13205},
			expr: &choiceExpr{
				pos: position{line: 460, col: 12, offset: 13216},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 460, col: 12, offset: 13216},
						name: "Int",
					},
					&ruleRefExpr{
						pos:  position{line: 460, col: 18, offset: 13222},
						name: "Boolean",
					},
					&ruleRefExpr{
						pos:  position{line: 460, col: 28, offset: 13232},
						name: "String",
					},
					&ruleRefExpr{
						pos:  position{line: 460, col: 37, offset: 13241},
						name: "Quoted",
					},
					&ruleRefExpr{
						pos:  position{line: 460, col: 46, offset: 13250},
						name: "Null",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Int",
			pos:  position{line: 462, col: 1, offset: 13256},
			expr: &actionExpr{
				pos: position{line: 462, col: 8, offset: 13263},
				run: (*parser).callonInt1,
				expr: &choiceExpr{
					pos: position{line: 462, col: 9, offset: 13264},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 462, col: 9, offset: 13264},
							val:        "0",
							ignoreCase: false,
							want:       "\"0\"",
						},
						&seqExpr{
							pos: position{line: 462, col: 15, offset: 13270},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 462, col: 15, offset: 13270},
									name: "NonZeroDecimalDigit",
								},
								&zeroOrMoreExpr{
									pos: position{line: 462, col: 35, offset: 13290},
									expr: &ruleRefExpr{
										pos:  position{line: 462, col: 35, offset: 13290},
										name: "DecimalDigit",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Exponent",
			pos:  position{line: 473, col: 1, offset: 13468},
			expr: &seqExpr{
				pos: position{line: 473, col: 13, offset: 13480},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 473, col: 13, offset: 13480},
						val:        "e",
						ignoreCase: true,
						want:       "\"e\"i",
					},
					&zeroOrOneExpr{
						pos: position{line: 473, col: 18, offset: 13485},
						expr: &charClassMatcher{
							pos:        position{line: 473, col: 18, offset: 13485},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 473, col: 24, offset: 13491},
						expr: &ruleRefExpr{
							pos:  position{line: 473, col: 24, offset: 13491},
							name: "DecimalDigit",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "String",
			pos:  position{line: 475, col: 1, offset: 13506},
			expr: &actionExpr{
				pos: position{line: 475, col: 11, offset: 13516},
				run: (*parser).callonString1,
				expr: &seqExpr{
					pos: position{line: 475, col: 11, offset: 13516},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 475, col: 11, offset: 13516},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 475, col: 15, offset: 13520},
							expr: &choiceExpr{
								pos: position{line: 475, col: 17, offset: 13522},
								alternatives: []any{
									&seqExpr{
										pos: position{line: 475, col: 17, offset: 13522},
										exprs: []any{
											&notExpr{
												pos: position{line: 475, col: 17, offset: 13522},
												expr: &ruleRefExpr{
													pos:  position{line: 475, col: 18, offset: 13523},
													name: "EscapedChar",
												},
											},
											&anyMatcher{
												line: 475, col: 30, offset: 13535,
											},
										},
									},
									&seqExpr{
										pos: position{line: 475, col: 34, offset: 13539},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 475, col: 34, offset: 13539},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&ruleRefExpr{
												pos:  position{line: 475, col: 39, offset: 13544},
												name: "EscapeSequence",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 475, col: 57, offset: 13562},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DocString",
			pos:  position{line: 487, col: 1, offset: 13787},
			expr: &actionExpr{
				pos: position{line: 487, col: 14, offset: 13800},
				run: (*parser).callonDocString1,
				expr: &seqExpr{
					pos: position{line: 487, col: 14, offset: 13800},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 487, col: 14, offset: 13800},
							name: "TripleQuote",
						},
						&labeledExpr{
							pos:   position{line: 487, col: 26, offset: 13812},
							label: "content",
							expr: &ruleRefExpr{
								pos:  position{line: 487, col: 34, offset: 13820},
								name: "DocStringContent",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 487, col: 51, offset: 13837},
							name: "TripleQuote",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DocStringContent",
			pos:  position{line: 491, col: 1, offset: 13893},
			expr: &actionExpr{
				pos: position{line: 491, col: 21, offset: 13913},
				run: (*parser).callonDocStringContent1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 491, col: 21, offset: 13913},
					expr: &seqExpr{
						pos: position{line: 491, col: 22, offset: 13914},
						exprs: []any{
							&notExpr{
								pos: position{line: 491, col: 22, offset: 13914},
								expr: &ruleRefExpr{
									pos:  position{line: 491, col: 23, offset: 13915},
									name: "TripleQuote",
								},
							},
							&anyMatcher{
								line: 491, col: 35, offset: 13927,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TripleQuote",
			pos:  position{line: 495, col: 1, offset: 13957},
			expr: &litMatcher{
				pos:        position{line: 495, col: 16, offset: 13972},
				val:        "\"\"\"",
				ignoreCase: false,
				want:       "\"\\\"\\\"\\\"\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EscapedChar",
			pos:  position{line: 497, col: 1, offset: 13982},
			expr: &charClassMatcher{
				pos:        position{line: 497, col: 16, offset: 13997},
				val:        "[\\x00-\\x1f\"\\\\]",
				chars:      []rune{'"', '\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 499, col: 1, offset: 14013},
			expr: &choiceExpr{
				pos: position{line: 499, col: 19, offset: 14031},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 499, col: 19, offset: 14031},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 499, col: 38, offset: 14050},
						name: "UnicodeEscape",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 501, col: 1, offset: 14065},
			expr: &charClassMatcher{
				pos:        position{line: 501, col: 21, offset: 14085},
				val:        "[\"\\\\/bfnrt]",
				chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 503, col: 1, offset: 14098},
			expr: &seqExpr{
				pos: position{line: 503, col: 18, offset: 14115},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 503, col: 18, offset: 14115},
						val:        "u",
						ignoreCase: false,
						want:       "\"u\"",
					},
					&ruleRefExpr{
						pos:  position{line: 503, col: 22, offset: 14119},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 503, col: 31, offset: 14128},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 503, col: 40, offset: 14137},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 503, col: 49, offset: 14146},
						name: "HexDigit",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DecimalDigit",
			pos:  position{line: 505, col: 1, offset: 14156},
			expr: &charClassMatcher{
				pos:        position{line: 505, col: 17, offset: 14172},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NonZeroDecimalDigit",
			pos:  position{line: 507, col: 1, offset: 14179},
			expr: &charClassMatcher{
				pos:        position{line: 507, col: 24, offset: 14202},
				val:        "[1-9]",
				ranges:     []rune{'1', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "HexDigit",
			pos:  position{line: 509, col: 1, offset: 14209},
			expr: &charClassMatcher{
				pos:        position{line: 509, col: 13, offset: 14221},
				val:        "[0-9a-f]i",
				ranges:     []rune{'0', '9', 'a', 'f'},
				ignoreCase: true,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Quoted",
			pos:  position{line: 511, col: 1, offset: 14232},
			expr: &actionExpr{
				pos: position{line: 511, col: 11, offset: 14242},
				run: (*parser).callonQuoted1,
				expr: &seqExpr{
					pos: position{line: 511, col: 11, offset: 14242},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 511, col: 11, offset: 14242},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 511, col: 15, offset: 14246},
							label: "quoter",
							expr: &ruleRefExpr{
								pos:  position{line: 511, col: 22, offset: 14253},
								name: "WordToken",
							},
						},
						&litMatcher{
							pos:        position{line: 511, col: 32, offset: 14263},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 511, col: 36, offset: 14267},
							label: "raw",
							expr: &ruleRefExpr{
								pos:  position{line: 511, col: 40, offset: 14271},
								name: "QuotedRawToken",
							},
						},
						&litMatcher{
							pos:        position{line: 511, col: 55, offset: 14286},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "QuotedRawToken",
			pos:  position{line: 517, col: 1, offset: 14359},
			expr: &actionExpr{
				pos: position{line: 517, col: 19, offset: 14377},
				run: (*parser).callonQuotedRawToken1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 517, col: 19, offset: 14377},
					expr: &charClassMatcher{
						pos:        position{line: 517, col: 19, offset: 14377},
						val:        "[^}]",
						chars:      []rune{'}'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Boolean",
			pos:  position{line: 521, col: 1, offset: 14417},
			expr: &choiceExpr{
				pos: position{line: 521, col: 12, offset: 14428},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 521, col: 12, offset: 14428},
						run: (*parser).callonBoolean2,
						expr: &ruleRefExpr{
							pos:  position{line: 521, col: 12, offset: 14428},
							name: "TrueToken",
						},
					},
					&actionExpr{
						pos: position{line: 526, col: 5, offset: 14506},
						run: (*parser).callonBoolean4,
						expr: &ruleRefExpr{
							pos:  position{line: 526, col: 5, offset: 14506},
							name: "FalseToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TrueToken",
			pos:  position{line: 532, col: 1, offset: 14584},
			expr: &seqExpr{
				pos: position{line: 532, col: 14, offset: 14597},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 532, col: 14, offset: 14597},
						val:        "true",
						ignoreCase: false,
						want:       "\"true\"",
					},
					&notExpr{
						pos: position{line: 532, col: 21, offset: 14604},
						expr: &ruleRefExpr{
							pos:  position{line: 532, col: 22, offset: 14605},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FalseToken",
			pos:  position{line: 533, col: 1, offset: 14614},
			expr: &seqExpr{
				pos: position{line: 533, col: 15, offset: 14628},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 533, col: 15, offset: 14628},
						val:        "false",
						ignoreCase: false,
						want:       "\"false\"",
					},
					&notExpr{
						pos: position{line: 533, col: 23, offset: 14636},
						expr: &ruleRefExpr{
							pos:  position{line: 533, col: 24, offset: 14637},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Null",
			pos:  position{line: 535, col: 1, offset: 14647},
			expr: &actionExpr{
				pos: position{line: 535, col: 9, offset: 14655},
				run: (*parser).callonNull1,
				expr: &ruleRefExpr{
					pos:  position{line: 535, col: 9, offset: 14655},
					name: "NullToken",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NullToken",
			pos:  position{line: 540, col: 1, offset: 14711},
			expr: &seqExpr{
				pos: position{line: 540, col: 14, offset: 14724},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 540, col: 14, offset: 14724},
						val:        "null",
						ignoreCase: false,
						want:       "\"null\"",
					},
					&notExpr{
						pos: position{line: 540, col: 21, offset: 14731},
						expr: &ruleRefExpr{
							pos:  position{line: 540, col: 22, offset: 14732},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CommentToken",
			pos:  position{line: 542, col: 1, offset: 14742},
			expr: &seqExpr{
				pos: position{line: 542, col: 17, offset: 14758},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 542, col: 17, offset: 14758},
						val:        "#",
						ignoreCase: false,
						want:       "\"#\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 542, col: 21, offset: 14762},
						expr: &charClassMatcher{
							pos:        position{line: 542, col: 21, offset: 14762},
							val:        "[^\\n]",
							chars:      []rune{'\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Conditional",
			pos:  position{line: 546, col: 1, offset: 14805},
			expr: &actionExpr{
				pos: position{line: 546, col: 16, offset: 14820},
				run: (*parser).callonConditional1,
				expr: &seqExpr{
					pos: position{line: 546, col: 16, offset: 14820},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 546, col: 16, offset: 14820},
							name: "IfToken",
						},
						&ruleRefExpr{
							pos:  position{line: 546, col: 24, offset: 14828},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 546, col: 26, offset: 14830},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 31, offset: 14835},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 546, col: 36, offset: 14840},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 546, col: 38, offset: 14842},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 546, col: 44, offset: 14848},
								name: "Block",
							},
						},
						&labeledExpr{
							pos:   position{line: 546, col: 50, offset: 14854},
							label: "else_",
							expr: &zeroOrOneExpr{
								pos: position{line: 546, col: 56, offset: 14860},
								expr: &ruleRefExpr{
									pos:  position{line: 546, col: 56, offset: 14860},
									name: "ElseClause",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ElseClause",
			pos:  position{line: 555, col: 1, offset: 14996},
			expr: &actionExpr{
				pos: position{line: 555, col: 15, offset: 15010},
				run: (*parser).callonElseClause1,
				expr: &seqExpr{
					pos: position{line: 555, col: 15, offset: 15010},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 555, col: 15, offset: 15010},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 555, col: 17, offset: 15012},
							name: "ElseToken",
						},
						&ruleRefExpr{
							pos:  position{line: 555, col: 27, offset: 15022},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 555, col: 29, offset: 15024},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 555, col: 35, offset: 15030},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "While",
			pos:  position{line: 559, col: 1, offset: 15069},
			expr: &actionExpr{
				pos: position{line: 559, col: 10, offset: 15078},
				run: (*parser).callonWhile1,
				expr: &seqExpr{
					pos: position{line: 559, col: 10, offset: 15078},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 559, col: 10, offset: 15078},
							name: "WhileToken",
						},
						&ruleRefExpr{
							pos:  position{line: 559, col: 21, offset: 15089},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 559, col: 23, offset: 15091},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 28, offset: 15096},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 559, col: 33, offset: 15101},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 559, col: 35, offset: 15103},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 559, col: 41, offset: 15109},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IfToken",
			pos:  position{line: 567, col: 1, offset: 15221},
			expr: &seqExpr{
				pos: position{line: 567, col: 12, offset: 15232},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 567, col: 12, offset: 15232},
						val:        "if",
						ignoreCase: false,
						want:       "\"if\"",
					},
					&notExpr{
						pos: position{line: 567, col: 17, offset: 15237},
						expr: &ruleRefExpr{
							pos:  position{line: 567, col: 18, offset: 15238},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ElseToken",
			pos:  position{line: 568, col: 1, offset: 15247},
			expr: &seqExpr{
				pos: position{line: 568, col: 14, offset: 15260},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 568, col: 14, offset: 15260},
						val:        "else",
						ignoreCase: false,
						want:       "\"else\"",
					},
					&notExpr{
						pos: position{line: 568, col: 21, offset: 15267},
						expr: &ruleRefExpr{
							pos:  position{line: 568, col: 22, offset: 15268},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WhileToken",
			pos:  position{line: 569, col: 1, offset: 15277},
			expr: &seqExpr{
				pos: position{line: 569, col: 15, offset: 15291},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 569, col: 15, offset: 15291},
						val:        "while",
						ignoreCase: false,
						want:       "\"while\"",
					},
					&notExpr{
						pos: position{line: 569, col: 23, offset: 15299},
						expr: &ruleRefExpr{
							pos:  position{line: 569, col: 24, offset: 15300},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Lambda",
			pos:  position{line: 571, col: 1, offset: 15310},
			expr: &actionExpr{
				pos: position{line: 571, col: 11, offset: 15320},
				run: (*parser).callonLambda1,
				expr: &seqExpr{
					pos: position{line: 571, col: 11, offset: 15320},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 571, col: 11, offset: 15320},
							name: "LambdaToken",
						},
						&labeledExpr{
							pos:   position{line: 571, col: 23, offset: 15332},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 28, offset: 15337},
								name: "LambdaArgs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 571, col: 39, offset: 15348},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 571, col: 41, offset: 15350},
							name: "ArrowToken",
						},
						&ruleRefExpr{
							pos:  position{line: 571, col: 52, offset: 15361},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 571, col: 54, offset: 15363},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 571, col: 59, offset: 15368},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LambdaToken",
			pos:  position{line: 580, col: 1, offset: 15519},
			expr: &litMatcher{
				pos:        position{line: 580, col: 16, offset: 15534},
				val:        "\\",
				ignoreCase: false,
				want:       "\"\\\\\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArrowToken",
			pos:  position{line: 581, col: 1, offset: 15539},
			expr: &litMatcher{
				pos:        position{line: 581, col: 15, offset: 15553},
				val:        "->",
				ignoreCase: false,
				want:       "\"->\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LambdaArgs",
			pos:  position{line: 583, col: 1, offset: 15559},
			expr: &choiceExpr{
				pos: position{line: 583, col: 15, offset: 15573},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 583, col: 15, offset: 15573},
						run: (*parser).callonLambdaArgs2,
						expr: &seqExpr{
							pos: position{line: 583, col: 15, offset: 15573},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 583, col: 15, offset: 15573},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 583, col: 19, offset: 15577},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 583, col: 21, offset: 15579},
									label: "args",
									expr: &zeroOrMoreExpr{
										pos: position{line: 583, col: 26, offset: 15584},
										expr: &actionExpr{
											pos: position{line: 583, col: 27, offset: 15585},
											run: (*parser).callonLambdaArgs8,
											expr: &seqExpr{
												pos: position{line: 583, col: 27, offset: 15585},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 583, col: 27, offset: 15585},
														label: "a",
														expr: &ruleRefExpr{
															pos:  position{line: 583, col: 29, offset: 15587},
															name: "LambdaArg",
														},
													},
													&ruleRefExpr{
														pos:  position{line: 583, col: 39, offset: 15597},
														name: "Sep",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 583, col: 63, offset: 15621},
									label: "last",
									expr: &zeroOrOneExpr{
										pos: position{line: 583, col: 68, offset: 15626},
										expr: &ruleRefExpr{
											pos:  position{line: 583, col: 68, offset: 15626},
											name: "LambdaArg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 583, col: 79, offset: 15637},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 583, col: 81, offset: 15639},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 585, col: 5, offset: 15699},
						run: (*parser).callonLambdaArgs18,
						expr: &labeledExpr{
							pos:   position{line: 585, col: 5, offset: 15699},
							label: "arg",
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 9, offset: 15703},
								name: "LambdaArg",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LambdaArg",
			pos:  position{line: 589, col: 1, offset: 15759},
			expr: &choiceExpr{
				pos: position{line: 589, col: 14, offset: 15772},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 589, col: 14, offset: 15772},
						name: "ArgWithDefault",
					},
					&ruleRefExpr{
						pos:  position{line: 589, col: 31, offset: 15789},
						name: "ArgWithBlockDefault",
					},
					&ruleRefExpr{
						pos:  position{line: 589, col: 53, offset: 15811},
						name: "ArgWithType",
					},
					&ruleRefExpr{
						pos:  position{line: 589, col: 67, offset: 15825},
						name: "ArgWithoutType",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithoutType",
			pos:  position{line: 591, col: 1, offset: 15841},
			expr: &actionExpr{
				pos: position{line: 591, col: 19, offset: 15859},
				run: (*parser).callonArgWithoutType1,
				expr: &labeledExpr{
					pos:   position{line: 591, col: 19, offset: 15859},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 591, col: 24, offset: 15864},
						name: "Id",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Match",
			pos:  position{line: 598, col: 1, offset: 15944},
			expr: &actionExpr{
				pos: position{line: 598, col: 10, offset: 15953},
				run: (*parser).callonMatch1,
				expr: &seqExpr{
					pos: position{line: 598, col: 10, offset: 15953},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 598, col: 10, offset: 15953},
							name: "MatchToken",
						},
						&ruleRefExpr{
							pos:  position{line: 598, col: 21, offset: 15964},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 598, col: 23, offset: 15966},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 598, col: 28, offset: 15971},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 598, col: 33, offset: 15976},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 598, col: 35, offset: 15978},
							name: "WithToken",
						},
						&ruleRefExpr{
							pos:  position{line: 598, col: 45, offset: 15988},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 598, col: 47, offset: 15990},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 598, col: 51, offset: 15994},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 598, col: 53, offset: 15996},
							label: "cs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 598, col: 56, offset: 15999},
								expr: &actionExpr{
									pos: position{line: 598, col: 57, offset: 16000},
									run: (*parser).callonMatch14,
									expr: &seqExpr{
										pos: position{line: 598, col: 57, offset: 16000},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 598, col: 57, offset: 16000},
												label: "m",
												expr: &ruleRefExpr{
													pos:  position{line: 598, col: 59, offset: 16002},
													name: "MatchCase",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 598, col: 69, offset: 16012},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 598, col: 93, offset: 16036},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 598, col: 98, offset: 16041},
								expr: &ruleRefExpr{
									pos:  position{line: 598, col: 98, offset: 16041},
									name: "MatchCase",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 598, col: 109, offset: 16052},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 598, col: 111, offset: 16054},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MatchCase",
			pos:  position{line: 605, col: 1, offset: 16158},
			expr: &actionExpr{
				pos: position{line: 605, col: 14, offset: 16171},
				run: (*parser).callonMatchCase1,
				expr: &seqExpr{
					pos: position{line: 605, col: 14, offset: 16171},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 605, col: 14, offset: 16171},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 22, offset: 16179},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 30, offset: 16187},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 605, col: 32, offset: 16189},
							val:        "->",
							ignoreCase: false,
							want:       "\"->\"",
						},
						&ruleRefExpr{
							pos:  position{line: 605, col: 37, offset: 16194},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 605, col: 39, offset: 16196},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 605, col: 44, offset: 16201},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Pattern",
			pos:  position{line: 612, col: 1, offset: 16295},
			expr: &choiceExpr{
				pos: position{line: 612, col: 12, offset: 16306},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 612, col: 12, offset: 16306},
						name: "WildcardPattern",
					},
					&ruleRefExpr{
						pos:  position{line: 612, col: 30, offset: 16324},
						name: "LiteralPattern",
					},
					&ruleRefExpr{
						pos:  position{line: 612, col: 47, offset: 16341},
						name: "ConstructorPattern",
					},
					&ruleRefExpr{
						pos:  position{line: 612, col: 68, offset: 16362},
						name: "VariablePattern",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WildcardPattern",
			pos:  position{line: 614, col: 1, offset: 16379},
			expr: &actionExpr{
				pos: position{line: 614, col: 20, offset: 16398},
				run: (*parser).callonWildcardPattern1,
				expr: &litMatcher{
					pos:        position{line: 614, col: 20, offset: 16398},
					val:        "_",
					ignoreCase: false,
					want:       "\"_\"",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LiteralPattern",
			pos:  position{line: 618, col: 1, offset: 16439},
			expr: &actionExpr{
				pos: position{line: 618, col: 19, offset: 16457},
				run: (*parser).callonLiteralPattern1,
				expr: &labeledExpr{
					pos:   position{line: 618, col: 19, offset: 16457},
					label: "lit",
					expr: &ruleRefExpr{
						pos:  position{line: 618, col: 23, offset: 16461},
						name: "Literal",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ConstructorPattern",
			pos:  position{line: 622, col: 1, offset: 16522},
			expr: &actionExpr{
				pos: position{line: 622, col: 23, offset: 16544},
				run: (*parser).callonConstructorPattern1,
				expr: &seqExpr{
					pos: position{line: 622, col: 23, offset: 16544},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 622, col: 23, offset: 16544},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 622, col: 28, offset: 16549},
								name: "UpperId",
							},
						},
						&labeledExpr{
							pos:   position{line: 622, col: 36, offset: 16557},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 622, col: 41, offset: 16562},
								expr: &ruleRefExpr{
									pos:  position{line: 622, col: 41, offset: 16562},
									name: "PatternArgs",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PatternArgs",
			pos:  position{line: 633, col: 1, offset: 16743},
			expr: &actionExpr{
				pos: position{line: 633, col: 16, offset: 16758},
				run: (*parser).callonPatternArgs1,
				expr: &seqExpr{
					pos: position{line: 633, col: 16, offset: 16758},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 633, col: 16, offset: 16758},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 20, offset: 16762},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 633, col: 22, offset: 16764},
							label: "patterns",
							expr: &zeroOrMoreExpr{
								pos: position{line: 633, col: 31, offset: 16773},
								expr: &actionExpr{
									pos: position{line: 633, col: 32, offset: 16774},
									run: (*parser).callonPatternArgs7,
									expr: &seqExpr{
										pos: position{line: 633, col: 32, offset: 16774},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 633, col: 32, offset: 16774},
												label: "p",
												expr: &ruleRefExpr{
													pos:  position{line: 633, col: 34, offset: 16776},
													name: "Pattern",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 633, col: 42, offset: 16784},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 633, col: 66, offset: 16808},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 633, col: 71, offset: 16813},
								expr: &ruleRefExpr{
									pos:  position{line: 633, col: 71, offset: 16813},
									name: "Pattern",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 80, offset: 16822},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 633, col: 82, offset: 16824},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VariablePattern",
			pos:  position{line: 637, col: 1, offset: 16886},
			expr: &actionExpr{
				pos: position{line: 637, col: 20, offset: 16905},
				run: (*parser).callonVariablePattern1,
				expr: &labeledExpr{
					pos:   position{line: 637, col: 20, offset: 16905},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 637, col: 25, offset: 16910},
						name: "Id",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MatchToken",
			pos:  position{line: 641, col: 1, offset: 16969},
			expr: &seqExpr{
				pos: position{line: 641, col: 15, offset: 16983},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 641, col: 15, offset: 16983},
						val:        "match",
						ignoreCase: false,
						want:       "\"match\"",
					},
					&notExpr{
						pos: position{line: 641, col: 23, offset: 16991},
						expr: &ruleRefExpr{
							pos:  position{line: 641, col: 24, offset: 16992},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WithToken",
			pos:  position{line: 642, col: 1, offset: 17001},
			expr: &seqExpr{
				pos: position{line: 642, col: 14, offset: 17014},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 642, col: 14, offset: 17014},
						val:        "with",
						ignoreCase: false,
						want:       "\"with\"",
					},
					&notExpr{
						pos: position{line: 642, col: 21, offset: 17021},
						expr: &ruleRefExpr{
							pos:  position{line: 642, col: 22, offset: 17022},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Assert",
			pos:  position{line: 644, col: 1, offset: 17032},
			expr: &actionExpr{
				pos: position{line: 644, col: 11, offset: 17042},
				run: (*parser).callonAssert1,
				expr: &seqExpr{
					pos: position{line: 644, col: 11, offset: 17042},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 644, col: 11, offset: 17042},
							name: "AssertToken",
						},
						&labeledExpr{
							pos:   position{line: 644, col: 23, offset: 17054},
							label: "message",
							expr: &zeroOrOneExpr{
								pos: position{line: 644, col: 31, offset: 17062},
								expr: &ruleRefExpr{
									pos:  position{line: 644, col: 31, offset: 17062},
									name: "MessageArgs",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 644, col: 44, offset: 17075},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 644, col: 46, offset: 17077},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 644, col: 52, offset: 17083},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MessageArgs",
			pos:  position{line: 656, col: 1, offset: 17248},
			expr: &actionExpr{
				pos: position{line: 656, col: 16, offset: 17263},
				run: (*parser).callonMessageArgs1,
				expr: &seqExpr{
					pos: position{line: 656, col: 16, offset: 17263},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 656, col: 16, offset: 17263},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 656, col: 20, offset: 17267},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 656, col: 22, offset: 17269},
							label: "msg",
							expr: &ruleRefExpr{
								pos:  position{line: 656, col: 26, offset: 17273},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 656, col: 31, offset: 17278},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 656, col: 33, offset: 17280},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AssertToken",
			pos:  position{line: 660, col: 1, offset: 17307},
			expr: &seqExpr{
				pos: position{line: 660, col: 16, offset: 17322},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 660, col: 16, offset: 17322},
						val:        "assert",
						ignoreCase: false,
						want:       "\"assert\"",
					},
					&notExpr{
						pos: position{line: 660, col: 25, offset: 17331},
						expr: &ruleRefExpr{
							pos:  position{line: 660, col: 26, offset: 17332},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Reassignment",
			pos:  position{line: 662, col: 1, offset: 17342},
			expr: &actionExpr{
				pos: position{line: 662, col: 17, offset: 17358},
				run: (*parser).callonReassignment1,
				expr: &seqExpr{
					pos: position{line: 662, col: 17, offset: 17358},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 662, col: 17, offset: 17358},
							label: "target",
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 24, offset: 17365},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 662, col: 29, offset: 17370},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 662, col: 31, offset: 17372},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 34, offset: 17375},
								name: "AssignOp",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 662, col: 43, offset: 17384},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 662, col: 45, offset: 17386},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 662, col: 51, offset: 17392},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AssignOp",
			pos:  position{line: 671, col: 1, offset: 17531},
			expr: &choiceExpr{
				pos: position{line: 671, col: 13, offset: 17543},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 671, col: 13, offset: 17543},
						run: (*parser).callonAssignOp2,
						expr: &ruleRefExpr{
							pos:  position{line: 671, col: 13, offset: 17543},
							name: "PlusEqualToken",
						},
					},
					&actionExpr{
						pos: position{line: 671, col: 50, offset: 17580},
						run: (*parser).callonAssignOp4,
						expr: &ruleRefExpr{
							pos:  position{line: 671, col: 50, offset: 17580},
							name: "EqualToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PlusEqualToken",
			pos:  position{line: 672, col: 1, offset: 17611},
			expr: &litMatcher{
				pos:        position{line: 672, col: 19, offset: 17629},
				val:        "+=",
				ignoreCase: false,
				want:       "\"+=\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EqualToken",
			pos:  position{line: 673, col: 1, offset: 17634},
			expr: &litMatcher{
				pos:        position{line: 673, col: 15, offset: 17648},
				val:        "=",
				ignoreCase: false,
				want:       "\"=\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeHint",
			pos:  position{line: 675, col: 1, offset: 17653},
			expr: &actionExpr{
				pos: position{line: 675, col: 13, offset: 17665},
				run: (*parser).callonTypeHint1,
				expr: &seqExpr{
					pos: position{line: 675, col: 13, offset: 17665},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 675, col: 13, offset: 17665},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 18, offset: 17670},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 675, col: 23, offset: 17675},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 675, col: 25, offset: 17677},
							name: "DoubleColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 675, col: 42, offset: 17694},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 675, col: 44, offset: 17696},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 675, col: 50, offset: 17702},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DoubleColonToken",
			pos:  position{line: 683, col: 1, offset: 17809},
			expr: &litMatcher{
				pos:        position{line: 683, col: 21, offset: 17829},
				val:        "::",
				ignoreCase: false,
				want:       "\"::\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Reopen",
			pos:  position{line: 685, col: 1, offset: 17835},
			expr: &actionExpr{
				pos: position{line: 685, col: 11, offset: 17845},
				run: (*parser).callonReopen1,
				expr: &seqExpr{
					pos: position{line: 685, col: 11, offset: 17845},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 685, col: 11, offset: 17845},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 16, offset: 17850},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 685, col: 19, offset: 17853},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 685, col: 21, offset: 17855},
							name: "ReopenToken",
						},
						&ruleRefExpr{
							pos:  position{line: 685, col: 33, offset: 17867},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 685, col: 35, offset: 17869},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 685, col: 37, offset: 17871},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveDecl",
			pos:  position{line: 693, col: 1, offset: 17973},
			expr: &actionExpr{
				pos: position{line: 693, col: 18, offset: 17990},
				run: (*parser).callonDirectiveDecl1,
				expr: &seqExpr{
					pos: position{line: 693, col: 18, offset: 17990},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 693, col: 18, offset: 17990},
							name: "DirectiveToken",
						},
						&ruleRefExpr{
							pos:  position{line: 693, col: 33, offset: 18005},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 693, col: 35, offset: 18007},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 693, col: 40, offset: 18012},
								name: "DirectiveName",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 693, col: 54, offset: 18026},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 693, col: 56, offset: 18028},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 693, col: 61, offset: 18033},
								expr: &ruleRefExpr{
									pos:  position{line: 693, col: 61, offset: 18033},
									name: "ArgTypes",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 693, col: 71, offset: 18043},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 693, col: 73, offset: 18045},
							name: "OnToken",
						},
						&ruleRefExpr{
							pos:  position{line: 693, col: 81, offset: 18053},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 693, col: 83, offset: 18055},
							label: "locations",
							expr: &ruleRefExpr{
								pos:  position{line: 693, col: 93, offset: 18065},
								name: "DirectiveLocations",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveApplication",
			pos:  position{line: 706, col: 1, offset: 18316},
			expr: &actionExpr{
				pos: position{line: 706, col: 25, offset: 18340},
				run: (*parser).callonDirectiveApplication1,
				expr: &seqExpr{
					pos: position{line: 706, col: 25, offset: 18340},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 706, col: 25, offset: 18340},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 706, col: 29, offset: 18344},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 706, col: 34, offset: 18349},
								name: "Id",
							},
						},
						&labeledExpr{
							pos:   position{line: 706, col: 37, offset: 18352},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 706, col: 42, offset: 18357},
								expr: &ruleRefExpr{
									pos:  position{line: 706, col: 42, offset: 18357},
									name: "ArgValues",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveLocations",
			pos:  position{line: 718, col: 1, offset: 18567},
			expr: &actionExpr{
				pos: position{line: 718, col: 23, offset: 18589},
				run: (*parser).callonDirectiveLocations1,
				expr: &seqExpr{
					pos: position{line: 718, col: 23, offset: 18589},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 718, col: 23, offset: 18589},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 718, col: 29, offset: 18595},
								name: "DirectiveLocation",
							},
						},
						&labeledExpr{
							pos:   position{line: 718, col: 47, offset: 18613},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 718, col: 52, offset: 18618},
								expr: &actionExpr{
									pos: position{line: 718, col: 53, offset: 18619},
									run: (*parser).callonDirectiveLocations7,
									expr: &seqExpr{
										pos: position{line: 718, col: 53, offset: 18619},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 718, col: 53, offset: 18619},
												name: "_",
											},
											&litMatcher{
												pos:        position{line: 718, col: 55, offset: 18621},
												val:        "|",
												ignoreCase: false,
												want:       "\"|\"",
											},
											&ruleRefExpr{
												pos:  position{line: 718, col: 59, offset: 18625},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 718, col: 61, offset: 18627},
												label: "loc",
												expr: &ruleRefExpr{
													pos:  position{line: 718, col: 65, offset: 18631},
													name: "DirectiveLocation",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveLocation",
			pos:  position{line: 722, col: 1, offset: 18736},
			expr: &actionExpr{
				pos: position{line: 722, col: 22, offset: 18757},
				run: (*parser).callonDirectiveLocation1,
				expr: &labeledExpr{
					pos:   position{line: 722, col: 22, offset: 18757},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 722, col: 27, offset: 18762},
						name: "UpperId",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveName",
			pos:  position{line: 726, col: 1, offset: 18828},
			expr: &actionExpr{
				pos: position{line: 726, col: 18, offset: 18845},
				run: (*parser).callonDirectiveName1,
				expr: &seqExpr{
					pos: position{line: 726, col: 18, offset: 18845},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 726, col: 18, offset: 18845},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&labeledExpr{
							pos:   position{line: 726, col: 22, offset: 18849},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 726, col: 27, offset: 18854},
								name: "Id",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DirectiveToken",
			pos:  position{line: 730, col: 1, offset: 18890},
			expr: &seqExpr{
				pos: position{line: 730, col: 19, offset: 18908},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 730, col: 19, offset: 18908},
						val:        "directive",
						ignoreCase: false,
						want:       "\"directive\"",
					},
					&notExpr{
						pos: position{line: 730, col: 31, offset: 18920},
						expr: &ruleRefExpr{
							pos:  position{line: 730, col: 32, offset: 18921},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "OnToken",
			pos:  position{line: 731, col: 1, offset: 18930},
			expr: &seqExpr{
				pos: position{line: 731, col: 12, offset: 18941},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 731, col: 12, offset: 18941},
						val:        "on",
						ignoreCase: false,
						want:       "\"on\"",
					},
					&notExpr{
						pos: position{line: 731, col: 17, offset: 18946},
						expr: &ruleRefExpr{
							pos:  position{line: 731, col: 18, offset: 18947},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Import",
			pos:  position{line: 733, col: 1, offset: 18957},
			expr: &actionExpr{
				pos: position{line: 733, col: 11, offset: 18967},
				run: (*parser).callonImport1,
				expr: &seqExpr{
					pos: position{line: 733, col: 11, offset: 18967},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 733, col: 11, offset: 18967},
							name: "ImportToken",
						},
						&ruleRefExpr{
							pos:  position{line: 733, col: 23, offset: 18979},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 733, col: 25, offset: 18981},
							label: "source",
							expr: &ruleRefExpr{
								pos:  position{line: 733, col: 32, offset: 18988},
								name: "ImportSource",
							},
						},
						&labeledExpr{
							pos:   position{line: 733, col: 45, offset: 19001},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 733, col: 51, offset: 19007},
								expr: &seqExpr{
									pos: position{line: 733, col: 52, offset: 19008},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 733, col: 52, offset: 19008},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 733, col: 54, offset: 19010},
											name: "AsToken",
										},
										&ruleRefExpr{
											pos:  position{line: 733, col: 62, offset: 19018},
											name: "_",
										},
										&labeledExpr{
											pos:   position{line: 733, col: 64, offset: 19020},
											label: "name",
											expr: &ruleRefExpr{
												pos:  position{line: 733, col: 69, offset: 19025},
												name: "Id",
											},
										},
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ImportSource",
			pos:  position{line: 747, col: 1, offset: 19301},
			expr: &choiceExpr{
				pos: position{line: 747, col: 17, offset: 19317},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 747, col: 17, offset: 19317},
						name: "DaggerKeyword",
					},
					&ruleRefExpr{
						pos:  position{line: 747, col: 33, offset: 19333},
						name: "SchemaURL",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DaggerKeyword",
			pos:  position{line: 748, col: 1, offset: 19343},
			expr: &actionExpr{
				pos: position{line: 748, col: 18, offset: 19360},
				run: (*parser).callonDaggerKeyword1,
				expr: &seqExpr{
					pos: position{line: 748, col: 18, offset: 19360},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 748, col: 18, offset: 19360},
							val:        "dagger",
							ignoreCase: false,
							want:       "\"dagger\"",
						},
						&notExpr{
							pos: position{line: 748, col: 27, offset: 19369},
							expr: &ruleRefExpr{
								pos:  position{line: 748, col: 28, offset: 19370},
								name: "WordChar",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SchemaURL",
			pos:  position{line: 751, col: 1, offset: 19406},
			expr: &actionExpr{
				pos: position{line: 751, col: 14, offset: 19419},
				run: (*parser).callonSchemaURL1,
				expr: &seqExpr{
					pos: position{line: 751, col: 14, offset: 19419},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 751, col: 14, offset: 19419},
							val:        "[a-zA-Z]",
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 751, col: 23, offset: 19428},
							expr: &charClassMatcher{
								pos:        position{line: 751, col: 23, offset: 19428},
								val:        "[a-zA-Z0-9.-/]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9', '.', '/'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ImportToken",
			pos:  position{line: 755, col: 1, offset: 19478},
			expr: &seqExpr{
				pos: position{line: 755, col: 16, offset: 19493},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 755, col: 16, offset: 19493},
						val:        "import",
						ignoreCase: false,
						want:       "\"import\"",
					},
					&notExpr{
						pos: position{line: 755, col: 25, offset: 19502},
						expr: &ruleRefExpr{
							pos:  position{line: 755, col: 26, offset: 19503},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AsToken",
			pos:  position{line: 756, col: 1, offset: 19512},
			expr: &seqExpr{
				pos: position{line: 756, col: 12, offset: 19523},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 756, col: 12, offset: 19523},
						val:        "as",
						ignoreCase: false,
						want:       "\"as\"",
					},
					&notExpr{
						pos: position{line: 756, col: 17, offset: 19528},
						expr: &ruleRefExpr{
							pos:  position{line: 756, col: 18, offset: 19529},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
	},
}

func (c *current) onDang6(e any) (any, error) {
	return e, nil
}

func (p *parser) callonDang6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDang6(stack["e"])
}

func (c *current) onDang1(eles, last any) (any, error) {
	return Block{
		Forms: sliceOfAppend[Node](eles, last),
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonDang1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDang1(stack["eles"], stack["last"])
}

func (c *current) onAnnotatedDecl1(docstring, decl any) (any, error) {
	switch node := decl.(type) {
	case *ClassDecl:
		node.DocString = docstring.(string)
		return node, nil
	case SlotDecl:
		node.DocString = docstring.(string)
		return node, nil
	case *DirectiveDecl:
		node.DocString = docstring.(string)
		return node, nil
	default:
		return decl, nil
	}
}

func (p *parser) callonAnnotatedDecl1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAnnotatedDecl1(stack["docstring"], stack["decl"])
}

func (c *current) onParenForm1(expr any) (any, error) {
	return expr.(Node), nil
}

func (p *parser) callonParenForm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenForm1(stack["expr"])
}

func (c *current) onCall1(name, args any) (any, error) {
	// Symbol followed by () - create FunCall
	argRecord := Record(args.([]Keyed[Node]))
	return FunCall{
		Fun: Symbol{
			Name: name.(string),
			Loc:  c.Loc(),
		},
		Args: argRecord,
		Loc:  c.Loc(),
	}, nil
}

func (p *parser) callonCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCall1(stack["name"], stack["args"])
}

func (c *current) onSymbol1(name any) (any, error) {
	// Just a Symbol
	return Symbol{
		Name:     name.(string),
		AutoCall: true,
		Loc:      c.Loc(),
	}, nil
}

func (p *parser) callonSymbol1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol1(stack["name"])
}

func (c *current) onSelectOrCall1(left, selection any) (any, error) {
	switch sel := selection.(type) {
	case *ObjectSelection:
		// Object selection: obj.{field1, field2}
		sel.Receiver = left.(Node)
		return sel, nil
	case []interface{}:
		// Regular field access with optional args
		name := sel[0].(string)
		args := sel[1]
		if args != nil {
			// Select followed by () - create FunCall
			argRecord := Record(args.([]Keyed[Node]))
			return FunCall{
				Fun: Select{
					Receiver: left.(Node),
					Field:    name,
					Loc:      c.Loc(),
				},
				Args: argRecord,
				Loc:  c.Loc(),
			}, nil
		} else {
			// Just a Select
			return Select{
				Receiver: left.(Node),
				Field:    name,
				AutoCall: true,
				Loc:      c.Loc(),
			}, nil
		}
	default:
		return nil, fmt.Errorf("unexpected selection type")
	}
}

func (p *parser) callonSelectOrCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectOrCall1(stack["left"], stack["selection"])
}

func (c *current) onIndexOrCall1(left, index, args any) (any, error) {
	if args != nil {
		// Index followed by () - create FunCall
		argRecord := Record(args.([]Keyed[Node]))
		return FunCall{
			Fun: Index{
				Receiver: left.(Node),
				Index:    index.(Node),
				Loc:      c.Loc(),
			},
			Args: argRecord,
			Loc:  c.Loc(),
		}, nil
	} else {
		// Just an Index
		return Index{
			Receiver: left.(Node),
			Index:    index.(Node),
			AutoCall: true,
			Loc:      c.Loc(),
		}, nil
	}
}

func (p *parser) callonIndexOrCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIndexOrCall1(stack["left"], stack["index"], stack["args"])
}

func (c *current) onObjectSelection7(f any) (any, error) {
	return f, nil
}

func (p *parser) callonObjectSelection7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObjectSelection7(stack["f"])
}

func (c *current) onObjectSelection1(fields, last any) (any, error) {
	return &ObjectSelection{
		Receiver: nil, // Will be set by parent SelectOrCall
		Fields:   sliceOfAppend[FieldSelection](fields, last),
		Loc:      c.Loc(),
	}, nil
}

func (p *parser) callonObjectSelection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObjectSelection1(stack["fields"], stack["last"])
}

func (c *current) onFieldSelection1(name, args, selection any) (any, error) {
	var argRecord Record
	if args != nil {
		argRecord = Record(args.([]Keyed[Node]))
	}

	if selection != nil {
		return FieldSelection{
			Name:      name.(string),
			Args:      argRecord,
			Selection: selection.([]interface{})[1].(*ObjectSelection),
			Loc:       c.Loc(),
		}, nil
	} else {
		return FieldSelection{
			Name:      name.(string),
			Args:      argRecord,
			Selection: nil,
			Loc:       c.Loc(),
		}, nil
	}
}

func (p *parser) callonFieldSelection1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFieldSelection1(stack["name"], stack["args"], stack["selection"])
}

func (c *current) onClass9(app any) (any, error) {
	return app, nil
}

func (p *parser) callonClass9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClass9(stack["app"])
}

func (c *current) onClass1(name, directives, block any) (any, error) {
	return &ClassDecl{
		Named:      name.(string),
		Value:      block.(Block),
		Visibility: PublicVisibility, // TODO
		Directives: sliceOf[DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonClass1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClass1(stack["name"], stack["directives"], stack["block"])
}

func (c *current) onTypeAndValueSlot20(app any) (any, error) {
	return app, nil
}

func (p *parser) callonTypeAndValueSlot20() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndValueSlot20(stack["app"])
}

func (c *current) onTypeAndValueSlot1(vis, name, type_, value, directives any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Type_:      type_.(TypeNode),
		Value:      value.(Node),
		Visibility: vis.(Visibility),
		Directives: sliceOf[DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonTypeAndValueSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndValueSlot1(stack["vis"], stack["name"], stack["type_"], stack["value"], stack["directives"])
}

func (c *current) onValueOnlySlot15(app any) (any, error) {
	return app, nil
}

func (p *parser) callonValueOnlySlot15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueOnlySlot15(stack["app"])
}

func (c *current) onValueOnlySlot1(vis, name, val, directives any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Value:      val.(Node),
		Visibility: vis.(Visibility),
		Directives: sliceOf[DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonValueOnlySlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueOnlySlot1(stack["vis"], stack["name"], stack["val"], stack["directives"])
}

func (c *current) onTypeOnlySlot15(app any) (any, error) {
	return app, nil
}

func (p *parser) callonTypeOnlySlot15() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeOnlySlot15(stack["app"])
}

func (c *current) onTypeOnlySlot1(vis, name, type_, directives any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Type_:      type_.(TypeNode),
		Visibility: vis.(Visibility),
		Directives: sliceOf[DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonTypeOnlySlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeOnlySlot1(stack["vis"], stack["name"], stack["type_"], stack["directives"])
}

func (c *current) onTypeAndBlockSlot18(app any) (any, error) {
	return app, nil
}

func (p *parser) callonTypeAndBlockSlot18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndBlockSlot18(stack["app"])
}

func (c *current) onTypeAndBlockSlot1(vis, name, type_, block, directives any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Type_: FunTypeNode{nil, type_.(TypeNode)},
		Value: &FunDecl{
			FunctionBase: FunctionBase{
				Args: nil,
				Body: block.(Block),
				Loc:  c.Loc(),
			},
			Named:      name.(string),
			Ret:        type_.(TypeNode),
			Visibility: vis.(Visibility),
		},
		Visibility: vis.(Visibility),
		Directives: sliceOf[DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonTypeAndBlockSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndBlockSlot1(stack["vis"], stack["name"], stack["type_"], stack["block"], stack["directives"])
}

func (c *current) onTypeAndArgsAndBlockSlot21(app any) (any, error) {
	return app, nil
}

func (p *parser) callonTypeAndArgsAndBlockSlot21() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndArgsAndBlockSlot21(stack["app"])
}

func (c *current) onTypeAndArgsAndBlockSlot1(vis, name, args, type_, block, directives any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Type_: FunTypeNode{args.([]SlotDecl), type_.(TypeNode)},
		Value: &FunDecl{
			FunctionBase: FunctionBase{
				Args: args.([]SlotDecl),
				Body: block.(Block),
				Loc:  c.Loc(),
			},
			Named:      name.(string),
			Ret:        type_.(TypeNode),
			Visibility: vis.(Visibility),
		},
		Visibility: vis.(Visibility),
		Directives: sliceOf[DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonTypeAndArgsAndBlockSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndArgsAndBlockSlot1(stack["vis"], stack["name"], stack["args"], stack["type_"], stack["block"], stack["directives"])
}

func (c *current) onVisibility2() (any, error) {
	return PublicVisibility, nil
}

func (p *parser) callonVisibility2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVisibility2()
}

func (c *current) onVisibility4() (any, error) {
	return PrivateVisibility, nil
}

func (p *parser) callonVisibility4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVisibility4()
}

func (c *current) onWordToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonWordToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWordToken1()
}

func (c *current) onUpperToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUpperToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpperToken1()
}

func (c *current) onArgValues7(a any) (any, error) {
	return a, nil
}

func (p *parser) callonArgValues7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgValues7(stack["a"])
}

func (c *current) onArgValues1(args, last any) (any, error) {
	return sliceOfAppend[Keyed[Node]](args, last), nil
}

func (p *parser) callonArgValues1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgValues1(stack["args"], stack["last"])
}

func (c *current) onArgTypes7(a any) (any, error) {
	return a, nil
}

func (p *parser) callonArgTypes7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgTypes7(stack["a"])
}

func (c *current) onArgTypes1(args, last any) (any, error) {
	return sliceOfAppend[SlotDecl](args, last), nil
}

func (p *parser) callonArgTypes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgTypes1(stack["args"], stack["last"])
}

func (c *current) onArgType2(docstring, slot any) (any, error) {
	slotDecl := slot.(SlotDecl)
	return SlotDecl{
		Named:      slotDecl.Named,
		Type_:      slotDecl.Type_,
		Value:      slotDecl.Value,
		Directives: slotDecl.Directives,
		DocString:  docstring.(string),
		Loc:        slotDecl.Loc,
	}, nil
}

func (p *parser) callonArgType2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgType2(stack["docstring"], stack["slot"])
}

func (c *current) onArgType12(slot any) (any, error) {
	return slot.(SlotDecl), nil
}

func (p *parser) callonArgType12() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgType12(stack["slot"])
}

func (c *current) onArgWithDefault1(name, type_, directives, value any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Type_:      type_.(TypeNode),
		Directives: sliceOf[DirectiveApplication](directives),
		Value:      value.(Node),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonArgWithDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithDefault1(stack["name"], stack["type_"], stack["directives"], stack["value"])
}

func (c *current) onArgWithBlockDefault1(name, type_, directives, block any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Type_:      type_.(TypeNode),
		Directives: sliceOf[DirectiveApplication](directives),
		Value:      block.(Block),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonArgWithBlockDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithBlockDefault1(stack["name"], stack["type_"], stack["directives"], stack["block"])
}

func (c *current) onArgWithType1(name, type_, directives any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Type_:      type_.(TypeNode),
		Directives: sliceOf[DirectiveApplication](directives),
		Loc:        c.Loc(),
	}, nil
}

func (p *parser) callonArgWithType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithType1(stack["name"], stack["type_"], stack["directives"])
}

func (c *current) onKeyValue1(key, value any) (any, error) {
	return Keyed[Node]{Key: key.(string), Value: value.(Node), Positional: false}, nil
}

func (p *parser) callonKeyValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyValue1(stack["key"], stack["value"])
}

func (c *current) onPositionalValue1(value any) (any, error) {
	return Keyed[Node]{Key: "", Value: value.(Node), Positional: true}, nil
}

func (p *parser) callonPositionalValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedType1(name any) (any, error) {
	return NamedTypeNode{name.(string)}, nil
}

func (p *parser) callonNamedType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedType1(stack["name"])
}

func (c *current) onListType1(inner any) (any, error) {
	return ListTypeNode{inner.(TypeNode)}, nil
}

func (p *parser) callonListType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListType1(stack["inner"])
}

func (c *current) onObjectType7(f any) (any, error) {
	return f, nil
}

func (p *parser) callonObjectType7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObjectType7(stack["f"])
}

func (c *current) onObjectType1(fields, last any) (any, error) {
	return ObjectTypeNode{
		Fields: sliceOfAppend[ObjectTypeField](fields, last),
	}, nil
}

func (p *parser) callonObjectType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObjectType1(stack["fields"], stack["last"])
}

func (c *current) onObjectTypeField1(key, type_ any) (any, error) {
	return ObjectTypeField{
		Key:  key.(string),
		Type: type_.(TypeNode),
	}, nil
}

func (p *parser) callonObjectTypeField1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObjectTypeField1(stack["key"], stack["type_"])
}

func (c *current) onNonNull1(inner any) (any, error) {
	return NonNullTypeNode{inner.(TypeNode)}, nil
}

func (p *parser) callonNonNull1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonNull1(stack["inner"])
}

func (c *current) onTypeVariable1(v any) (any, error) {
	return VariableTypeNode{v.([]byte)[0]}, nil
}

func (p *parser) callonTypeVariable1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeVariable1(stack["v"])
}

func (c *current) onDefaultExpr2(left, right any) (any, error) {
	return Default{
		Left:  left.(Node),
		Right: right.(Node),
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonDefaultExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefaultExpr2(stack["left"], stack["right"])
}

func (c *current) onEqualityExpr2(left, op, right any) (any, error) {
	switch op.(string) {
	case "==":
		return Equality{
			Left:  left.(Node),
			Right: right.(Node),
			Loc:   c.Loc(),
		}, nil
	case "!=":
		return NewInequality(left.(Node), right.(Node), c.Loc()), nil
	default:
		return nil, fmt.Errorf("unknown equality operator: %s", op.(string))
	}
}

func (p *parser) callonEqualityExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityExpr2(stack["left"], stack["op"], stack["right"])
}

func (c *current) onEqualityOp2() (any, error) {
	return "==", nil
}

func (p *parser) callonEqualityOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOp2()
}

func (c *current) onEqualityOp4() (any, error) {
	return "!=", nil
}

func (p *parser) callonEqualityOp4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEqualityOp4()
}

func (c *current) onRelationalExpr2(left, op, right any) (any, error) {
	switch op.(string) {
	case "<":
		return NewLessThan(left.(Node), right.(Node), c.Loc()), nil
	case "<=":
		return NewLessThanEqual(left.(Node), right.(Node), c.Loc()), nil
	case ">":
		return NewGreaterThan(left.(Node), right.(Node), c.Loc()), nil
	case ">=":
		return NewGreaterThanEqual(left.(Node), right.(Node), c.Loc()), nil
	default:
		return nil, fmt.Errorf("unknown relational operator: %s", op.(string))
	}
}

func (p *parser) callonRelationalExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelationalExpr2(stack["left"], stack["op"], stack["right"])
}

func (c *current) onRelationalOp2() (any, error) {
	return "<=", nil
}

func (p *parser) callonRelationalOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelationalOp2()
}

func (c *current) onRelationalOp4() (any, error) {
	return ">=", nil
}

func (p *parser) callonRelationalOp4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelationalOp4()
}

func (c *current) onRelationalOp6() (any, error) {
	return "<", nil
}

func (p *parser) callonRelationalOp6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelationalOp6()
}

func (c *current) onRelationalOp8() (any, error) {
	return ">", nil
}

func (p *parser) callonRelationalOp8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onRelationalOp8()
}

func (c *current) onAdditiveExpr2(left, op, right any) (any, error) {
	switch op.(string) {
	case "+":
		return NewAddition(left.(Node), right.(Node), c.Loc()), nil
	case "-":
		return NewSubtraction(left.(Node), right.(Node), c.Loc()), nil
	default:
		return nil, fmt.Errorf("unknown additive operator: %s", op.(string))
	}
}

func (p *parser) callonAdditiveExpr2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveExpr2(stack["left"], stack["op"], stack["right"])
}

func (c *current) onAdditiveOp2() (any, error) {
	return "+", nil
}

func (p *parser) callonAdditiveOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOp2()
}

func (c *current) onAdditiveOp4() (any, error) {
	return "-", nil
}

func (p *parser) callonAdditiveOp4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAdditiveOp4()
}

func (c *current) onMultiplicativeExpr1(left, op, right any) (any, error) {
	switch op.(string) {
	case "*":
		return NewMultiplication(left.(Node), right.(Node), c.Loc()), nil
	case "/":
		return NewDivision(left.(Node), right.(Node), c.Loc()), nil
	case "%":
		return NewModulo(left.(Node), right.(Node), c.Loc()), nil
	default:
		return nil, fmt.Errorf("unknown multiplicative operator: %s", op.(string))
	}
}

func (p *parser) callonMultiplicativeExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeExpr1(stack["left"], stack["op"], stack["right"])
}

func (c *current) onMultiplicativeOp2() (any, error) {
	return "*", nil
}

func (p *parser) callonMultiplicativeOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOp2()
}

func (c *current) onMultiplicativeOp4() (any, error) {
	return "/", nil
}

func (p *parser) callonMultiplicativeOp4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOp4()
}

func (c *current) onMultiplicativeOp6() (any, error) {
	return "%", nil
}

func (p *parser) callonMultiplicativeOp6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplicativeOp6()
}

func (c *current) onList7(e any) (any, error) {
	return e, nil
}

func (p *parser) callonList7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onList7(stack["e"])
}

func (c *current) onList1(eles, last any) (any, error) {
	return List{
		Elements: sliceOfAppend[Node](eles, last),
		Loc:      c.Loc(),
	}, nil
}

func (p *parser) callonList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onList1(stack["eles"], stack["last"])
}

func (c *current) onObject7(v any) (any, error) {
	return v, nil
}

func (p *parser) callonObject7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObject7(stack["v"])
}

func (c *current) onObject1(vals, last any) (any, error) {
	var slots []SlotDecl
	for _, kv := range sliceOfAppend[Keyed[Node]](vals, last) {
		slots = append(slots, SlotDecl{
			Named: kv.Key,
			Value: kv.Value,
			Loc:   kv.Value.GetSourceLocation(),
		})
	}
	return &Object{
		Slots: slots,
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonObject1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObject1(stack["vals"], stack["last"])
}

func (c *current) onBlock7(e any) (any, error) {
	return e, nil
}

func (p *parser) callonBlock7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock7(stack["e"])
}

func (c *current) onBlock1(eles, last any) (any, error) {
	return Block{
		Forms: sliceOfAppend[Node](eles, last),
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock1(stack["eles"], stack["last"])
}

func (c *current) onInt1() (any, error) {
	value, err := strconv.ParseInt(string(c.text), 10, 64)
	if err != nil {
		return nil, err
	}
	return Int{
		Value: value,
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonInt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInt1()
}

func (c *current) onString1() (any, error) {
	c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
	value, err := strconv.Unquote(string(c.text))
	if err != nil {
		return nil, err
	}
	return String{
		Value: value,
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1()
}

func (c *current) onDocString1(content any) (any, error) {
	return string(content.([]byte)), nil
}

func (p *parser) callonDocString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocString1(stack["content"])
}

func (c *current) onDocStringContent1() (any, error) {
	return c.text, nil
}

func (p *parser) callonDocStringContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDocStringContent1()
}

func (c *current) onQuoted1(quoter, raw any) (any, error) {
	return Quoted{
		quoter.(string),
		raw.(string),
	}, nil
}

func (p *parser) callonQuoted1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoted1(stack["quoter"], stack["raw"])
}

func (c *current) onQuotedRawToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonQuotedRawToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedRawToken1()
}

func (c *current) onBoolean2() (any, error) {
	return Boolean{
		Value: true,
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonBoolean2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean2()
}

func (c *current) onBoolean4() (any, error) {
	return Boolean{
		Value: false,
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonBoolean4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean4()
}

func (c *current) onNull1() (any, error) {
	return Null{
		Loc: c.Loc(),
	}, nil
}

func (p *parser) callonNull1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNull1()
}

func (c *current) onConditional1(cond, block, else_ any) (any, error) {
	return Conditional{
		Condition: cond.(Node),
		Then:      block.(Block),
		Else:      else_,
		Loc:       c.Loc(),
	}, nil
}

func (p *parser) callonConditional1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditional1(stack["cond"], stack["block"], stack["else_"])
}

func (c *current) onElseClause1(block any) (any, error) {
	return block.(Block), nil
}

func (p *parser) callonElseClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseClause1(stack["block"])
}

func (c *current) onWhile1(cond, block any) (any, error) {
	return While{
		Condition: cond.(Node),
		BodyBlock: block.(Block),
		Loc:       c.Loc(),
	}, nil
}

func (p *parser) callonWhile1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWhile1(stack["cond"], stack["block"])
}

func (c *current) onLambda1(args, expr any) (any, error) {
	return &Lambda{
		FunctionBase: FunctionBase{
			Args: args.([]SlotDecl),
			Body: expr.(Node),
			Loc:  c.Loc(),
		},
	}, nil
}

func (p *parser) callonLambda1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambda1(stack["args"], stack["expr"])
}

func (c *current) onLambdaArgs8(a any) (any, error) {
	return a, nil
}

func (p *parser) callonLambdaArgs8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaArgs8(stack["a"])
}

func (c *current) onLambdaArgs2(args, last any) (any, error) {
	return sliceOfAppend[SlotDecl](args, last), nil
}

func (p *parser) callonLambdaArgs2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaArgs2(stack["args"], stack["last"])
}

func (c *current) onLambdaArgs18(arg any) (any, error) {
	return []SlotDecl{arg.(SlotDecl)}, nil
}

func (p *parser) callonLambdaArgs18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaArgs18(stack["arg"])
}

func (c *current) onArgWithoutType1(name any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonArgWithoutType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithoutType1(stack["name"])
}

func (c *current) onMatch14(m any) (any, error) {
	return m, nil
}

func (p *parser) callonMatch14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatch14(stack["m"])
}

func (c *current) onMatch1(expr, cs, last any) (any, error) {
	return Match{
		Expr:  expr.(Node),
		Cases: sliceOfAppend[MatchCase](cs, last),
	}, nil
}

func (p *parser) callonMatch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatch1(stack["expr"], stack["cs"], stack["last"])
}

func (c *current) onMatchCase1(pattern, expr any) (any, error) {
	return MatchCase{
		Pattern: pattern.(Pattern),
		Expr:    expr.(Node),
	}, nil
}

func (p *parser) callonMatchCase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchCase1(stack["pattern"], stack["expr"])
}

func (c *current) onWildcardPattern1() (any, error) {
	return WildcardPattern{}, nil
}

func (p *parser) callonWildcardPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWildcardPattern1()
}

func (c *current) onLiteralPattern1(lit any) (any, error) {
	return LiteralPattern{Value: lit.(Node)}, nil
}

func (p *parser) callonLiteralPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralPattern1(stack["lit"])
}

func (c *current) onConstructorPattern1(name, args any) (any, error) {
	var patterns []Pattern
	if args != nil {
		patterns = args.([]Pattern)
	}
	return ConstructorPattern{
		Name: name.(string),
		Args: patterns,
	}, nil
}

func (p *parser) callonConstructorPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstructorPattern1(stack["name"], stack["args"])
}

func (c *current) onPatternArgs7(p any) (any, error) {
	return p, nil
}

func (p *parser) callonPatternArgs7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternArgs7(stack["p"])
}

func (c *current) onPatternArgs1(patterns, last any) (any, error) {
	return sliceOfAppend[Pattern](patterns, last), nil
}

func (p *parser) callonPatternArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternArgs1(stack["patterns"], stack["last"])
}

func (c *current) onVariablePattern1(name any) (any, error) {
	return VariablePattern{Name: name.(string)}, nil
}

func (p *parser) callonVariablePattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariablePattern1(stack["name"])
}

func (c *current) onAssert1(message, block any) (any, error) {
	var msg Node
	if message != nil {
		msg = message.(Node)
	}
	return Assert{
		Message: msg,
		Block:   block.(Block),
		Loc:     c.Loc(),
	}, nil
}

func (p *parser) callonAssert1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssert1(stack["message"], stack["block"])
}

func (c *current) onMessageArgs1(msg any) (any, error) {
	return msg, nil
}

func (p *parser) callonMessageArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMessageArgs1(stack["msg"])
}

func (c *current) onReassignment1(target, op, value any) (any, error) {
	return Reassignment{
		Target:   target.(Node),
		Modifier: op.(string),
		Value:    value.(Node),
		Loc:      c.Loc(),
	}, nil
}

func (p *parser) callonReassignment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReassignment1(stack["target"], stack["op"], stack["value"])
}

func (c *current) onAssignOp2() (any, error) {
	return "+", nil
}

func (p *parser) callonAssignOp2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignOp2()
}

func (c *current) onAssignOp4() (any, error) {
	return "=", nil
}

func (p *parser) callonAssignOp4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssignOp4()
}

func (c *current) onTypeHint1(expr, type_ any) (any, error) {
	return TypeHint{
		Expr: expr.(Node),
		Type: type_.(TypeNode),
		Loc:  c.Loc(),
	}, nil
}

func (p *parser) callonTypeHint1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeHint1(stack["expr"], stack["type_"])
}

func (c *current) onReopen1(name, b any) (any, error) {
	return Reopen{
		Name:  name.(string),
		Block: b.(Block),
		Loc:   c.Loc(),
	}, nil
}

func (p *parser) callonReopen1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReopen1(stack["name"], stack["b"])
}

func (c *current) onDirectiveDecl1(name, args, locations any) (any, error) {
	var argTypes []SlotDecl
	if args != nil {
		argTypes = args.([]SlotDecl)
	}
	return &DirectiveDecl{
		Name:      name.(string),
		Args:      argTypes,
		Locations: locations.([]DirectiveLocation),
		Loc:       c.Loc(),
	}, nil
}

func (p *parser) callonDirectiveDecl1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveDecl1(stack["name"], stack["args"], stack["locations"])
}

func (c *current) onDirectiveApplication1(name, args any) (any, error) {
	var argValues []Keyed[Node]
	if args != nil {
		argValues = args.([]Keyed[Node])
	}
	return DirectiveApplication{
		Name: name.(string),
		Args: argValues,
		Loc:  c.Loc(),
	}, nil
}

func (p *parser) callonDirectiveApplication1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveApplication1(stack["name"], stack["args"])
}

func (c *current) onDirectiveLocations7(loc any) (any, error) {
	return loc, nil
}

func (p *parser) callonDirectiveLocations7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveLocations7(stack["loc"])
}

func (c *current) onDirectiveLocations1(first, rest any) (any, error) {
	return sliceOfAppend[DirectiveLocation](rest, first), nil
}

func (p *parser) callonDirectiveLocations1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveLocations1(stack["first"], stack["rest"])
}

func (c *current) onDirectiveLocation1(name any) (any, error) {
	return DirectiveLocation{Name: name.(string)}, nil
}

func (p *parser) callonDirectiveLocation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveLocation1(stack["name"])
}

func (c *current) onDirectiveName1(name any) (any, error) {
	return name.(string), nil
}

func (p *parser) callonDirectiveName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDirectiveName1(stack["name"])
}

func (c *current) onImport1(source, alias any) (any, error) {
	var aliasStr *string
	if alias != nil {
		// alias is [_, "as", _, string]
		aliasValue := alias.([]interface{})[3].(string)
		aliasStr = &aliasValue
	}
	return &ImportDecl{
		Source: source.(string),
		Alias:  aliasStr,
		Loc:    c.Loc(),
	}, nil
}

func (p *parser) callonImport1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImport1(stack["source"], stack["alias"])
}

func (c *current) onDaggerKeyword1() (any, error) {
	return "dagger", nil
}

func (p *parser) callonDaggerKeyword1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDaggerKeyword1()
}

func (c *current) onSchemaURL1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonSchemaURL1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSchemaURL1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any

	leader        bool
	leftRecursive bool
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type ruleWithExpsStack struct {
	rule   *rule
	estack []any
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleRecursiveLeader(rule *rule) (any, bool) {
	result, ok := p.getMemoized(rule)
	if ok {
		p.restore(result.end)
		return result.v, result.b
	}

	if p.debug {
		defer p.out(p.in("recursive " + rule.name))
	}

	var (
		depth      = 0
		startMark  = p.pt
		lastResult = resultTuple{nil, false, startMark}
		lastErrors = *p.errs
	)

	for {
		lastState := p.cloneState()
		p.setMemoized(startMark, rule, lastResult)
		val, ok := p.parseRule(rule)
		endMark := p.pt
		if p.debug {
			p.printIndent("RECURSIVE", fmt.Sprintf(
				"Rule %s depth %d: %t -> %s",
				rule.name, depth, ok, string(p.sliceFrom(startMark))))
		}
		if (!ok) || (endMark.offset <= lastResult.end.offset && depth != 0) {
			p.restoreState(lastState)
			*p.errs = lastErrors
			break
		}
		lastResult = resultTuple{val, ok, endMark}
		lastErrors = *p.errs
		p.restore(startMark)
		depth++
	}

	p.restore(lastResult.end)
	p.setMemoized(startMark, rule, lastResult)
	return lastResult.v, lastResult.b
}

func (p *parser) parseRuleRecursiveNoLeader(rule *rule) (any, bool) {
	return p.parseRule(rule)
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize || rule.leftRecursive {
		if rule.leader {
			val, ok = p.parseRuleRecursiveLeader(rule)
		} else if p.memoize && !rule.leftRecursive {
			val, ok = p.parseRuleMemoize(rule)
		} else {
			val, ok = p.parseRuleRecursiveNoLeader(rule)
		}
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	isLeftRecursion := p.rstack[len(p.rstack)-1].leftRecursive
	if p.memoize && !isLeftRecursion {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize && !isLeftRecursion {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
