// Code generated by pigeon; DO NOT EDIT.

package dash

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Dash",
			pos:  position{line: 5, col: 1, offset: 20},
			expr: &actionExpr{
				pos: position{line: 5, col: 9, offset: 28},
				run: (*parser).callonDash1,
				expr: &seqExpr{
					pos: position{line: 5, col: 9, offset: 28},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 5, col: 9, offset: 28},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 5, col: 11, offset: 30},
							label: "eles",
							expr: &zeroOrMoreExpr{
								pos: position{line: 5, col: 16, offset: 35},
								expr: &actionExpr{
									pos: position{line: 5, col: 17, offset: 36},
									run: (*parser).callonDash6,
									expr: &seqExpr{
										pos: position{line: 5, col: 17, offset: 36},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 5, col: 17, offset: 36},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 5, col: 19, offset: 38},
													name: "Expr",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 5, col: 24, offset: 43},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 5, col: 48, offset: 67},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 5, col: 53, offset: 72},
								expr: &ruleRefExpr{
									pos:  position{line: 5, col: 53, offset: 72},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 5, col: 59, offset: 78},
							name: "_",
						},
						&notExpr{
							pos: position{line: 5, col: 61, offset: 80},
							expr: &anyMatcher{
								line: 5, col: 62, offset: 81,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 16, col: 1, offset: 274},
			expr: &zeroOrMoreExpr{
				pos: position{line: 16, col: 19, offset: 292},
				expr: &choiceExpr{
					pos: position{line: 16, col: 20, offset: 293},
					alternatives: []any{
						&charClassMatcher{
							pos:        position{line: 16, col: 20, offset: 293},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
						&ruleRefExpr{
							pos:  position{line: 16, col: 32, offset: 305},
							name: "CommentToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "_lineSpace",
			pos:  position{line: 17, col: 1, offset: 320},
			expr: &zeroOrMoreExpr{
				pos: position{line: 17, col: 15, offset: 334},
				expr: &charClassMatcher{
					pos:        position{line: 17, col: 15, offset: 334},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Sep",
			pos:  position{line: 19, col: 1, offset: 342},
			expr: &seqExpr{
				pos: position{line: 19, col: 8, offset: 349},
				exprs: []any{
					&choiceExpr{
						pos: position{line: 19, col: 9, offset: 350},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 19, col: 9, offset: 350},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 19, col: 9, offset: 350},
										name: "_",
									},
									&ruleRefExpr{
										pos:  position{line: 19, col: 11, offset: 352},
										name: "CommaToken",
									},
								},
							},
							&seqExpr{
								pos: position{line: 19, col: 24, offset: 365},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 19, col: 24, offset: 365},
										name: "_lineSpace",
									},
									&litMatcher{
										pos:        position{line: 19, col: 35, offset: 376},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 19, col: 41, offset: 382},
						name: "_",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CommaToken",
			pos:  position{line: 20, col: 1, offset: 384},
			expr: &litMatcher{
				pos:        position{line: 20, col: 15, offset: 398},
				val:        ",",
				ignoreCase: false,
				want:       "\",\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Expr",
			pos:  position{line: 22, col: 1, offset: 403},
			expr: &choiceExpr{
				pos: position{line: 22, col: 9, offset: 411},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 22, col: 9, offset: 411},
						name: "Class",
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 17, offset: 419},
						name: "Slot",
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 24, offset: 426},
						name: "CompoundAssignment",
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 45, offset: 447},
						name: "Reassignment",
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 60, offset: 462},
						name: "Reopen",
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 69, offset: 471},
						name: "Form",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Form",
			pos:  position{line: 24, col: 1, offset: 477},
			expr: &choiceExpr{
				pos: position{line: 24, col: 9, offset: 485},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 24, col: 9, offset: 485},
						name: "Conditional",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 23, offset: 499},
						name: "Let",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 29, offset: 505},
						name: "Lambda",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 38, offset: 514},
						name: "Match",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 46, offset: 522},
						name: "Assert",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 55, offset: 531},
						name: "Infix",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 63, offset: 539},
						name: "Term",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Term",
			pos:  position{line: 26, col: 1, offset: 545},
			expr: &choiceExpr{
				pos: position{line: 26, col: 9, offset: 553},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 26, col: 9, offset: 553},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 19, offset: 563},
						name: "SelectOrCall",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 34, offset: 578},
						name: "List",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 41, offset: 585},
						name: "Object",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 50, offset: 594},
						name: "Block",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 58, offset: 602},
						name: "ParenForm",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 70, offset: 614},
						name: "SymbolOrCall",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "ParenForm",
			pos:  position{line: 28, col: 1, offset: 628},
			expr: &actionExpr{
				pos: position{line: 28, col: 14, offset: 641},
				run: (*parser).callonParenForm1,
				expr: &seqExpr{
					pos: position{line: 28, col: 14, offset: 641},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 28, col: 14, offset: 641},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 18, offset: 645},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 28, col: 20, offset: 647},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 28, col: 25, offset: 652},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 30, offset: 657},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 28, col: 32, offset: 659},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SymbolOrCall",
			pos:  position{line: 33, col: 1, offset: 735},
			expr: &choiceExpr{
				pos: position{line: 33, col: 17, offset: 751},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 33, col: 17, offset: 751},
						name: "Call",
					},
					&ruleRefExpr{
						pos:  position{line: 33, col: 24, offset: 758},
						name: "Symbol",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Call",
			pos:  position{line: 34, col: 1, offset: 765},
			expr: &actionExpr{
				pos: position{line: 34, col: 9, offset: 773},
				run: (*parser).callonCall1,
				expr: &seqExpr{
					pos: position{line: 34, col: 9, offset: 773},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 34, col: 9, offset: 773},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 34, col: 14, offset: 778},
								name: "Id",
							},
						},
						&labeledExpr{
							pos:   position{line: 34, col: 17, offset: 781},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 34, col: 22, offset: 786},
								name: "ArgValues",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Symbol",
			pos:  position{line: 48, col: 1, offset: 1115},
			expr: &actionExpr{
				pos: position{line: 48, col: 11, offset: 1125},
				run: (*parser).callonSymbol1,
				expr: &labeledExpr{
					pos:   position{line: 48, col: 11, offset: 1125},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 48, col: 16, offset: 1130},
						name: "Id",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SelectOrCall",
			pos:  position{line: 62, col: 1, offset: 1386},
			expr: &actionExpr{
				pos: position{line: 62, col: 17, offset: 1402},
				run: (*parser).callonSelectOrCall1,
				expr: &seqExpr{
					pos: position{line: 62, col: 17, offset: 1402},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 62, col: 17, offset: 1402},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 62, col: 22, offset: 1407},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 62, col: 27, offset: 1412},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 62, col: 29, offset: 1414},
							name: "DotToken",
						},
						&ruleRefExpr{
							pos:  position{line: 62, col: 38, offset: 1423},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 62, col: 40, offset: 1425},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 62, col: 45, offset: 1430},
								name: "Id",
							},
						},
						&labeledExpr{
							pos:   position{line: 62, col: 48, offset: 1433},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 62, col: 53, offset: 1438},
								expr: &ruleRefExpr{
									pos:  position{line: 62, col: 53, offset: 1438},
									name: "ArgValues",
								},
							},
						},
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "Class",
			pos:  position{line: 92, col: 1, offset: 2092},
			expr: &actionExpr{
				pos: position{line: 92, col: 10, offset: 2101},
				run: (*parser).callonClass1,
				expr: &seqExpr{
					pos: position{line: 92, col: 10, offset: 2101},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 92, col: 10, offset: 2101},
							name: "ClsToken",
						},
						&ruleRefExpr{
							pos:  position{line: 92, col: 19, offset: 2110},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 92, col: 21, offset: 2112},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 92, col: 26, offset: 2117},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 92, col: 29, offset: 2120},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 92, col: 31, offset: 2122},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 92, col: 37, offset: 2128},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ClsToken",
			pos:  position{line: 104, col: 1, offset: 2379},
			expr: &seqExpr{
				pos: position{line: 104, col: 13, offset: 2391},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 104, col: 13, offset: 2391},
						val:        "cls",
						ignoreCase: false,
						want:       "\"cls\"",
					},
					&notExpr{
						pos: position{line: 104, col: 19, offset: 2397},
						expr: &ruleRefExpr{
							pos:  position{line: 104, col: 20, offset: 2398},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Slot",
			pos:  position{line: 106, col: 1, offset: 2408},
			expr: &choiceExpr{
				pos: position{line: 106, col: 9, offset: 2416},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 106, col: 9, offset: 2416},
						name: "TypeAndArgsAndBlockSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 107, col: 9, offset: 2485},
						name: "TypeAndBlockSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 9, offset: 2619},
						name: "TypeAndValueSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 109, col: 9, offset: 2758},
						name: "ValueOnlySlot",
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 9, offset: 2852},
						name: "TypeOnlySlot",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeAndValueSlot",
			pos:  position{line: 112, col: 1, offset: 2940},
			expr: &actionExpr{
				pos: position{line: 112, col: 21, offset: 2960},
				run: (*parser).callonTypeAndValueSlot1,
				expr: &seqExpr{
					pos: position{line: 112, col: 21, offset: 2960},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 112, col: 21, offset: 2960},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 25, offset: 2964},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 36, offset: 2975},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 112, col: 38, offset: 2977},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 43, offset: 2982},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 46, offset: 2985},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 48, offset: 2987},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 59, offset: 2998},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 112, col: 61, offset: 3000},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 67, offset: 3006},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 72, offset: 3011},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 112, col: 74, offset: 3013},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 78, offset: 3017},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 112, col: 80, offset: 3019},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 86, offset: 3025},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ValueOnlySlot",
			pos:  position{line: 126, col: 1, offset: 3294},
			expr: &actionExpr{
				pos: position{line: 126, col: 18, offset: 3311},
				run: (*parser).callonValueOnlySlot1,
				expr: &seqExpr{
					pos: position{line: 126, col: 18, offset: 3311},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 126, col: 18, offset: 3311},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 22, offset: 3315},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 126, col: 33, offset: 3326},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 126, col: 35, offset: 3328},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 40, offset: 3333},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 126, col: 43, offset: 3336},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 126, col: 45, offset: 3338},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 126, col: 49, offset: 3342},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 126, col: 51, offset: 3344},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 55, offset: 3348},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeOnlySlot",
			pos:  position{line: 139, col: 1, offset: 3586},
			expr: &actionExpr{
				pos: position{line: 139, col: 17, offset: 3602},
				run: (*parser).callonTypeOnlySlot1,
				expr: &seqExpr{
					pos: position{line: 139, col: 17, offset: 3602},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 139, col: 17, offset: 3602},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 139, col: 21, offset: 3606},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 139, col: 32, offset: 3617},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 139, col: 34, offset: 3619},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 139, col: 39, offset: 3624},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 139, col: 42, offset: 3627},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 139, col: 44, offset: 3629},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 139, col: 55, offset: 3640},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 139, col: 57, offset: 3642},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 139, col: 63, offset: 3648},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeAndBlockSlot",
			pos:  position{line: 152, col: 1, offset: 3892},
			expr: &actionExpr{
				pos: position{line: 152, col: 21, offset: 3912},
				run: (*parser).callonTypeAndBlockSlot1,
				expr: &seqExpr{
					pos: position{line: 152, col: 21, offset: 3912},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 152, col: 21, offset: 3912},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 25, offset: 3916},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 36, offset: 3927},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 152, col: 38, offset: 3929},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 43, offset: 3934},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 46, offset: 3937},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 48, offset: 3939},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 59, offset: 3950},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 152, col: 61, offset: 3952},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 67, offset: 3958},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 72, offset: 3963},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 152, col: 74, offset: 3965},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 80, offset: 3971},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeAndArgsAndBlockSlot",
			pos:  position{line: 179, col: 1, offset: 4582},
			expr: &actionExpr{
				pos: position{line: 179, col: 28, offset: 4609},
				run: (*parser).callonTypeAndArgsAndBlockSlot1,
				expr: &seqExpr{
					pos: position{line: 179, col: 28, offset: 4609},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 179, col: 28, offset: 4609},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 179, col: 32, offset: 4613},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 179, col: 43, offset: 4624},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 179, col: 45, offset: 4626},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 179, col: 50, offset: 4631},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 179, col: 53, offset: 4634},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 179, col: 55, offset: 4636},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 179, col: 60, offset: 4641},
								name: "ArgTypes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 179, col: 69, offset: 4650},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 179, col: 71, offset: 4652},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 179, col: 82, offset: 4663},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 179, col: 84, offset: 4665},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 179, col: 90, offset: 4671},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 179, col: 95, offset: 4676},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 179, col: 97, offset: 4678},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 179, col: 103, offset: 4684},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Visibility",
			pos:  position{line: 206, col: 1, offset: 5323},
			expr: &choiceExpr{
				pos: position{line: 206, col: 15, offset: 5337},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 206, col: 15, offset: 5337},
						run: (*parser).callonVisibility2,
						expr: &ruleRefExpr{
							pos:  position{line: 206, col: 15, offset: 5337},
							name: "PubToken",
						},
					},
					&actionExpr{
						pos: position{line: 207, col: 15, offset: 5393},
						run: (*parser).callonVisibility4,
						expr: &ruleRefExpr{
							pos:  position{line: 207, col: 15, offset: 5393},
							name: "PvtToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PubToken",
			pos:  position{line: 208, col: 1, offset: 5436},
			expr: &seqExpr{
				pos: position{line: 208, col: 13, offset: 5448},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 208, col: 13, offset: 5448},
						val:        "pub",
						ignoreCase: false,
						want:       "\"pub\"",
					},
					&notExpr{
						pos: position{line: 208, col: 19, offset: 5454},
						expr: &ruleRefExpr{
							pos:  position{line: 208, col: 20, offset: 5455},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PvtToken",
			pos:  position{line: 209, col: 1, offset: 5464},
			expr: &seqExpr{
				pos: position{line: 209, col: 13, offset: 5476},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 209, col: 13, offset: 5476},
						val:        "pvt",
						ignoreCase: false,
						want:       "\"pvt\"",
					},
					&notExpr{
						pos: position{line: 209, col: 19, offset: 5482},
						expr: &ruleRefExpr{
							pos:  position{line: 209, col: 20, offset: 5483},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Id",
			pos:  position{line: 211, col: 1, offset: 5493},
			expr: &ruleRefExpr{
				pos:  position{line: 211, col: 7, offset: 5499},
				name: "WordToken",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WordToken",
			pos:  position{line: 212, col: 1, offset: 5509},
			expr: &actionExpr{
				pos: position{line: 212, col: 14, offset: 5522},
				run: (*parser).callonWordToken1,
				expr: &seqExpr{
					pos: position{line: 212, col: 14, offset: 5522},
					exprs: []any{
						&notExpr{
							pos: position{line: 212, col: 14, offset: 5522},
							expr: &ruleRefExpr{
								pos:  position{line: 212, col: 15, offset: 5523},
								name: "NullToken",
							},
						},
						&charClassMatcher{
							pos:        position{line: 212, col: 25, offset: 5533},
							val:        "[a-zA-Z_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 212, col: 34, offset: 5542},
							expr: &charClassMatcher{
								pos:        position{line: 212, col: 34, offset: 5542},
								val:        "[a-zA-Z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WordChar",
			pos:  position{line: 215, col: 1, offset: 5589},
			expr: &charClassMatcher{
				pos:        position{line: 215, col: 13, offset: 5601},
				val:        "[a-zA-Z0-9_]",
				chars:      []rune{'_'},
				ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UpperId",
			pos:  position{line: 216, col: 1, offset: 5614},
			expr: &ruleRefExpr{
				pos:  position{line: 216, col: 12, offset: 5625},
				name: "UpperToken",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UpperToken",
			pos:  position{line: 217, col: 1, offset: 5636},
			expr: &actionExpr{
				pos: position{line: 217, col: 15, offset: 5650},
				run: (*parser).callonUpperToken1,
				expr: &seqExpr{
					pos: position{line: 217, col: 15, offset: 5650},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 217, col: 15, offset: 5650},
							val:        "[A-Z]",
							ranges:     []rune{'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 217, col: 20, offset: 5655},
							expr: &charClassMatcher{
								pos:        position{line: 217, col: 20, offset: 5655},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgValues",
			pos:  position{line: 221, col: 1, offset: 5702},
			expr: &actionExpr{
				pos: position{line: 221, col: 14, offset: 5715},
				run: (*parser).callonArgValues1,
				expr: &seqExpr{
					pos: position{line: 221, col: 14, offset: 5715},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 221, col: 14, offset: 5715},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 221, col: 18, offset: 5719},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 221, col: 20, offset: 5721},
							label: "args",
							expr: &zeroOrMoreExpr{
								pos: position{line: 221, col: 25, offset: 5726},
								expr: &actionExpr{
									pos: position{line: 221, col: 26, offset: 5727},
									run: (*parser).callonArgValues7,
									expr: &seqExpr{
										pos: position{line: 221, col: 26, offset: 5727},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 221, col: 26, offset: 5727},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 221, col: 28, offset: 5729},
													name: "Argument",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 221, col: 37, offset: 5738},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 221, col: 61, offset: 5762},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 221, col: 66, offset: 5767},
								expr: &ruleRefExpr{
									pos:  position{line: 221, col: 66, offset: 5767},
									name: "Argument",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 221, col: 76, offset: 5777},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 221, col: 78, offset: 5779},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgTypes",
			pos:  position{line: 224, col: 1, offset: 5840},
			expr: &actionExpr{
				pos: position{line: 224, col: 13, offset: 5852},
				run: (*parser).callonArgTypes1,
				expr: &seqExpr{
					pos: position{line: 224, col: 13, offset: 5852},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 224, col: 13, offset: 5852},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 224, col: 17, offset: 5856},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 224, col: 19, offset: 5858},
							label: "args",
							expr: &zeroOrMoreExpr{
								pos: position{line: 224, col: 24, offset: 5863},
								expr: &actionExpr{
									pos: position{line: 224, col: 25, offset: 5864},
									run: (*parser).callonArgTypes7,
									expr: &seqExpr{
										pos: position{line: 224, col: 25, offset: 5864},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 224, col: 25, offset: 5864},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 224, col: 27, offset: 5866},
													name: "ArgType",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 224, col: 35, offset: 5874},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 224, col: 59, offset: 5898},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 224, col: 64, offset: 5903},
								expr: &ruleRefExpr{
									pos:  position{line: 224, col: 64, offset: 5903},
									name: "ArgType",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 224, col: 73, offset: 5912},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 224, col: 75, offset: 5914},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgType",
			pos:  position{line: 227, col: 1, offset: 5972},
			expr: &actionExpr{
				pos: position{line: 227, col: 12, offset: 5983},
				run: (*parser).callonArgType1,
				expr: &labeledExpr{
					pos:   position{line: 227, col: 12, offset: 5983},
					label: "slot",
					expr: &choiceExpr{
						pos: position{line: 227, col: 18, offset: 5989},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 227, col: 18, offset: 5989},
								name: "ArgWithDefault",
							},
							&ruleRefExpr{
								pos:  position{line: 227, col: 35, offset: 6006},
								name: "ArgWithBlockDefault",
							},
							&ruleRefExpr{
								pos:  position{line: 227, col: 57, offset: 6028},
								name: "ArgWithType",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithDefault",
			pos:  position{line: 230, col: 1, offset: 6075},
			expr: &actionExpr{
				pos: position{line: 230, col: 19, offset: 6093},
				run: (*parser).callonArgWithDefault1,
				expr: &seqExpr{
					pos: position{line: 230, col: 19, offset: 6093},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 230, col: 19, offset: 6093},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 24, offset: 6098},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 27, offset: 6101},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 29, offset: 6103},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 40, offset: 6114},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 230, col: 42, offset: 6116},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 48, offset: 6122},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 53, offset: 6127},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 230, col: 55, offset: 6129},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 59, offset: 6133},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 230, col: 61, offset: 6135},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 67, offset: 6141},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithBlockDefault",
			pos:  position{line: 237, col: 1, offset: 6258},
			expr: &actionExpr{
				pos: position{line: 237, col: 24, offset: 6281},
				run: (*parser).callonArgWithBlockDefault1,
				expr: &seqExpr{
					pos: position{line: 237, col: 24, offset: 6281},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 237, col: 24, offset: 6281},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 29, offset: 6286},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 237, col: 32, offset: 6289},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 237, col: 34, offset: 6291},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 237, col: 45, offset: 6302},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 237, col: 47, offset: 6304},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 53, offset: 6310},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 237, col: 58, offset: 6315},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 237, col: 60, offset: 6317},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 66, offset: 6323},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithType",
			pos:  position{line: 244, col: 1, offset: 6442},
			expr: &actionExpr{
				pos: position{line: 244, col: 16, offset: 6457},
				run: (*parser).callonArgWithType1,
				expr: &seqExpr{
					pos: position{line: 244, col: 16, offset: 6457},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 244, col: 16, offset: 6457},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 21, offset: 6462},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 24, offset: 6465},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 26, offset: 6467},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 244, col: 37, offset: 6478},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 244, col: 39, offset: 6480},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 244, col: 45, offset: 6486},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Argument",
			pos:  position{line: 251, col: 1, offset: 6579},
			expr: &choiceExpr{
				pos: position{line: 251, col: 13, offset: 6591},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 251, col: 13, offset: 6591},
						name: "KeyValue",
					},
					&ruleRefExpr{
						pos:  position{line: 251, col: 24, offset: 6602},
						name: "PositionalValue",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "KeyValue",
			pos:  position{line: 253, col: 1, offset: 6619},
			expr: &actionExpr{
				pos: position{line: 253, col: 13, offset: 6631},
				run: (*parser).callonKeyValue1,
				expr: &seqExpr{
					pos: position{line: 253, col: 13, offset: 6631},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 253, col: 13, offset: 6631},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 253, col: 17, offset: 6635},
								name: "WordToken",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 253, col: 27, offset: 6645},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 253, col: 38, offset: 6656},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 253, col: 40, offset: 6658},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 253, col: 46, offset: 6664},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PositionalValue",
			pos:  position{line: 257, col: 1, offset: 6759},
			expr: &actionExpr{
				pos: position{line: 257, col: 20, offset: 6778},
				run: (*parser).callonPositionalValue1,
				expr: &labeledExpr{
					pos:   position{line: 257, col: 20, offset: 6778},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 257, col: 26, offset: 6784},
						name: "Form",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ColonToken",
			pos:  position{line: 260, col: 1, offset: 6867},
			expr: &litMatcher{
				pos:        position{line: 260, col: 15, offset: 6881},
				val:        ":",
				ignoreCase: false,
				want:       "\":\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Type",
			pos:  position{line: 262, col: 1, offset: 6886},
			expr: &choiceExpr{
				pos: position{line: 262, col: 9, offset: 6894},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 262, col: 9, offset: 6894},
						name: "NonNull",
					},
					&ruleRefExpr{
						pos:  position{line: 262, col: 19, offset: 6904},
						name: "NamedType",
					},
					&ruleRefExpr{
						pos:  position{line: 262, col: 31, offset: 6916},
						name: "ListType",
					},
					&ruleRefExpr{
						pos:  position{line: 262, col: 42, offset: 6927},
						name: "TypeVariable",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "NamedType",
			pos:  position{line: 263, col: 1, offset: 6940},
			expr: &actionExpr{
				pos: position{line: 263, col: 14, offset: 6953},
				run: (*parser).callonNamedType1,
				expr: &labeledExpr{
					pos:   position{line: 263, col: 14, offset: 6953},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 263, col: 19, offset: 6958},
						name: "UpperId",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ListType",
			pos:  position{line: 266, col: 1, offset: 7013},
			expr: &actionExpr{
				pos: position{line: 266, col: 13, offset: 7025},
				run: (*parser).callonListType1,
				expr: &seqExpr{
					pos: position{line: 266, col: 13, offset: 7025},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 266, col: 13, offset: 7025},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 266, col: 17, offset: 7029},
							label: "inner",
							expr: &ruleRefExpr{
								pos:  position{line: 266, col: 23, offset: 7035},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 266, col: 28, offset: 7040},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NonNull",
			pos:  position{line: 269, col: 1, offset: 7093},
			expr: &actionExpr{
				pos: position{line: 269, col: 12, offset: 7104},
				run: (*parser).callonNonNull1,
				expr: &seqExpr{
					pos: position{line: 269, col: 12, offset: 7104},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 269, col: 12, offset: 7104},
							label: "inner",
							expr: &ruleRefExpr{
								pos:  position{line: 269, col: 18, offset: 7110},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 269, col: 23, offset: 7115},
							name: "BangToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "TypeVariable",
			pos:  position{line: 272, col: 1, offset: 7177},
			expr: &actionExpr{
				pos: position{line: 272, col: 17, offset: 7193},
				run: (*parser).callonTypeVariable1,
				expr: &labeledExpr{
					pos:   position{line: 272, col: 17, offset: 7193},
					label: "v",
					expr: &charClassMatcher{
						pos:        position{line: 272, col: 19, offset: 7195},
						val:        "[a-z]",
						ranges:     []rune{'a', 'z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "BangToken",
			pos:  position{line: 276, col: 1, offset: 7252},
			expr: &litMatcher{
				pos:        position{line: 276, col: 14, offset: 7265},
				val:        "!",
				ignoreCase: false,
				want:       "\"!\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Infix",
			pos:  position{line: 278, col: 1, offset: 7270},
			expr: &choiceExpr{
				pos: position{line: 278, col: 10, offset: 7279},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 278, col: 10, offset: 7279},
						name: "Equality",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 21, offset: 7290},
						name: "Inequality",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 34, offset: 7303},
						name: "LessThanEqual",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 50, offset: 7319},
						name: "LessThan",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 61, offset: 7330},
						name: "GreaterThanEqual",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 80, offset: 7349},
						name: "GreaterThan",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 94, offset: 7363},
						name: "Default",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 104, offset: 7373},
						name: "Addition",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 115, offset: 7384},
						name: "Subtraction",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 129, offset: 7398},
						name: "Multiplication",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 146, offset: 7415},
						name: "Division",
					},
					&ruleRefExpr{
						pos:  position{line: 278, col: 157, offset: 7426},
						name: "Modulo",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Default",
			pos:  position{line: 279, col: 1, offset: 7433},
			expr: &actionExpr{
				pos: position{line: 279, col: 12, offset: 7444},
				run: (*parser).callonDefault1,
				expr: &seqExpr{
					pos: position{line: 279, col: 12, offset: 7444},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 279, col: 12, offset: 7444},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 17, offset: 7449},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 279, col: 22, offset: 7454},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 279, col: 24, offset: 7456},
							name: "InterroToken",
						},
						&ruleRefExpr{
							pos:  position{line: 279, col: 37, offset: 7469},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 279, col: 39, offset: 7471},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 279, col: 45, offset: 7477},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "InterroToken",
			pos:  position{line: 290, col: 1, offset: 7678},
			expr: &litMatcher{
				pos:        position{line: 290, col: 17, offset: 7694},
				val:        "?",
				ignoreCase: false,
				want:       "\"?\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Addition",
			pos:  position{line: 292, col: 1, offset: 7699},
			expr: &actionExpr{
				pos: position{line: 292, col: 13, offset: 7711},
				run: (*parser).callonAddition1,
				expr: &seqExpr{
					pos: position{line: 292, col: 13, offset: 7711},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 292, col: 13, offset: 7711},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 292, col: 18, offset: 7716},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 292, col: 23, offset: 7721},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 292, col: 25, offset: 7723},
							name: "PlusToken",
						},
						&ruleRefExpr{
							pos:  position{line: 292, col: 35, offset: 7733},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 292, col: 37, offset: 7735},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 292, col: 43, offset: 7741},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PlusToken",
			pos:  position{line: 303, col: 1, offset: 7943},
			expr: &litMatcher{
				pos:        position{line: 303, col: 14, offset: 7956},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Subtraction",
			pos:  position{line: 305, col: 1, offset: 7961},
			expr: &actionExpr{
				pos: position{line: 305, col: 16, offset: 7976},
				run: (*parser).callonSubtraction1,
				expr: &seqExpr{
					pos: position{line: 305, col: 16, offset: 7976},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 305, col: 16, offset: 7976},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 21, offset: 7981},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 305, col: 26, offset: 7986},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 305, col: 28, offset: 7988},
							name: "MinusToken",
						},
						&ruleRefExpr{
							pos:  position{line: 305, col: 39, offset: 7999},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 305, col: 41, offset: 8001},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 305, col: 47, offset: 8007},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MinusToken",
			pos:  position{line: 316, col: 1, offset: 8212},
			expr: &litMatcher{
				pos:        position{line: 316, col: 15, offset: 8226},
				val:        "-",
				ignoreCase: false,
				want:       "\"-\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Multiplication",
			pos:  position{line: 318, col: 1, offset: 8231},
			expr: &actionExpr{
				pos: position{line: 318, col: 19, offset: 8249},
				run: (*parser).callonMultiplication1,
				expr: &seqExpr{
					pos: position{line: 318, col: 19, offset: 8249},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 318, col: 19, offset: 8249},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 24, offset: 8254},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 318, col: 29, offset: 8259},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 318, col: 31, offset: 8261},
							name: "StarToken",
						},
						&ruleRefExpr{
							pos:  position{line: 318, col: 41, offset: 8271},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 318, col: 43, offset: 8273},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 318, col: 49, offset: 8279},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "StarToken",
			pos:  position{line: 329, col: 1, offset: 8487},
			expr: &litMatcher{
				pos:        position{line: 329, col: 14, offset: 8500},
				val:        "*",
				ignoreCase: false,
				want:       "\"*\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Division",
			pos:  position{line: 331, col: 1, offset: 8505},
			expr: &actionExpr{
				pos: position{line: 331, col: 13, offset: 8517},
				run: (*parser).callonDivision1,
				expr: &seqExpr{
					pos: position{line: 331, col: 13, offset: 8517},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 331, col: 13, offset: 8517},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 18, offset: 8522},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 331, col: 23, offset: 8527},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 331, col: 25, offset: 8529},
							name: "SlashToken",
						},
						&ruleRefExpr{
							pos:  position{line: 331, col: 36, offset: 8540},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 331, col: 38, offset: 8542},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 331, col: 44, offset: 8548},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SlashToken",
			pos:  position{line: 342, col: 1, offset: 8750},
			expr: &litMatcher{
				pos:        position{line: 342, col: 15, offset: 8764},
				val:        "/",
				ignoreCase: false,
				want:       "\"/\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Modulo",
			pos:  position{line: 344, col: 1, offset: 8769},
			expr: &actionExpr{
				pos: position{line: 344, col: 11, offset: 8779},
				run: (*parser).callonModulo1,
				expr: &seqExpr{
					pos: position{line: 344, col: 11, offset: 8779},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 344, col: 11, offset: 8779},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 16, offset: 8784},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 344, col: 21, offset: 8789},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 344, col: 23, offset: 8791},
							name: "PercentToken",
						},
						&ruleRefExpr{
							pos:  position{line: 344, col: 36, offset: 8804},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 344, col: 38, offset: 8806},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 344, col: 44, offset: 8812},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PercentToken",
			pos:  position{line: 355, col: 1, offset: 9012},
			expr: &seqExpr{
				pos: position{line: 355, col: 17, offset: 9028},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 355, col: 17, offset: 9028},
						val:        "%",
						ignoreCase: false,
						want:       "\"%\"",
					},
					&notExpr{
						pos: position{line: 355, col: 21, offset: 9032},
						expr: &choiceExpr{
							pos: position{line: 355, col: 23, offset: 9034},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 355, col: 23, offset: 9034},
									name: "WordChar",
								},
								&litMatcher{
									pos:        position{line: 355, col: 34, offset: 9045},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Equality",
			pos:  position{line: 357, col: 1, offset: 9051},
			expr: &actionExpr{
				pos: position{line: 357, col: 13, offset: 9063},
				run: (*parser).callonEquality1,
				expr: &seqExpr{
					pos: position{line: 357, col: 13, offset: 9063},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 357, col: 13, offset: 9063},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 18, offset: 9068},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 357, col: 23, offset: 9073},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 357, col: 25, offset: 9075},
							name: "EqualToken",
						},
						&ruleRefExpr{
							pos:  position{line: 357, col: 36, offset: 9086},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 357, col: 38, offset: 9088},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 357, col: 44, offset: 9094},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EqualToken",
			pos:  position{line: 368, col: 1, offset: 9296},
			expr: &litMatcher{
				pos:        position{line: 368, col: 15, offset: 9310},
				val:        "==",
				ignoreCase: false,
				want:       "\"==\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Inequality",
			pos:  position{line: 370, col: 1, offset: 9316},
			expr: &actionExpr{
				pos: position{line: 370, col: 15, offset: 9330},
				run: (*parser).callonInequality1,
				expr: &seqExpr{
					pos: position{line: 370, col: 15, offset: 9330},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 370, col: 15, offset: 9330},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 370, col: 20, offset: 9335},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 370, col: 25, offset: 9340},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 370, col: 27, offset: 9342},
							name: "NotEqualToken",
						},
						&ruleRefExpr{
							pos:  position{line: 370, col: 41, offset: 9356},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 370, col: 43, offset: 9358},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 370, col: 49, offset: 9364},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NotEqualToken",
			pos:  position{line: 381, col: 1, offset: 9568},
			expr: &litMatcher{
				pos:        position{line: 381, col: 18, offset: 9585},
				val:        "!=",
				ignoreCase: false,
				want:       "\"!=\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LessThanEqual",
			pos:  position{line: 383, col: 1, offset: 9591},
			expr: &actionExpr{
				pos: position{line: 383, col: 18, offset: 9608},
				run: (*parser).callonLessThanEqual1,
				expr: &seqExpr{
					pos: position{line: 383, col: 18, offset: 9608},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 383, col: 18, offset: 9608},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 23, offset: 9613},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 383, col: 28, offset: 9618},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 383, col: 30, offset: 9620},
							name: "LessEqualToken",
						},
						&ruleRefExpr{
							pos:  position{line: 383, col: 45, offset: 9635},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 383, col: 47, offset: 9637},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 383, col: 53, offset: 9643},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LessEqualToken",
			pos:  position{line: 394, col: 1, offset: 9850},
			expr: &litMatcher{
				pos:        position{line: 394, col: 19, offset: 9868},
				val:        "<=",
				ignoreCase: false,
				want:       "\"<=\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LessThan",
			pos:  position{line: 396, col: 1, offset: 9874},
			expr: &actionExpr{
				pos: position{line: 396, col: 13, offset: 9886},
				run: (*parser).callonLessThan1,
				expr: &seqExpr{
					pos: position{line: 396, col: 13, offset: 9886},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 396, col: 13, offset: 9886},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 18, offset: 9891},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 396, col: 23, offset: 9896},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 396, col: 25, offset: 9898},
							name: "LessToken",
						},
						&ruleRefExpr{
							pos:  position{line: 396, col: 35, offset: 9908},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 396, col: 37, offset: 9910},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 396, col: 43, offset: 9916},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LessToken",
			pos:  position{line: 407, col: 1, offset: 10118},
			expr: &litMatcher{
				pos:        position{line: 407, col: 14, offset: 10131},
				val:        "<",
				ignoreCase: false,
				want:       "\"<\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ReopenToken",
			pos:  position{line: 408, col: 1, offset: 10135},
			expr: &litMatcher{
				pos:        position{line: 408, col: 16, offset: 10150},
				val:        "<<",
				ignoreCase: false,
				want:       "\"<<\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GreaterThanEqual",
			pos:  position{line: 410, col: 1, offset: 10156},
			expr: &actionExpr{
				pos: position{line: 410, col: 21, offset: 10176},
				run: (*parser).callonGreaterThanEqual1,
				expr: &seqExpr{
					pos: position{line: 410, col: 21, offset: 10176},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 410, col: 21, offset: 10176},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 26, offset: 10181},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 410, col: 31, offset: 10186},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 410, col: 33, offset: 10188},
							name: "GreaterEqualToken",
						},
						&ruleRefExpr{
							pos:  position{line: 410, col: 51, offset: 10206},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 410, col: 53, offset: 10208},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 410, col: 59, offset: 10214},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GreaterEqualToken",
			pos:  position{line: 421, col: 1, offset: 10424},
			expr: &litMatcher{
				pos:        position{line: 421, col: 22, offset: 10445},
				val:        ">=",
				ignoreCase: false,
				want:       "\">=\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GreaterThan",
			pos:  position{line: 423, col: 1, offset: 10451},
			expr: &actionExpr{
				pos: position{line: 423, col: 16, offset: 10466},
				run: (*parser).callonGreaterThan1,
				expr: &seqExpr{
					pos: position{line: 423, col: 16, offset: 10466},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 423, col: 16, offset: 10466},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 21, offset: 10471},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 423, col: 26, offset: 10476},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 423, col: 28, offset: 10478},
							name: "GreaterToken",
						},
						&ruleRefExpr{
							pos:  position{line: 423, col: 41, offset: 10491},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 423, col: 43, offset: 10493},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 423, col: 49, offset: 10499},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GreaterToken",
			pos:  position{line: 434, col: 1, offset: 10704},
			expr: &litMatcher{
				pos:        position{line: 434, col: 17, offset: 10720},
				val:        ">",
				ignoreCase: false,
				want:       "\">\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DotToken",
			pos:  position{line: 436, col: 1, offset: 10725},
			expr: &litMatcher{
				pos:        position{line: 436, col: 13, offset: 10737},
				val:        ".",
				ignoreCase: false,
				want:       "\".\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "List",
			pos:  position{line: 438, col: 1, offset: 10742},
			expr: &actionExpr{
				pos: position{line: 438, col: 9, offset: 10750},
				run: (*parser).callonList1,
				expr: &seqExpr{
					pos: position{line: 438, col: 9, offset: 10750},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 438, col: 9, offset: 10750},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 438, col: 13, offset: 10754},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 438, col: 15, offset: 10756},
							label: "eles",
							expr: &zeroOrMoreExpr{
								pos: position{line: 438, col: 20, offset: 10761},
								expr: &actionExpr{
									pos: position{line: 438, col: 21, offset: 10762},
									run: (*parser).callonList7,
									expr: &seqExpr{
										pos: position{line: 438, col: 21, offset: 10762},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 438, col: 21, offset: 10762},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 438, col: 23, offset: 10764},
													name: "Form",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 438, col: 28, offset: 10769},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 438, col: 52, offset: 10793},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 438, col: 57, offset: 10798},
								expr: &ruleRefExpr{
									pos:  position{line: 438, col: 57, offset: 10798},
									name: "Form",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 438, col: 63, offset: 10804},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 438, col: 65, offset: 10806},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Object",
			pos:  position{line: 449, col: 1, offset: 11003},
			expr: &actionExpr{
				pos: position{line: 449, col: 11, offset: 11013},
				run: (*parser).callonObject1,
				expr: &seqExpr{
					pos: position{line: 449, col: 11, offset: 11013},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 449, col: 11, offset: 11013},
							val:        "{{",
							ignoreCase: false,
							want:       "\"{{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 449, col: 16, offset: 11018},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 449, col: 18, offset: 11020},
							label: "vals",
							expr: &zeroOrMoreExpr{
								pos: position{line: 449, col: 23, offset: 11025},
								expr: &actionExpr{
									pos: position{line: 449, col: 24, offset: 11026},
									run: (*parser).callonObject7,
									expr: &seqExpr{
										pos: position{line: 449, col: 24, offset: 11026},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 449, col: 24, offset: 11026},
												label: "v",
												expr: &ruleRefExpr{
													pos:  position{line: 449, col: 26, offset: 11028},
													name: "KeyValue",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 449, col: 35, offset: 11037},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 449, col: 59, offset: 11061},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 449, col: 64, offset: 11066},
								expr: &ruleRefExpr{
									pos:  position{line: 449, col: 64, offset: 11066},
									name: "KeyValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 449, col: 74, offset: 11076},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 449, col: 76, offset: 11078},
							val:        "}}",
							ignoreCase: false,
							want:       "\"}}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Block",
			pos:  position{line: 468, col: 1, offset: 11467},
			expr: &actionExpr{
				pos: position{line: 468, col: 10, offset: 11476},
				run: (*parser).callonBlock1,
				expr: &seqExpr{
					pos: position{line: 468, col: 10, offset: 11476},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 468, col: 10, offset: 11476},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 468, col: 14, offset: 11480},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 468, col: 16, offset: 11482},
							label: "eles",
							expr: &zeroOrMoreExpr{
								pos: position{line: 468, col: 21, offset: 11487},
								expr: &actionExpr{
									pos: position{line: 468, col: 22, offset: 11488},
									run: (*parser).callonBlock7,
									expr: &seqExpr{
										pos: position{line: 468, col: 22, offset: 11488},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 468, col: 22, offset: 11488},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 468, col: 24, offset: 11490},
													name: "Expr",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 468, col: 29, offset: 11495},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 468, col: 53, offset: 11519},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 468, col: 58, offset: 11524},
								expr: &ruleRefExpr{
									pos:  position{line: 468, col: 58, offset: 11524},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 468, col: 64, offset: 11530},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 468, col: 66, offset: 11532},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Literal",
			pos:  position{line: 481, col: 1, offset: 11740},
			expr: &choiceExpr{
				pos: position{line: 481, col: 12, offset: 11751},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 481, col: 12, offset: 11751},
						name: "Int",
					},
					&ruleRefExpr{
						pos:  position{line: 481, col: 18, offset: 11757},
						name: "Boolean",
					},
					&ruleRefExpr{
						pos:  position{line: 481, col: 28, offset: 11767},
						name: "String",
					},
					&ruleRefExpr{
						pos:  position{line: 481, col: 37, offset: 11776},
						name: "Quoted",
					},
					&ruleRefExpr{
						pos:  position{line: 481, col: 46, offset: 11785},
						name: "Null",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Int",
			pos:  position{line: 483, col: 1, offset: 11791},
			expr: &actionExpr{
				pos: position{line: 483, col: 8, offset: 11798},
				run: (*parser).callonInt1,
				expr: &choiceExpr{
					pos: position{line: 483, col: 9, offset: 11799},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 483, col: 9, offset: 11799},
							val:        "0",
							ignoreCase: false,
							want:       "\"0\"",
						},
						&seqExpr{
							pos: position{line: 483, col: 15, offset: 11805},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 483, col: 15, offset: 11805},
									name: "NonZeroDecimalDigit",
								},
								&zeroOrMoreExpr{
									pos: position{line: 483, col: 35, offset: 11825},
									expr: &ruleRefExpr{
										pos:  position{line: 483, col: 35, offset: 11825},
										name: "DecimalDigit",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Exponent",
			pos:  position{line: 498, col: 1, offset: 12102},
			expr: &seqExpr{
				pos: position{line: 498, col: 13, offset: 12114},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 498, col: 13, offset: 12114},
						val:        "e",
						ignoreCase: true,
						want:       "\"e\"i",
					},
					&zeroOrOneExpr{
						pos: position{line: 498, col: 18, offset: 12119},
						expr: &charClassMatcher{
							pos:        position{line: 498, col: 18, offset: 12119},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 498, col: 24, offset: 12125},
						expr: &ruleRefExpr{
							pos:  position{line: 498, col: 24, offset: 12125},
							name: "DecimalDigit",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "String",
			pos:  position{line: 500, col: 1, offset: 12140},
			expr: &actionExpr{
				pos: position{line: 500, col: 11, offset: 12150},
				run: (*parser).callonString1,
				expr: &seqExpr{
					pos: position{line: 500, col: 11, offset: 12150},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 500, col: 11, offset: 12150},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 500, col: 15, offset: 12154},
							expr: &choiceExpr{
								pos: position{line: 500, col: 17, offset: 12156},
								alternatives: []any{
									&seqExpr{
										pos: position{line: 500, col: 17, offset: 12156},
										exprs: []any{
											&notExpr{
												pos: position{line: 500, col: 17, offset: 12156},
												expr: &ruleRefExpr{
													pos:  position{line: 500, col: 18, offset: 12157},
													name: "EscapedChar",
												},
											},
											&anyMatcher{
												line: 500, col: 30, offset: 12169,
											},
										},
									},
									&seqExpr{
										pos: position{line: 500, col: 34, offset: 12173},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 500, col: 34, offset: 12173},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&ruleRefExpr{
												pos:  position{line: 500, col: 39, offset: 12178},
												name: "EscapeSequence",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 500, col: 57, offset: 12196},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EscapedChar",
			pos:  position{line: 516, col: 1, offset: 12520},
			expr: &charClassMatcher{
				pos:        position{line: 516, col: 16, offset: 12535},
				val:        "[\\x00-\\x1f\"\\\\]",
				chars:      []rune{'"', '\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 518, col: 1, offset: 12551},
			expr: &choiceExpr{
				pos: position{line: 518, col: 19, offset: 12569},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 518, col: 19, offset: 12569},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 518, col: 38, offset: 12588},
						name: "UnicodeEscape",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 520, col: 1, offset: 12603},
			expr: &charClassMatcher{
				pos:        position{line: 520, col: 21, offset: 12623},
				val:        "[\"\\\\/bfnrt]",
				chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 522, col: 1, offset: 12636},
			expr: &seqExpr{
				pos: position{line: 522, col: 18, offset: 12653},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 522, col: 18, offset: 12653},
						val:        "u",
						ignoreCase: false,
						want:       "\"u\"",
					},
					&ruleRefExpr{
						pos:  position{line: 522, col: 22, offset: 12657},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 522, col: 31, offset: 12666},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 522, col: 40, offset: 12675},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 522, col: 49, offset: 12684},
						name: "HexDigit",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DecimalDigit",
			pos:  position{line: 524, col: 1, offset: 12694},
			expr: &charClassMatcher{
				pos:        position{line: 524, col: 17, offset: 12710},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NonZeroDecimalDigit",
			pos:  position{line: 526, col: 1, offset: 12717},
			expr: &charClassMatcher{
				pos:        position{line: 526, col: 24, offset: 12740},
				val:        "[1-9]",
				ranges:     []rune{'1', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "HexDigit",
			pos:  position{line: 528, col: 1, offset: 12747},
			expr: &charClassMatcher{
				pos:        position{line: 528, col: 13, offset: 12759},
				val:        "[0-9a-f]i",
				ranges:     []rune{'0', '9', 'a', 'f'},
				ignoreCase: true,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Quoted",
			pos:  position{line: 530, col: 1, offset: 12770},
			expr: &actionExpr{
				pos: position{line: 530, col: 11, offset: 12780},
				run: (*parser).callonQuoted1,
				expr: &seqExpr{
					pos: position{line: 530, col: 11, offset: 12780},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 530, col: 11, offset: 12780},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 530, col: 15, offset: 12784},
							label: "quoter",
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 22, offset: 12791},
								name: "WordToken",
							},
						},
						&litMatcher{
							pos:        position{line: 530, col: 32, offset: 12801},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 530, col: 36, offset: 12805},
							label: "raw",
							expr: &ruleRefExpr{
								pos:  position{line: 530, col: 40, offset: 12809},
								name: "QuotedRawToken",
							},
						},
						&litMatcher{
							pos:        position{line: 530, col: 55, offset: 12824},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "QuotedRawToken",
			pos:  position{line: 536, col: 1, offset: 12897},
			expr: &actionExpr{
				pos: position{line: 536, col: 19, offset: 12915},
				run: (*parser).callonQuotedRawToken1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 536, col: 19, offset: 12915},
					expr: &charClassMatcher{
						pos:        position{line: 536, col: 19, offset: 12915},
						val:        "[^}]",
						chars:      []rune{'}'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Boolean",
			pos:  position{line: 540, col: 1, offset: 12955},
			expr: &choiceExpr{
				pos: position{line: 540, col: 12, offset: 12966},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 540, col: 12, offset: 12966},
						run: (*parser).callonBoolean2,
						expr: &ruleRefExpr{
							pos:  position{line: 540, col: 12, offset: 12966},
							name: "TrueToken",
						},
					},
					&actionExpr{
						pos: position{line: 549, col: 5, offset: 13143},
						run: (*parser).callonBoolean4,
						expr: &ruleRefExpr{
							pos:  position{line: 549, col: 5, offset: 13143},
							name: "FalseToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TrueToken",
			pos:  position{line: 559, col: 1, offset: 13320},
			expr: &seqExpr{
				pos: position{line: 559, col: 14, offset: 13333},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 559, col: 14, offset: 13333},
						val:        "true",
						ignoreCase: false,
						want:       "\"true\"",
					},
					&notExpr{
						pos: position{line: 559, col: 21, offset: 13340},
						expr: &ruleRefExpr{
							pos:  position{line: 559, col: 22, offset: 13341},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FalseToken",
			pos:  position{line: 560, col: 1, offset: 13350},
			expr: &seqExpr{
				pos: position{line: 560, col: 15, offset: 13364},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 560, col: 15, offset: 13364},
						val:        "false",
						ignoreCase: false,
						want:       "\"false\"",
					},
					&notExpr{
						pos: position{line: 560, col: 23, offset: 13372},
						expr: &ruleRefExpr{
							pos:  position{line: 560, col: 24, offset: 13373},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Null",
			pos:  position{line: 562, col: 1, offset: 13383},
			expr: &actionExpr{
				pos: position{line: 562, col: 9, offset: 13391},
				run: (*parser).callonNull1,
				expr: &ruleRefExpr{
					pos:  position{line: 562, col: 9, offset: 13391},
					name: "NullToken",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NullToken",
			pos:  position{line: 571, col: 1, offset: 13546},
			expr: &seqExpr{
				pos: position{line: 571, col: 14, offset: 13559},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 571, col: 14, offset: 13559},
						val:        "null",
						ignoreCase: false,
						want:       "\"null\"",
					},
					&notExpr{
						pos: position{line: 571, col: 21, offset: 13566},
						expr: &ruleRefExpr{
							pos:  position{line: 571, col: 22, offset: 13567},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CommentToken",
			pos:  position{line: 573, col: 1, offset: 13577},
			expr: &seqExpr{
				pos: position{line: 573, col: 17, offset: 13593},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 573, col: 17, offset: 13593},
						val:        "#",
						ignoreCase: false,
						want:       "\"#\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 573, col: 21, offset: 13597},
						expr: &charClassMatcher{
							pos:        position{line: 573, col: 21, offset: 13597},
							val:        "[^\\n]",
							chars:      []rune{'\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Conditional",
			pos:  position{line: 577, col: 1, offset: 13640},
			expr: &actionExpr{
				pos: position{line: 577, col: 16, offset: 13655},
				run: (*parser).callonConditional1,
				expr: &seqExpr{
					pos: position{line: 577, col: 16, offset: 13655},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 577, col: 16, offset: 13655},
							name: "IfToken",
						},
						&ruleRefExpr{
							pos:  position{line: 577, col: 24, offset: 13663},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 577, col: 26, offset: 13665},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 31, offset: 13670},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 577, col: 36, offset: 13675},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 577, col: 38, offset: 13677},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 44, offset: 13683},
								name: "Block",
							},
						},
						&labeledExpr{
							pos:   position{line: 577, col: 50, offset: 13689},
							label: "else_",
							expr: &zeroOrOneExpr{
								pos: position{line: 577, col: 56, offset: 13695},
								expr: &ruleRefExpr{
									pos:  position{line: 577, col: 56, offset: 13695},
									name: "ElseClause",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ElseClause",
			pos:  position{line: 585, col: 1, offset: 13813},
			expr: &actionExpr{
				pos: position{line: 585, col: 15, offset: 13827},
				run: (*parser).callonElseClause1,
				expr: &seqExpr{
					pos: position{line: 585, col: 15, offset: 13827},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 585, col: 15, offset: 13827},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 585, col: 17, offset: 13829},
							name: "ElseToken",
						},
						&ruleRefExpr{
							pos:  position{line: 585, col: 27, offset: 13839},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 585, col: 29, offset: 13841},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 585, col: 35, offset: 13847},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IfToken",
			pos:  position{line: 589, col: 1, offset: 13886},
			expr: &seqExpr{
				pos: position{line: 589, col: 12, offset: 13897},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 589, col: 12, offset: 13897},
						val:        "if",
						ignoreCase: false,
						want:       "\"if\"",
					},
					&notExpr{
						pos: position{line: 589, col: 17, offset: 13902},
						expr: &ruleRefExpr{
							pos:  position{line: 589, col: 18, offset: 13903},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ElseToken",
			pos:  position{line: 590, col: 1, offset: 13912},
			expr: &seqExpr{
				pos: position{line: 590, col: 14, offset: 13925},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 590, col: 14, offset: 13925},
						val:        "else",
						ignoreCase: false,
						want:       "\"else\"",
					},
					&notExpr{
						pos: position{line: 590, col: 21, offset: 13932},
						expr: &ruleRefExpr{
							pos:  position{line: 590, col: 22, offset: 13933},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Let",
			pos:  position{line: 592, col: 1, offset: 13943},
			expr: &actionExpr{
				pos: position{line: 592, col: 8, offset: 13950},
				run: (*parser).callonLet1,
				expr: &seqExpr{
					pos: position{line: 592, col: 8, offset: 13950},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 592, col: 8, offset: 13950},
							name: "LetToken",
						},
						&ruleRefExpr{
							pos:  position{line: 592, col: 17, offset: 13959},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 592, col: 19, offset: 13961},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 24, offset: 13966},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 592, col: 27, offset: 13969},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 592, col: 29, offset: 13971},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 592, col: 33, offset: 13975},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 592, col: 35, offset: 13977},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 41, offset: 13983},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 592, col: 46, offset: 13988},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 592, col: 48, offset: 13990},
							name: "InToken",
						},
						&ruleRefExpr{
							pos:  position{line: 592, col: 56, offset: 13998},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 592, col: 58, offset: 14000},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 592, col: 63, offset: 14005},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LetToken",
			pos:  position{line: 600, col: 1, offset: 14111},
			expr: &seqExpr{
				pos: position{line: 600, col: 13, offset: 14123},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 600, col: 13, offset: 14123},
						val:        "let",
						ignoreCase: false,
						want:       "\"let\"",
					},
					&notExpr{
						pos: position{line: 600, col: 19, offset: 14129},
						expr: &ruleRefExpr{
							pos:  position{line: 600, col: 20, offset: 14130},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "InToken",
			pos:  position{line: 601, col: 1, offset: 14139},
			expr: &seqExpr{
				pos: position{line: 601, col: 12, offset: 14150},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 601, col: 12, offset: 14150},
						val:        "in",
						ignoreCase: false,
						want:       "\"in\"",
					},
					&notExpr{
						pos: position{line: 601, col: 17, offset: 14155},
						expr: &ruleRefExpr{
							pos:  position{line: 601, col: 18, offset: 14156},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Lambda",
			pos:  position{line: 603, col: 1, offset: 14166},
			expr: &actionExpr{
				pos: position{line: 603, col: 11, offset: 14176},
				run: (*parser).callonLambda1,
				expr: &seqExpr{
					pos: position{line: 603, col: 11, offset: 14176},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 603, col: 11, offset: 14176},
							name: "LambdaToken",
						},
						&labeledExpr{
							pos:   position{line: 603, col: 23, offset: 14188},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 28, offset: 14193},
								name: "LambdaArgs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 603, col: 39, offset: 14204},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 603, col: 41, offset: 14206},
							name: "ArrowToken",
						},
						&ruleRefExpr{
							pos:  position{line: 603, col: 52, offset: 14217},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 603, col: 54, offset: 14219},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 603, col: 59, offset: 14224},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LambdaToken",
			pos:  position{line: 616, col: 1, offset: 14481},
			expr: &litMatcher{
				pos:        position{line: 616, col: 16, offset: 14496},
				val:        "\\",
				ignoreCase: false,
				want:       "\"\\\\\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArrowToken",
			pos:  position{line: 617, col: 1, offset: 14501},
			expr: &litMatcher{
				pos:        position{line: 617, col: 15, offset: 14515},
				val:        "->",
				ignoreCase: false,
				want:       "\"->\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LambdaArgs",
			pos:  position{line: 619, col: 1, offset: 14521},
			expr: &choiceExpr{
				pos: position{line: 619, col: 15, offset: 14535},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 619, col: 15, offset: 14535},
						run: (*parser).callonLambdaArgs2,
						expr: &seqExpr{
							pos: position{line: 619, col: 15, offset: 14535},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 619, col: 15, offset: 14535},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 619, col: 19, offset: 14539},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 619, col: 21, offset: 14541},
									label: "args",
									expr: &zeroOrMoreExpr{
										pos: position{line: 619, col: 26, offset: 14546},
										expr: &actionExpr{
											pos: position{line: 619, col: 27, offset: 14547},
											run: (*parser).callonLambdaArgs8,
											expr: &seqExpr{
												pos: position{line: 619, col: 27, offset: 14547},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 619, col: 27, offset: 14547},
														label: "a",
														expr: &ruleRefExpr{
															pos:  position{line: 619, col: 29, offset: 14549},
															name: "LambdaArg",
														},
													},
													&ruleRefExpr{
														pos:  position{line: 619, col: 39, offset: 14559},
														name: "Sep",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 619, col: 63, offset: 14583},
									label: "last",
									expr: &zeroOrOneExpr{
										pos: position{line: 619, col: 68, offset: 14588},
										expr: &ruleRefExpr{
											pos:  position{line: 619, col: 68, offset: 14588},
											name: "LambdaArg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 619, col: 79, offset: 14599},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 619, col: 81, offset: 14601},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 621, col: 5, offset: 14661},
						run: (*parser).callonLambdaArgs18,
						expr: &labeledExpr{
							pos:   position{line: 621, col: 5, offset: 14661},
							label: "arg",
							expr: &ruleRefExpr{
								pos:  position{line: 621, col: 9, offset: 14665},
								name: "LambdaArg",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LambdaArg",
			pos:  position{line: 625, col: 1, offset: 14721},
			expr: &choiceExpr{
				pos: position{line: 625, col: 14, offset: 14734},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 625, col: 14, offset: 14734},
						name: "ArgWithDefault",
					},
					&ruleRefExpr{
						pos:  position{line: 625, col: 31, offset: 14751},
						name: "ArgWithBlockDefault",
					},
					&ruleRefExpr{
						pos:  position{line: 625, col: 53, offset: 14773},
						name: "ArgWithType",
					},
					&ruleRefExpr{
						pos:  position{line: 625, col: 67, offset: 14787},
						name: "ArgWithoutType",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithoutType",
			pos:  position{line: 627, col: 1, offset: 14803},
			expr: &actionExpr{
				pos: position{line: 627, col: 19, offset: 14821},
				run: (*parser).callonArgWithoutType1,
				expr: &labeledExpr{
					pos:   position{line: 627, col: 19, offset: 14821},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 627, col: 24, offset: 14826},
						name: "Id",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Match",
			pos:  position{line: 633, col: 1, offset: 14888},
			expr: &actionExpr{
				pos: position{line: 633, col: 10, offset: 14897},
				run: (*parser).callonMatch1,
				expr: &seqExpr{
					pos: position{line: 633, col: 10, offset: 14897},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 633, col: 10, offset: 14897},
							name: "MatchToken",
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 21, offset: 14908},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 633, col: 23, offset: 14910},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 633, col: 28, offset: 14915},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 33, offset: 14920},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 35, offset: 14922},
							name: "WithToken",
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 45, offset: 14932},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 633, col: 47, offset: 14934},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 51, offset: 14938},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 633, col: 53, offset: 14940},
							label: "cs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 633, col: 56, offset: 14943},
								expr: &actionExpr{
									pos: position{line: 633, col: 57, offset: 14944},
									run: (*parser).callonMatch14,
									expr: &seqExpr{
										pos: position{line: 633, col: 57, offset: 14944},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 633, col: 57, offset: 14944},
												label: "m",
												expr: &ruleRefExpr{
													pos:  position{line: 633, col: 59, offset: 14946},
													name: "MatchCase",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 633, col: 69, offset: 14956},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 633, col: 93, offset: 14980},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 633, col: 98, offset: 14985},
								expr: &ruleRefExpr{
									pos:  position{line: 633, col: 98, offset: 14985},
									name: "MatchCase",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 633, col: 109, offset: 14996},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 633, col: 111, offset: 14998},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MatchCase",
			pos:  position{line: 640, col: 1, offset: 15102},
			expr: &actionExpr{
				pos: position{line: 640, col: 14, offset: 15115},
				run: (*parser).callonMatchCase1,
				expr: &seqExpr{
					pos: position{line: 640, col: 14, offset: 15115},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 640, col: 14, offset: 15115},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 640, col: 22, offset: 15123},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 640, col: 30, offset: 15131},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 640, col: 32, offset: 15133},
							val:        "->",
							ignoreCase: false,
							want:       "\"->\"",
						},
						&ruleRefExpr{
							pos:  position{line: 640, col: 37, offset: 15138},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 640, col: 39, offset: 15140},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 640, col: 44, offset: 15145},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Pattern",
			pos:  position{line: 647, col: 1, offset: 15239},
			expr: &choiceExpr{
				pos: position{line: 647, col: 12, offset: 15250},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 647, col: 12, offset: 15250},
						name: "WildcardPattern",
					},
					&ruleRefExpr{
						pos:  position{line: 647, col: 30, offset: 15268},
						name: "LiteralPattern",
					},
					&ruleRefExpr{
						pos:  position{line: 647, col: 47, offset: 15285},
						name: "ConstructorPattern",
					},
					&ruleRefExpr{
						pos:  position{line: 647, col: 68, offset: 15306},
						name: "VariablePattern",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WildcardPattern",
			pos:  position{line: 649, col: 1, offset: 15323},
			expr: &actionExpr{
				pos: position{line: 649, col: 20, offset: 15342},
				run: (*parser).callonWildcardPattern1,
				expr: &litMatcher{
					pos:        position{line: 649, col: 20, offset: 15342},
					val:        "_",
					ignoreCase: false,
					want:       "\"_\"",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LiteralPattern",
			pos:  position{line: 653, col: 1, offset: 15383},
			expr: &actionExpr{
				pos: position{line: 653, col: 19, offset: 15401},
				run: (*parser).callonLiteralPattern1,
				expr: &labeledExpr{
					pos:   position{line: 653, col: 19, offset: 15401},
					label: "lit",
					expr: &ruleRefExpr{
						pos:  position{line: 653, col: 23, offset: 15405},
						name: "Literal",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ConstructorPattern",
			pos:  position{line: 657, col: 1, offset: 15466},
			expr: &actionExpr{
				pos: position{line: 657, col: 23, offset: 15488},
				run: (*parser).callonConstructorPattern1,
				expr: &seqExpr{
					pos: position{line: 657, col: 23, offset: 15488},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 657, col: 23, offset: 15488},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 657, col: 28, offset: 15493},
								name: "UpperId",
							},
						},
						&labeledExpr{
							pos:   position{line: 657, col: 36, offset: 15501},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 657, col: 41, offset: 15506},
								expr: &ruleRefExpr{
									pos:  position{line: 657, col: 41, offset: 15506},
									name: "PatternArgs",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PatternArgs",
			pos:  position{line: 668, col: 1, offset: 15687},
			expr: &actionExpr{
				pos: position{line: 668, col: 16, offset: 15702},
				run: (*parser).callonPatternArgs1,
				expr: &seqExpr{
					pos: position{line: 668, col: 16, offset: 15702},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 668, col: 16, offset: 15702},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 668, col: 20, offset: 15706},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 668, col: 22, offset: 15708},
							label: "patterns",
							expr: &zeroOrMoreExpr{
								pos: position{line: 668, col: 31, offset: 15717},
								expr: &actionExpr{
									pos: position{line: 668, col: 32, offset: 15718},
									run: (*parser).callonPatternArgs7,
									expr: &seqExpr{
										pos: position{line: 668, col: 32, offset: 15718},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 668, col: 32, offset: 15718},
												label: "p",
												expr: &ruleRefExpr{
													pos:  position{line: 668, col: 34, offset: 15720},
													name: "Pattern",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 668, col: 42, offset: 15728},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 668, col: 66, offset: 15752},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 668, col: 71, offset: 15757},
								expr: &ruleRefExpr{
									pos:  position{line: 668, col: 71, offset: 15757},
									name: "Pattern",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 668, col: 80, offset: 15766},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 668, col: 82, offset: 15768},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VariablePattern",
			pos:  position{line: 672, col: 1, offset: 15830},
			expr: &actionExpr{
				pos: position{line: 672, col: 20, offset: 15849},
				run: (*parser).callonVariablePattern1,
				expr: &labeledExpr{
					pos:   position{line: 672, col: 20, offset: 15849},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 672, col: 25, offset: 15854},
						name: "Id",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MatchToken",
			pos:  position{line: 676, col: 1, offset: 15913},
			expr: &seqExpr{
				pos: position{line: 676, col: 15, offset: 15927},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 676, col: 15, offset: 15927},
						val:        "match",
						ignoreCase: false,
						want:       "\"match\"",
					},
					&notExpr{
						pos: position{line: 676, col: 23, offset: 15935},
						expr: &ruleRefExpr{
							pos:  position{line: 676, col: 24, offset: 15936},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WithToken",
			pos:  position{line: 677, col: 1, offset: 15945},
			expr: &seqExpr{
				pos: position{line: 677, col: 14, offset: 15958},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 677, col: 14, offset: 15958},
						val:        "with",
						ignoreCase: false,
						want:       "\"with\"",
					},
					&notExpr{
						pos: position{line: 677, col: 21, offset: 15965},
						expr: &ruleRefExpr{
							pos:  position{line: 677, col: 22, offset: 15966},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Assert",
			pos:  position{line: 679, col: 1, offset: 15976},
			expr: &actionExpr{
				pos: position{line: 679, col: 11, offset: 15986},
				run: (*parser).callonAssert1,
				expr: &seqExpr{
					pos: position{line: 679, col: 11, offset: 15986},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 679, col: 11, offset: 15986},
							name: "AssertToken",
						},
						&labeledExpr{
							pos:   position{line: 679, col: 23, offset: 15998},
							label: "message",
							expr: &zeroOrOneExpr{
								pos: position{line: 679, col: 31, offset: 16006},
								expr: &ruleRefExpr{
									pos:  position{line: 679, col: 31, offset: 16006},
									name: "MessageArgs",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 679, col: 44, offset: 16019},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 679, col: 46, offset: 16021},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 679, col: 52, offset: 16027},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MessageArgs",
			pos:  position{line: 695, col: 1, offset: 16291},
			expr: &actionExpr{
				pos: position{line: 695, col: 16, offset: 16306},
				run: (*parser).callonMessageArgs1,
				expr: &seqExpr{
					pos: position{line: 695, col: 16, offset: 16306},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 695, col: 16, offset: 16306},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 695, col: 20, offset: 16310},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 695, col: 22, offset: 16312},
							label: "msg",
							expr: &ruleRefExpr{
								pos:  position{line: 695, col: 26, offset: 16316},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 695, col: 31, offset: 16321},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 695, col: 33, offset: 16323},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AssertToken",
			pos:  position{line: 699, col: 1, offset: 16350},
			expr: &seqExpr{
				pos: position{line: 699, col: 16, offset: 16365},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 699, col: 16, offset: 16365},
						val:        "assert",
						ignoreCase: false,
						want:       "\"assert\"",
					},
					&notExpr{
						pos: position{line: 699, col: 25, offset: 16374},
						expr: &ruleRefExpr{
							pos:  position{line: 699, col: 26, offset: 16375},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CompoundAssignment",
			pos:  position{line: 701, col: 1, offset: 16385},
			expr: &actionExpr{
				pos: position{line: 701, col: 23, offset: 16407},
				run: (*parser).callonCompoundAssignment1,
				expr: &seqExpr{
					pos: position{line: 701, col: 23, offset: 16407},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 701, col: 23, offset: 16407},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 28, offset: 16412},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 701, col: 31, offset: 16415},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 701, col: 33, offset: 16417},
							label: "op",
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 36, offset: 16420},
								name: "CompoundOp",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 701, col: 47, offset: 16431},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 701, col: 49, offset: 16433},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 701, col: 55, offset: 16439},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CompoundOp",
			pos:  position{line: 714, col: 1, offset: 16675},
			expr: &actionExpr{
				pos: position{line: 714, col: 15, offset: 16689},
				run: (*parser).callonCompoundOp1,
				expr: &ruleRefExpr{
					pos:  position{line: 714, col: 15, offset: 16689},
					name: "PlusEqualToken",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PlusEqualToken",
			pos:  position{line: 715, col: 1, offset: 16724},
			expr: &litMatcher{
				pos:        position{line: 715, col: 19, offset: 16742},
				val:        "+=",
				ignoreCase: false,
				want:       "\"+=\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Reassignment",
			pos:  position{line: 717, col: 1, offset: 16748},
			expr: &actionExpr{
				pos: position{line: 717, col: 17, offset: 16764},
				run: (*parser).callonReassignment1,
				expr: &seqExpr{
					pos: position{line: 717, col: 17, offset: 16764},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 717, col: 17, offset: 16764},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 717, col: 22, offset: 16769},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 717, col: 25, offset: 16772},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 717, col: 27, offset: 16774},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 717, col: 31, offset: 16778},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 717, col: 33, offset: 16780},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 717, col: 39, offset: 16786},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Reopen",
			pos:  position{line: 729, col: 1, offset: 16995},
			expr: &actionExpr{
				pos: position{line: 729, col: 11, offset: 17005},
				run: (*parser).callonReopen1,
				expr: &seqExpr{
					pos: position{line: 729, col: 11, offset: 17005},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 729, col: 11, offset: 17005},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 16, offset: 17010},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 19, offset: 17013},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 21, offset: 17015},
							name: "ReopenToken",
						},
						&ruleRefExpr{
							pos:  position{line: 729, col: 33, offset: 17027},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 729, col: 35, offset: 17029},
							label: "b",
							expr: &ruleRefExpr{
								pos:  position{line: 729, col: 37, offset: 17031},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
	},
}

func (c *current) onDash6(e any) (any, error) {
	return e, nil
}

func (p *parser) callonDash6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDash6(stack["e"])
}

func (c *current) onDash1(eles, last any) (any, error) {
	return Block{
		Forms: sliceOfAppend[Node](eles, last),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonDash1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDash1(stack["eles"], stack["last"])
}

func (c *current) onParenForm1(expr any) (any, error) {
	return expr.(Node), nil
}

func (p *parser) callonParenForm1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenForm1(stack["expr"])
}

func (c *current) onCall1(name, args any) (any, error) {
	// Symbol followed by () - create Select with nil Receiver
	argRecord := Record(args.([]Keyed[Node]))
	return Select{
		Receiver: nil,
		Field:    name.(string),
		Args:     &argRecord,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCall1(stack["name"], stack["args"])
}

func (c *current) onSymbol1(name any) (any, error) {
	// Just a Symbol
	return Symbol{
		Name:     name.(string),
		AutoCall: true,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonSymbol1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol1(stack["name"])
}

func (c *current) onSelectOrCall1(left, name, args any) (any, error) {
	if args != nil {
		// Select followed by () - add Args field
		argRecord := Record(args.([]Keyed[Node]))
		return Select{
			Receiver: left.(Node),
			Field:    name.(string),
			Args:     &argRecord,
			Loc: &SourceLocation{
				Line:   c.pos.line,
				Column: c.pos.col,
				Length: len(string(c.text)),
			},
		}, nil
	} else {
		// Just a Select
		return Select{
			Receiver: left.(Node),
			Field:    name.(string),
			Args:     nil,
			AutoCall: true,
			Loc: &SourceLocation{
				Line:   c.pos.line,
				Column: c.pos.col,
				Length: len(string(c.text)),
			},
		}, nil
	}
}

func (p *parser) callonSelectOrCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectOrCall1(stack["left"], stack["name"], stack["args"])
}

func (c *current) onClass1(name, block any) (any, error) {
	return ClassDecl{
		Named:      name.(string),
		Value:      block.(Block),
		Visibility: PrivateVisibility, // TODO
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonClass1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClass1(stack["name"], stack["block"])
}

func (c *current) onTypeAndValueSlot1(vis, name, type_, value any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Type_:      type_.(TypeNode),
		Value:      value.(Node),
		Visibility: vis.(Visibility),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonTypeAndValueSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndValueSlot1(stack["vis"], stack["name"], stack["type_"], stack["value"])
}

func (c *current) onValueOnlySlot1(vis, name, val any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Value:      val.(Node),
		Visibility: vis.(Visibility),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonValueOnlySlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueOnlySlot1(stack["vis"], stack["name"], stack["val"])
}

func (c *current) onTypeOnlySlot1(vis, name, type_ any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Type_:      type_.(TypeNode),
		Visibility: vis.(Visibility),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonTypeOnlySlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeOnlySlot1(stack["vis"], stack["name"], stack["type_"])
}

func (c *current) onTypeAndBlockSlot1(vis, name, type_, block any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Type_: FunTypeNode{nil, type_.(TypeNode)},
		Value: FunDecl{
			FunctionBase: FunctionBase{
				Args: nil,
				Body: block.(Block),
				Loc: &SourceLocation{
					Line:   c.pos.line,
					Column: c.pos.col,
					Length: len(string(c.text)),
				},
			},
			Named:      name.(string),
			Ret:        type_.(TypeNode),
			Visibility: vis.(Visibility),
		},
		Visibility: vis.(Visibility),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonTypeAndBlockSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndBlockSlot1(stack["vis"], stack["name"], stack["type_"], stack["block"])
}

func (c *current) onTypeAndArgsAndBlockSlot1(vis, name, args, type_, block any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Type_: FunTypeNode{args.([]SlotDecl), type_.(TypeNode)},
		Value: FunDecl{
			FunctionBase: FunctionBase{
				Args: args.([]SlotDecl),
				Body: block.(Block),
				Loc: &SourceLocation{
					Line:   c.pos.line,
					Column: c.pos.col,
					Length: len(string(c.text)),
				},
			},
			Named:      name.(string),
			Ret:        type_.(TypeNode),
			Visibility: vis.(Visibility),
		},
		Visibility: vis.(Visibility),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonTypeAndArgsAndBlockSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndArgsAndBlockSlot1(stack["vis"], stack["name"], stack["args"], stack["type_"], stack["block"])
}

func (c *current) onVisibility2() (any, error) {
	return PublicVisibility, nil
}

func (p *parser) callonVisibility2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVisibility2()
}

func (c *current) onVisibility4() (any, error) {
	return PrivateVisibility, nil
}

func (p *parser) callonVisibility4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVisibility4()
}

func (c *current) onWordToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonWordToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWordToken1()
}

func (c *current) onUpperToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUpperToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpperToken1()
}

func (c *current) onArgValues7(a any) (any, error) {
	return a, nil
}

func (p *parser) callonArgValues7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgValues7(stack["a"])
}

func (c *current) onArgValues1(args, last any) (any, error) {
	return sliceOfAppend[Keyed[Node]](args, last), nil
}

func (p *parser) callonArgValues1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgValues1(stack["args"], stack["last"])
}

func (c *current) onArgTypes7(a any) (any, error) {
	return a, nil
}

func (p *parser) callonArgTypes7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgTypes7(stack["a"])
}

func (c *current) onArgTypes1(args, last any) (any, error) {
	return sliceOfAppend[SlotDecl](args, last), nil
}

func (p *parser) callonArgTypes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgTypes1(stack["args"], stack["last"])
}

func (c *current) onArgType1(slot any) (any, error) {
	return slot.(SlotDecl), nil
}

func (p *parser) callonArgType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgType1(stack["slot"])
}

func (c *current) onArgWithDefault1(name, type_, value any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Type_: type_.(TypeNode),
		Value: value.(Node),
	}, nil
}

func (p *parser) callonArgWithDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithDefault1(stack["name"], stack["type_"], stack["value"])
}

func (c *current) onArgWithBlockDefault1(name, type_, block any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Type_: type_.(TypeNode),
		Value: block.(Block),
	}, nil
}

func (p *parser) callonArgWithBlockDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithBlockDefault1(stack["name"], stack["type_"], stack["block"])
}

func (c *current) onArgWithType1(name, type_ any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Type_: type_.(TypeNode),
	}, nil
}

func (p *parser) callonArgWithType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithType1(stack["name"], stack["type_"])
}

func (c *current) onKeyValue1(key, value any) (any, error) {
	return Keyed[Node]{Key: key.(string), Value: value.(Node), Positional: false}, nil
}

func (p *parser) callonKeyValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyValue1(stack["key"], stack["value"])
}

func (c *current) onPositionalValue1(value any) (any, error) {
	return Keyed[Node]{Key: "", Value: value.(Node), Positional: true}, nil
}

func (p *parser) callonPositionalValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedType1(name any) (any, error) {
	return NamedTypeNode{name.(string)}, nil
}

func (p *parser) callonNamedType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedType1(stack["name"])
}

func (c *current) onListType1(inner any) (any, error) {
	return ListTypeNode{inner.(TypeNode)}, nil
}

func (p *parser) callonListType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListType1(stack["inner"])
}

func (c *current) onNonNull1(inner any) (any, error) {
	return NonNullTypeNode{inner.(TypeNode)}, nil
}

func (p *parser) callonNonNull1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonNull1(stack["inner"])
}

func (c *current) onTypeVariable1(v any) (any, error) {
	return VariableTypeNode{v.([]byte)[0]}, nil
}

func (p *parser) callonTypeVariable1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeVariable1(stack["v"])
}

func (c *current) onDefault1(left, right any) (any, error) {
	return Default{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault1(stack["left"], stack["right"])
}

func (c *current) onAddition1(left, right any) (any, error) {
	return Addition{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonAddition1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddition1(stack["left"], stack["right"])
}

func (c *current) onSubtraction1(left, right any) (any, error) {
	return Subtraction{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonSubtraction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubtraction1(stack["left"], stack["right"])
}

func (c *current) onMultiplication1(left, right any) (any, error) {
	return Multiplication{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonMultiplication1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplication1(stack["left"], stack["right"])
}

func (c *current) onDivision1(left, right any) (any, error) {
	return Division{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonDivision1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivision1(stack["left"], stack["right"])
}

func (c *current) onModulo1(left, right any) (any, error) {
	return Modulo{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonModulo1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onModulo1(stack["left"], stack["right"])
}

func (c *current) onEquality1(left, right any) (any, error) {
	return Equality{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonEquality1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquality1(stack["left"], stack["right"])
}

func (c *current) onInequality1(left, right any) (any, error) {
	return Inequality{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonInequality1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInequality1(stack["left"], stack["right"])
}

func (c *current) onLessThanEqual1(left, right any) (any, error) {
	return LessThanEqual{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonLessThanEqual1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLessThanEqual1(stack["left"], stack["right"])
}

func (c *current) onLessThan1(left, right any) (any, error) {
	return LessThan{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonLessThan1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLessThan1(stack["left"], stack["right"])
}

func (c *current) onGreaterThanEqual1(left, right any) (any, error) {
	return GreaterThanEqual{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonGreaterThanEqual1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGreaterThanEqual1(stack["left"], stack["right"])
}

func (c *current) onGreaterThan1(left, right any) (any, error) {
	return GreaterThan{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonGreaterThan1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGreaterThan1(stack["left"], stack["right"])
}

func (c *current) onList7(e any) (any, error) {
	return e, nil
}

func (p *parser) callonList7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onList7(stack["e"])
}

func (c *current) onList1(eles, last any) (any, error) {
	return List{
		Elements: sliceOfAppend[Node](eles, last),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onList1(stack["eles"], stack["last"])
}

func (c *current) onObject7(v any) (any, error) {
	return v, nil
}

func (p *parser) callonObject7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObject7(stack["v"])
}

func (c *current) onObject1(vals, last any) (any, error) {
	var slots []SlotDecl
	for _, kv := range sliceOfAppend[Keyed[Node]](vals, last) {
		slots = append(slots, SlotDecl{
			Named: kv.Key,
			Value: kv.Value,
			Loc:   kv.Value.GetSourceLocation(),
		})
	}
	return &Object{
		Slots: slots,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonObject1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObject1(stack["vals"], stack["last"])
}

func (c *current) onBlock7(e any) (any, error) {
	return e, nil
}

func (p *parser) callonBlock7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock7(stack["e"])
}

func (c *current) onBlock1(eles, last any) (any, error) {
	return Block{
		Forms: sliceOfAppend[Node](eles, last),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock1(stack["eles"], stack["last"])
}

func (c *current) onInt1() (any, error) {
	value, err := strconv.ParseInt(string(c.text), 10, 64)
	if err != nil {
		return nil, err
	}
	return Int{
		Value: value,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonInt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInt1()
}

func (c *current) onString1() (any, error) {
	c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
	value, err := strconv.Unquote(string(c.text))
	if err != nil {
		return nil, err
	}
	return String{
		Value: value,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1()
}

func (c *current) onQuoted1(quoter, raw any) (any, error) {
	return Quoted{
		quoter.(string),
		raw.(string),
	}, nil
}

func (p *parser) callonQuoted1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoted1(stack["quoter"], stack["raw"])
}

func (c *current) onQuotedRawToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonQuotedRawToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedRawToken1()
}

func (c *current) onBoolean2() (any, error) {
	return Boolean{
		Value: true,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonBoolean2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean2()
}

func (c *current) onBoolean4() (any, error) {
	return Boolean{
		Value: false,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonBoolean4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean4()
}

func (c *current) onNull1() (any, error) {
	return Null{
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonNull1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNull1()
}

func (c *current) onConditional1(cond, block, else_ any) (any, error) {
	return Conditional{
		Condition: cond.(Node),
		Then:      block.(Block),
		Else:      else_,
	}, nil
}

func (p *parser) callonConditional1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditional1(stack["cond"], stack["block"], stack["else_"])
}

func (c *current) onElseClause1(block any) (any, error) {
	return block.(Block), nil
}

func (p *parser) callonElseClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseClause1(stack["block"])
}

func (c *current) onLet1(name, value, expr any) (any, error) {
	return Let{
		Name:  name.(string),
		Value: value.(Node),
		Expr:  expr.(Node),
	}, nil
}

func (p *parser) callonLet1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLet1(stack["name"], stack["value"], stack["expr"])
}

func (c *current) onLambda1(args, expr any) (any, error) {
	return Lambda{
		FunctionBase: FunctionBase{
			Args: args.([]SlotDecl),
			Body: expr.(Node),
			Loc: &SourceLocation{
				Line:   c.pos.line,
				Column: c.pos.col,
				Length: len(string(c.text)),
			},
		},
	}, nil
}

func (p *parser) callonLambda1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambda1(stack["args"], stack["expr"])
}

func (c *current) onLambdaArgs8(a any) (any, error) {
	return a, nil
}

func (p *parser) callonLambdaArgs8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaArgs8(stack["a"])
}

func (c *current) onLambdaArgs2(args, last any) (any, error) {
	return sliceOfAppend[SlotDecl](args, last), nil
}

func (p *parser) callonLambdaArgs2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaArgs2(stack["args"], stack["last"])
}

func (c *current) onLambdaArgs18(arg any) (any, error) {
	return []SlotDecl{arg.(SlotDecl)}, nil
}

func (p *parser) callonLambdaArgs18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaArgs18(stack["arg"])
}

func (c *current) onArgWithoutType1(name any) (any, error) {
	return SlotDecl{
		Named: name.(string),
	}, nil
}

func (p *parser) callonArgWithoutType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithoutType1(stack["name"])
}

func (c *current) onMatch14(m any) (any, error) {
	return m, nil
}

func (p *parser) callonMatch14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatch14(stack["m"])
}

func (c *current) onMatch1(expr, cs, last any) (any, error) {
	return Match{
		Expr:  expr.(Node),
		Cases: sliceOfAppend[MatchCase](cs, last),
	}, nil
}

func (p *parser) callonMatch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatch1(stack["expr"], stack["cs"], stack["last"])
}

func (c *current) onMatchCase1(pattern, expr any) (any, error) {
	return MatchCase{
		Pattern: pattern.(Pattern),
		Expr:    expr.(Node),
	}, nil
}

func (p *parser) callonMatchCase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchCase1(stack["pattern"], stack["expr"])
}

func (c *current) onWildcardPattern1() (any, error) {
	return WildcardPattern{}, nil
}

func (p *parser) callonWildcardPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWildcardPattern1()
}

func (c *current) onLiteralPattern1(lit any) (any, error) {
	return LiteralPattern{Value: lit.(Node)}, nil
}

func (p *parser) callonLiteralPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralPattern1(stack["lit"])
}

func (c *current) onConstructorPattern1(name, args any) (any, error) {
	var patterns []Pattern
	if args != nil {
		patterns = args.([]Pattern)
	}
	return ConstructorPattern{
		Name: name.(string),
		Args: patterns,
	}, nil
}

func (p *parser) callonConstructorPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstructorPattern1(stack["name"], stack["args"])
}

func (c *current) onPatternArgs7(p any) (any, error) {
	return p, nil
}

func (p *parser) callonPatternArgs7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternArgs7(stack["p"])
}

func (c *current) onPatternArgs1(patterns, last any) (any, error) {
	return sliceOfAppend[Pattern](patterns, last), nil
}

func (p *parser) callonPatternArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternArgs1(stack["patterns"], stack["last"])
}

func (c *current) onVariablePattern1(name any) (any, error) {
	return VariablePattern{Name: name.(string)}, nil
}

func (p *parser) callonVariablePattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariablePattern1(stack["name"])
}

func (c *current) onAssert1(message, block any) (any, error) {
	var msg Node
	if message != nil {
		msg = message.(Node)
	}
	return Assert{
		Message: msg,
		Block:   block.(Block),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonAssert1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssert1(stack["message"], stack["block"])
}

func (c *current) onMessageArgs1(msg any) (any, error) {
	return msg, nil
}

func (p *parser) callonMessageArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMessageArgs1(stack["msg"])
}

func (c *current) onCompoundAssignment1(name, op, value any) (any, error) {
	return CompoundAssignment{
		Name:  name.(string),
		Op:    op.(string),
		Value: value.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonCompoundAssignment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCompoundAssignment1(stack["name"], stack["op"], stack["value"])
}

func (c *current) onCompoundOp1() (any, error) {
	return "+", nil
}

func (p *parser) callonCompoundOp1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCompoundOp1()
}

func (c *current) onReassignment1(name, value any) (any, error) {
	return Reassignment{
		Name:  name.(string),
		Value: value.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonReassignment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReassignment1(stack["name"], stack["value"])
}

func (c *current) onReopen1(name, b any) (any, error) {
	return Reopen{
		Name:  name.(string),
		Block: b.(Block),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonReopen1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReopen1(stack["name"], stack["b"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any

	leader        bool
	leftRecursive bool
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type ruleWithExpsStack struct {
	rule   *rule
	estack []any
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleRecursiveLeader(rule *rule) (any, bool) {
	result, ok := p.getMemoized(rule)
	if ok {
		p.restore(result.end)
		return result.v, result.b
	}

	if p.debug {
		defer p.out(p.in("recursive " + rule.name))
	}

	var (
		depth      = 0
		startMark  = p.pt
		lastResult = resultTuple{nil, false, startMark}
		lastErrors = *p.errs
	)

	for {
		lastState := p.cloneState()
		p.setMemoized(startMark, rule, lastResult)
		val, ok := p.parseRule(rule)
		endMark := p.pt
		if p.debug {
			p.printIndent("RECURSIVE", fmt.Sprintf(
				"Rule %s depth %d: %t -> %s",
				rule.name, depth, ok, string(p.sliceFrom(startMark))))
		}
		if (!ok) || (endMark.offset <= lastResult.end.offset && depth != 0) {
			p.restoreState(lastState)
			*p.errs = lastErrors
			break
		}
		lastResult = resultTuple{val, ok, endMark}
		lastErrors = *p.errs
		p.restore(startMark)
		depth++
	}

	p.restore(lastResult.end)
	p.setMemoized(startMark, rule, lastResult)
	return lastResult.v, lastResult.b
}

func (p *parser) parseRuleRecursiveNoLeader(rule *rule) (any, bool) {
	return p.parseRule(rule)
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize || rule.leftRecursive {
		if rule.leader {
			val, ok = p.parseRuleRecursiveLeader(rule)
		} else if p.memoize && !rule.leftRecursive {
			val, ok = p.parseRuleMemoize(rule)
		} else {
			val, ok = p.parseRuleRecursiveNoLeader(rule)
		}
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	isLeftRecursion := p.rstack[len(p.rstack)-1].leftRecursive
	if p.memoize && !isLeftRecursion {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize && !isLeftRecursion {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
