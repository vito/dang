// Code generated by pigeon; DO NOT EDIT.

package dash

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"log"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Dash",
			pos:  position{line: 5, col: 1, offset: 20},
			expr: &actionExpr{
				pos: position{line: 5, col: 9, offset: 28},
				run: (*parser).callonDash1,
				expr: &seqExpr{
					pos: position{line: 5, col: 9, offset: 28},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 5, col: 9, offset: 28},
							label: "es",
							expr: &zeroOrMoreExpr{
								pos: position{line: 5, col: 12, offset: 31},
								expr: &actionExpr{
									pos: position{line: 5, col: 13, offset: 32},
									run: (*parser).callonDash5,
									expr: &seqExpr{
										pos: position{line: 5, col: 13, offset: 32},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 5, col: 13, offset: 32},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 5, col: 15, offset: 34},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 5, col: 17, offset: 36},
													name: "Expr",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 5, col: 22, offset: 41},
												name: "_",
											},
											&zeroOrOneExpr{
												pos: position{line: 5, col: 24, offset: 43},
												expr: &ruleRefExpr{
													pos:  position{line: 5, col: 24, offset: 43},
													name: "CommaToken",
												},
											},
										},
									},
								},
							},
						},
						&notExpr{
							pos: position{line: 5, col: 56, offset: 75},
							expr: &anyMatcher{
								line: 5, col: 57, offset: 76,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Expr",
			pos:  position{line: 18, col: 1, offset: 305},
			expr: &choiceExpr{
				pos: position{line: 18, col: 9, offset: 313},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 18, col: 9, offset: 313},
						name: "Class",
					},
					&ruleRefExpr{
						pos:  position{line: 18, col: 17, offset: 321},
						name: "Slot",
					},
					&ruleRefExpr{
						pos:  position{line: 18, col: 24, offset: 328},
						name: "Form",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Form",
			pos:  position{line: 20, col: 1, offset: 334},
			expr: &choiceExpr{
				pos: position{line: 20, col: 9, offset: 342},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 20, col: 9, offset: 342},
						name: "Conditional",
					},
					&ruleRefExpr{
						pos:  position{line: 20, col: 23, offset: 356},
						name: "Let",
					},
					&ruleRefExpr{
						pos:  position{line: 20, col: 29, offset: 362},
						name: "Lambda",
					},
					&ruleRefExpr{
						pos:  position{line: 20, col: 38, offset: 371},
						name: "Match",
					},
					&ruleRefExpr{
						pos:  position{line: 20, col: 46, offset: 379},
						name: "Infix",
					},
					&ruleRefExpr{
						pos:  position{line: 20, col: 54, offset: 387},
						name: "Term",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "Term",
			pos:  position{line: 22, col: 1, offset: 393},
			expr: &choiceExpr{
				pos: position{line: 22, col: 9, offset: 401},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 22, col: 9, offset: 401},
						name: "Select",
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 18, offset: 410},
						name: "FunCall",
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 28, offset: 420},
						name: "List",
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 35, offset: 427},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 45, offset: 437},
						name: "Symbol",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "Class",
			pos:  position{line: 24, col: 1, offset: 445},
			expr: &actionExpr{
				pos: position{line: 24, col: 10, offset: 454},
				run: (*parser).callonClass1,
				expr: &seqExpr{
					pos: position{line: 24, col: 10, offset: 454},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 24, col: 10, offset: 454},
							name: "ClsToken",
						},
						&ruleRefExpr{
							pos:  position{line: 24, col: 19, offset: 463},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 21, offset: 465},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 26, offset: 470},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 24, col: 29, offset: 473},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 24, col: 31, offset: 475},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 24, col: 37, offset: 481},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ClsToken",
			pos:  position{line: 36, col: 1, offset: 732},
			expr: &litMatcher{
				pos:        position{line: 36, col: 13, offset: 744},
				val:        "cls",
				ignoreCase: false,
				want:       "\"cls\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Slot",
			pos:  position{line: 38, col: 1, offset: 751},
			expr: &choiceExpr{
				pos: position{line: 38, col: 9, offset: 759},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 38, col: 9, offset: 759},
						name: "TypeAndArgsAndBlockSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 39, col: 9, offset: 828},
						name: "TypeAndBlockSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 40, col: 9, offset: 962},
						name: "TypeAndValueSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 41, col: 9, offset: 1101},
						name: "ValueOnlySlot",
					},
					&ruleRefExpr{
						pos:  position{line: 42, col: 9, offset: 1195},
						name: "TypeOnlySlot",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeAndValueSlot",
			pos:  position{line: 44, col: 1, offset: 1283},
			expr: &actionExpr{
				pos: position{line: 44, col: 21, offset: 1303},
				run: (*parser).callonTypeAndValueSlot1,
				expr: &seqExpr{
					pos: position{line: 44, col: 21, offset: 1303},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 44, col: 21, offset: 1303},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 44, col: 25, offset: 1307},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 44, col: 36, offset: 1318},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 44, col: 38, offset: 1320},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 44, col: 43, offset: 1325},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 44, col: 46, offset: 1328},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 44, col: 48, offset: 1330},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 44, col: 59, offset: 1341},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 44, col: 61, offset: 1343},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 44, col: 67, offset: 1349},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 44, col: 72, offset: 1354},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 44, col: 74, offset: 1356},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 44, col: 78, offset: 1360},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 44, col: 80, offset: 1362},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 44, col: 86, offset: 1368},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ValueOnlySlot",
			pos:  position{line: 58, col: 1, offset: 1637},
			expr: &actionExpr{
				pos: position{line: 58, col: 18, offset: 1654},
				run: (*parser).callonValueOnlySlot1,
				expr: &seqExpr{
					pos: position{line: 58, col: 18, offset: 1654},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 58, col: 18, offset: 1654},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 22, offset: 1658},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 58, col: 33, offset: 1669},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 58, col: 35, offset: 1671},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 40, offset: 1676},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 58, col: 43, offset: 1679},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 58, col: 45, offset: 1681},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 58, col: 49, offset: 1685},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 58, col: 51, offset: 1687},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 58, col: 55, offset: 1691},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeOnlySlot",
			pos:  position{line: 71, col: 1, offset: 1929},
			expr: &actionExpr{
				pos: position{line: 71, col: 17, offset: 1945},
				run: (*parser).callonTypeOnlySlot1,
				expr: &seqExpr{
					pos: position{line: 71, col: 17, offset: 1945},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 71, col: 17, offset: 1945},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 71, col: 21, offset: 1949},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 71, col: 32, offset: 1960},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 71, col: 34, offset: 1962},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 71, col: 39, offset: 1967},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 71, col: 42, offset: 1970},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 71, col: 44, offset: 1972},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 71, col: 55, offset: 1983},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 71, col: 57, offset: 1985},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 71, col: 63, offset: 1991},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeAndBlockSlot",
			pos:  position{line: 84, col: 1, offset: 2235},
			expr: &actionExpr{
				pos: position{line: 84, col: 21, offset: 2255},
				run: (*parser).callonTypeAndBlockSlot1,
				expr: &seqExpr{
					pos: position{line: 84, col: 21, offset: 2255},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 84, col: 21, offset: 2255},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 84, col: 25, offset: 2259},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 84, col: 36, offset: 2270},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 84, col: 38, offset: 2272},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 84, col: 43, offset: 2277},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 84, col: 46, offset: 2280},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 84, col: 48, offset: 2282},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 84, col: 59, offset: 2293},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 84, col: 61, offset: 2295},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 84, col: 67, offset: 2301},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 84, col: 72, offset: 2306},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 84, col: 74, offset: 2308},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 84, col: 80, offset: 2314},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeAndArgsAndBlockSlot",
			pos:  position{line: 107, col: 1, offset: 2815},
			expr: &actionExpr{
				pos: position{line: 107, col: 28, offset: 2842},
				run: (*parser).callonTypeAndArgsAndBlockSlot1,
				expr: &seqExpr{
					pos: position{line: 107, col: 28, offset: 2842},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 107, col: 28, offset: 2842},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 32, offset: 2846},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 43, offset: 2857},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 107, col: 45, offset: 2859},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 50, offset: 2864},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 53, offset: 2867},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 107, col: 55, offset: 2869},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 60, offset: 2874},
								name: "ArgTypes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 69, offset: 2883},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 71, offset: 2885},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 82, offset: 2896},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 107, col: 84, offset: 2898},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 90, offset: 2904},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 107, col: 95, offset: 2909},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 107, col: 97, offset: 2911},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 107, col: 103, offset: 2917},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Visibility",
			pos:  position{line: 131, col: 1, offset: 3463},
			expr: &choiceExpr{
				pos: position{line: 131, col: 15, offset: 3477},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 131, col: 15, offset: 3477},
						run: (*parser).callonVisibility2,
						expr: &ruleRefExpr{
							pos:  position{line: 131, col: 15, offset: 3477},
							name: "PubToken",
						},
					},
					&actionExpr{
						pos: position{line: 132, col: 15, offset: 3533},
						run: (*parser).callonVisibility4,
						expr: &ruleRefExpr{
							pos:  position{line: 132, col: 15, offset: 3533},
							name: "PvtToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PubToken",
			pos:  position{line: 133, col: 1, offset: 3576},
			expr: &litMatcher{
				pos:        position{line: 133, col: 13, offset: 3588},
				val:        "pub",
				ignoreCase: false,
				want:       "\"pub\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PvtToken",
			pos:  position{line: 134, col: 1, offset: 3594},
			expr: &litMatcher{
				pos:        position{line: 134, col: 13, offset: 3606},
				val:        "pvt",
				ignoreCase: false,
				want:       "\"pvt\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Id",
			pos:  position{line: 136, col: 1, offset: 3613},
			expr: &ruleRefExpr{
				pos:  position{line: 136, col: 7, offset: 3619},
				name: "WordToken",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WordToken",
			pos:  position{line: 137, col: 1, offset: 3629},
			expr: &actionExpr{
				pos: position{line: 137, col: 14, offset: 3642},
				run: (*parser).callonWordToken1,
				expr: &seqExpr{
					pos: position{line: 137, col: 14, offset: 3642},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 137, col: 14, offset: 3642},
							val:        "[a-zA-Z_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 137, col: 23, offset: 3651},
							expr: &charClassMatcher{
								pos:        position{line: 137, col: 23, offset: 3651},
								val:        "[a-zA-Z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UpperId",
			pos:  position{line: 140, col: 1, offset: 3698},
			expr: &ruleRefExpr{
				pos:  position{line: 140, col: 12, offset: 3709},
				name: "UpperToken",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UpperToken",
			pos:  position{line: 141, col: 1, offset: 3720},
			expr: &actionExpr{
				pos: position{line: 141, col: 15, offset: 3734},
				run: (*parser).callonUpperToken1,
				expr: &seqExpr{
					pos: position{line: 141, col: 15, offset: 3734},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 141, col: 15, offset: 3734},
							val:        "[A-Z]",
							ranges:     []rune{'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 141, col: 20, offset: 3739},
							expr: &charClassMatcher{
								pos:        position{line: 141, col: 20, offset: 3739},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FunCall",
			pos:  position{line: 145, col: 1, offset: 3786},
			expr: &actionExpr{
				pos: position{line: 145, col: 12, offset: 3797},
				run: (*parser).callonFunCall1,
				expr: &seqExpr{
					pos: position{line: 145, col: 12, offset: 3797},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 145, col: 12, offset: 3797},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 145, col: 17, offset: 3802},
								name: "Term",
							},
						},
						&labeledExpr{
							pos:   position{line: 145, col: 22, offset: 3807},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 145, col: 27, offset: 3812},
								name: "ArgValues",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "ArgValues",
			pos:  position{line: 157, col: 1, offset: 4034},
			expr: &actionExpr{
				pos: position{line: 157, col: 14, offset: 4047},
				run: (*parser).callonArgValues1,
				expr: &seqExpr{
					pos: position{line: 157, col: 14, offset: 4047},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 157, col: 14, offset: 4047},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 157, col: 18, offset: 4051},
							label: "args",
							expr: &zeroOrMoreExpr{
								pos: position{line: 157, col: 23, offset: 4056},
								expr: &ruleRefExpr{
									pos:  position{line: 157, col: 23, offset: 4056},
									name: "KeyValue",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 157, col: 33, offset: 4066},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgTypes",
			pos:  position{line: 160, col: 1, offset: 4115},
			expr: &actionExpr{
				pos: position{line: 160, col: 13, offset: 4127},
				run: (*parser).callonArgTypes1,
				expr: &seqExpr{
					pos: position{line: 160, col: 13, offset: 4127},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 160, col: 13, offset: 4127},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 160, col: 17, offset: 4131},
							label: "args",
							expr: &zeroOrMoreExpr{
								pos: position{line: 160, col: 22, offset: 4136},
								expr: &ruleRefExpr{
									pos:  position{line: 160, col: 22, offset: 4136},
									name: "ArgType",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 160, col: 31, offset: 4145},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgType",
			pos:  position{line: 163, col: 1, offset: 4191},
			expr: &actionExpr{
				pos: position{line: 163, col: 12, offset: 4202},
				run: (*parser).callonArgType1,
				expr: &seqExpr{
					pos: position{line: 163, col: 12, offset: 4202},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 163, col: 12, offset: 4202},
							label: "slot",
							expr: &choiceExpr{
								pos: position{line: 163, col: 18, offset: 4208},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 163, col: 18, offset: 4208},
										name: "ArgWithDefault",
									},
									&ruleRefExpr{
										pos:  position{line: 163, col: 35, offset: 4225},
										name: "ArgWithBlockDefault",
									},
									&ruleRefExpr{
										pos:  position{line: 163, col: 57, offset: 4247},
										name: "ArgWithType",
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 163, col: 70, offset: 4260},
							expr: &ruleRefExpr{
								pos:  position{line: 163, col: 70, offset: 4260},
								name: "CommaToken",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithDefault",
			pos:  position{line: 166, col: 1, offset: 4306},
			expr: &actionExpr{
				pos: position{line: 166, col: 19, offset: 4324},
				run: (*parser).callonArgWithDefault1,
				expr: &seqExpr{
					pos: position{line: 166, col: 19, offset: 4324},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 166, col: 19, offset: 4324},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 24, offset: 4329},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 166, col: 27, offset: 4332},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 166, col: 29, offset: 4334},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 166, col: 40, offset: 4345},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 166, col: 42, offset: 4347},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 48, offset: 4353},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 166, col: 53, offset: 4358},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 166, col: 55, offset: 4360},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 166, col: 59, offset: 4364},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 166, col: 61, offset: 4366},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 166, col: 67, offset: 4372},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithBlockDefault",
			pos:  position{line: 173, col: 1, offset: 4489},
			expr: &actionExpr{
				pos: position{line: 173, col: 24, offset: 4512},
				run: (*parser).callonArgWithBlockDefault1,
				expr: &seqExpr{
					pos: position{line: 173, col: 24, offset: 4512},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 173, col: 24, offset: 4512},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 29, offset: 4517},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 173, col: 32, offset: 4520},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 173, col: 34, offset: 4522},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 173, col: 45, offset: 4533},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 173, col: 47, offset: 4535},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 53, offset: 4541},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 173, col: 58, offset: 4546},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 173, col: 60, offset: 4548},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 173, col: 66, offset: 4554},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithType",
			pos:  position{line: 180, col: 1, offset: 4673},
			expr: &actionExpr{
				pos: position{line: 180, col: 16, offset: 4688},
				run: (*parser).callonArgWithType1,
				expr: &seqExpr{
					pos: position{line: 180, col: 16, offset: 4688},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 180, col: 16, offset: 4688},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 180, col: 21, offset: 4693},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 180, col: 24, offset: 4696},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 180, col: 26, offset: 4698},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 180, col: 37, offset: 4709},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 180, col: 39, offset: 4711},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 180, col: 45, offset: 4717},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "KeyValue",
			pos:  position{line: 187, col: 1, offset: 4810},
			expr: &actionExpr{
				pos: position{line: 187, col: 13, offset: 4822},
				run: (*parser).callonKeyValue1,
				expr: &seqExpr{
					pos: position{line: 187, col: 13, offset: 4822},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 187, col: 13, offset: 4822},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 187, col: 17, offset: 4826},
								name: "WordToken",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 187, col: 27, offset: 4836},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 187, col: 38, offset: 4847},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 187, col: 40, offset: 4849},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 187, col: 46, offset: 4855},
								name: "Form",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 187, col: 51, offset: 4860},
							expr: &ruleRefExpr{
								pos:  position{line: 187, col: 51, offset: 4860},
								name: "CommaToken",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ColonToken",
			pos:  position{line: 190, col: 1, offset: 4930},
			expr: &litMatcher{
				pos:        position{line: 190, col: 15, offset: 4944},
				val:        ":",
				ignoreCase: false,
				want:       "\":\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Type",
			pos:  position{line: 192, col: 1, offset: 4949},
			expr: &choiceExpr{
				pos: position{line: 192, col: 9, offset: 4957},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 192, col: 9, offset: 4957},
						name: "NonNull",
					},
					&ruleRefExpr{
						pos:  position{line: 192, col: 19, offset: 4967},
						name: "NamedType",
					},
					&ruleRefExpr{
						pos:  position{line: 192, col: 31, offset: 4979},
						name: "ListType",
					},
					&ruleRefExpr{
						pos:  position{line: 192, col: 42, offset: 4990},
						name: "TypeVariable",
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "NamedType",
			pos:  position{line: 193, col: 1, offset: 5003},
			expr: &actionExpr{
				pos: position{line: 193, col: 14, offset: 5016},
				run: (*parser).callonNamedType1,
				expr: &labeledExpr{
					pos:   position{line: 193, col: 14, offset: 5016},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 193, col: 19, offset: 5021},
						name: "UpperId",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ListType",
			pos:  position{line: 196, col: 1, offset: 5076},
			expr: &actionExpr{
				pos: position{line: 196, col: 13, offset: 5088},
				run: (*parser).callonListType1,
				expr: &seqExpr{
					pos: position{line: 196, col: 13, offset: 5088},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 196, col: 13, offset: 5088},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 196, col: 17, offset: 5092},
							label: "inner",
							expr: &ruleRefExpr{
								pos:  position{line: 196, col: 23, offset: 5098},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 196, col: 28, offset: 5103},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NonNull",
			pos:  position{line: 199, col: 1, offset: 5156},
			expr: &actionExpr{
				pos: position{line: 199, col: 12, offset: 5167},
				run: (*parser).callonNonNull1,
				expr: &seqExpr{
					pos: position{line: 199, col: 12, offset: 5167},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 199, col: 12, offset: 5167},
							label: "inner",
							expr: &ruleRefExpr{
								pos:  position{line: 199, col: 18, offset: 5173},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 199, col: 23, offset: 5178},
							name: "BangToken",
						},
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "TypeVariable",
			pos:  position{line: 202, col: 1, offset: 5240},
			expr: &actionExpr{
				pos: position{line: 202, col: 17, offset: 5256},
				run: (*parser).callonTypeVariable1,
				expr: &labeledExpr{
					pos:   position{line: 202, col: 17, offset: 5256},
					label: "v",
					expr: &charClassMatcher{
						pos:        position{line: 202, col: 19, offset: 5258},
						val:        "[a-z]",
						ranges:     []rune{'a', 'z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "BangToken",
			pos:  position{line: 206, col: 1, offset: 5310},
			expr: &litMatcher{
				pos:        position{line: 206, col: 14, offset: 5323},
				val:        "!",
				ignoreCase: false,
				want:       "\"!\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CommaToken",
			pos:  position{line: 208, col: 1, offset: 5328},
			expr: &seqExpr{
				pos: position{line: 208, col: 15, offset: 5342},
				exprs: []any{
					&ruleRefExpr{
						pos:  position{line: 208, col: 15, offset: 5342},
						name: "_",
					},
					&litMatcher{
						pos:        position{line: 208, col: 17, offset: 5344},
						val:        ",",
						ignoreCase: false,
						want:       "\",\"",
					},
					&ruleRefExpr{
						pos:  position{line: 208, col: 21, offset: 5348},
						name: "_",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Infix",
			pos:  position{line: 210, col: 1, offset: 5351},
			expr: &ruleRefExpr{
				pos:  position{line: 210, col: 10, offset: 5360},
				name: "Default",
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "Default",
			pos:  position{line: 211, col: 1, offset: 5368},
			expr: &actionExpr{
				pos: position{line: 211, col: 12, offset: 5379},
				run: (*parser).callonDefault1,
				expr: &seqExpr{
					pos: position{line: 211, col: 12, offset: 5379},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 211, col: 12, offset: 5379},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 211, col: 17, offset: 5384},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 211, col: 22, offset: 5389},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 211, col: 24, offset: 5391},
							name: "InterroToken",
						},
						&ruleRefExpr{
							pos:  position{line: 211, col: 37, offset: 5404},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 211, col: 39, offset: 5406},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 211, col: 45, offset: 5412},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "InterroToken",
			pos:  position{line: 222, col: 1, offset: 5614},
			expr: &litMatcher{
				pos:        position{line: 222, col: 17, offset: 5630},
				val:        "?",
				ignoreCase: false,
				want:       "\"?\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Select",
			pos:  position{line: 224, col: 1, offset: 5635},
			expr: &actionExpr{
				pos: position{line: 224, col: 11, offset: 5645},
				run: (*parser).callonSelect1,
				expr: &seqExpr{
					pos: position{line: 224, col: 11, offset: 5645},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 224, col: 11, offset: 5645},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 224, col: 16, offset: 5650},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 224, col: 21, offset: 5655},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 224, col: 23, offset: 5657},
							name: "DotToken",
						},
						&ruleRefExpr{
							pos:  position{line: 224, col: 32, offset: 5666},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 224, col: 34, offset: 5668},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 224, col: 39, offset: 5673},
								name: "Id",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "DotToken",
			pos:  position{line: 235, col: 1, offset: 5877},
			expr: &litMatcher{
				pos:        position{line: 235, col: 13, offset: 5889},
				val:        ".",
				ignoreCase: false,
				want:       "\".\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "List",
			pos:  position{line: 237, col: 1, offset: 5894},
			expr: &actionExpr{
				pos: position{line: 237, col: 9, offset: 5902},
				run: (*parser).callonList1,
				expr: &seqExpr{
					pos: position{line: 237, col: 9, offset: 5902},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 237, col: 9, offset: 5902},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 237, col: 13, offset: 5906},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 237, col: 15, offset: 5908},
							label: "eles",
							expr: &zeroOrMoreExpr{
								pos: position{line: 237, col: 20, offset: 5913},
								expr: &actionExpr{
									pos: position{line: 237, col: 21, offset: 5914},
									run: (*parser).callonList7,
									expr: &seqExpr{
										pos: position{line: 237, col: 21, offset: 5914},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 237, col: 21, offset: 5914},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 237, col: 23, offset: 5916},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 237, col: 25, offset: 5918},
													name: "Form",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 237, col: 30, offset: 5923},
												expr: &ruleRefExpr{
													pos:  position{line: 237, col: 30, offset: 5923},
													name: "CommaToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 237, col: 42, offset: 5935},
												name: "_",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 237, col: 64, offset: 5957},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Block",
			pos:  position{line: 248, col: 1, offset: 6142},
			expr: &actionExpr{
				pos: position{line: 248, col: 10, offset: 6151},
				run: (*parser).callonBlock1,
				expr: &seqExpr{
					pos: position{line: 248, col: 10, offset: 6151},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 248, col: 10, offset: 6151},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 248, col: 14, offset: 6155},
							label: "es",
							expr: &zeroOrMoreExpr{
								pos: position{line: 248, col: 17, offset: 6158},
								expr: &actionExpr{
									pos: position{line: 248, col: 18, offset: 6159},
									run: (*parser).callonBlock6,
									expr: &seqExpr{
										pos: position{line: 248, col: 18, offset: 6159},
										exprs: []any{
											&ruleRefExpr{
												pos:  position{line: 248, col: 18, offset: 6159},
												name: "_",
											},
											&labeledExpr{
												pos:   position{line: 248, col: 20, offset: 6161},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 248, col: 22, offset: 6163},
													name: "Expr",
												},
											},
											&zeroOrOneExpr{
												pos: position{line: 248, col: 27, offset: 6168},
												expr: &ruleRefExpr{
													pos:  position{line: 248, col: 27, offset: 6168},
													name: "CommaToken",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 248, col: 39, offset: 6180},
												name: "_",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 248, col: 61, offset: 6202},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Symbol",
			pos:  position{line: 261, col: 1, offset: 6434},
			expr: &actionExpr{
				pos: position{line: 261, col: 11, offset: 6444},
				run: (*parser).callonSymbol1,
				expr: &labeledExpr{
					pos:   position{line: 261, col: 11, offset: 6444},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 261, col: 16, offset: 6449},
						name: "Id",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Literal",
			pos:  position{line: 274, col: 1, offset: 6638},
			expr: &choiceExpr{
				pos: position{line: 274, col: 12, offset: 6649},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 274, col: 12, offset: 6649},
						name: "Int",
					},
					&ruleRefExpr{
						pos:  position{line: 274, col: 18, offset: 6655},
						name: "Boolean",
					},
					&ruleRefExpr{
						pos:  position{line: 274, col: 28, offset: 6665},
						name: "String",
					},
					&ruleRefExpr{
						pos:  position{line: 274, col: 37, offset: 6674},
						name: "Quoted",
					},
					&ruleRefExpr{
						pos:  position{line: 274, col: 46, offset: 6683},
						name: "Null",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Int",
			pos:  position{line: 276, col: 1, offset: 6689},
			expr: &choiceExpr{
				pos: position{line: 276, col: 8, offset: 6696},
				alternatives: []any{
					&litMatcher{
						pos:        position{line: 276, col: 8, offset: 6696},
						val:        "0",
						ignoreCase: false,
						want:       "\"0\"",
					},
					&actionExpr{
						pos: position{line: 276, col: 14, offset: 6702},
						run: (*parser).callonInt3,
						expr: &seqExpr{
							pos: position{line: 276, col: 14, offset: 6702},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 276, col: 14, offset: 6702},
									name: "NonZeroDecimalDigit",
								},
								&zeroOrMoreExpr{
									pos: position{line: 276, col: 34, offset: 6722},
									expr: &ruleRefExpr{
										pos:  position{line: 276, col: 34, offset: 6722},
										name: "DecimalDigit",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Exponent",
			pos:  position{line: 291, col: 1, offset: 6998},
			expr: &seqExpr{
				pos: position{line: 291, col: 13, offset: 7010},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 291, col: 13, offset: 7010},
						val:        "e",
						ignoreCase: true,
						want:       "\"e\"i",
					},
					&zeroOrOneExpr{
						pos: position{line: 291, col: 18, offset: 7015},
						expr: &charClassMatcher{
							pos:        position{line: 291, col: 18, offset: 7015},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 291, col: 24, offset: 7021},
						expr: &ruleRefExpr{
							pos:  position{line: 291, col: 24, offset: 7021},
							name: "DecimalDigit",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "String",
			pos:  position{line: 293, col: 1, offset: 7036},
			expr: &actionExpr{
				pos: position{line: 293, col: 11, offset: 7046},
				run: (*parser).callonString1,
				expr: &seqExpr{
					pos: position{line: 293, col: 11, offset: 7046},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 293, col: 11, offset: 7046},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 293, col: 15, offset: 7050},
							expr: &choiceExpr{
								pos: position{line: 293, col: 17, offset: 7052},
								alternatives: []any{
									&seqExpr{
										pos: position{line: 293, col: 17, offset: 7052},
										exprs: []any{
											&notExpr{
												pos: position{line: 293, col: 17, offset: 7052},
												expr: &ruleRefExpr{
													pos:  position{line: 293, col: 18, offset: 7053},
													name: "EscapedChar",
												},
											},
											&anyMatcher{
												line: 293, col: 30, offset: 7065,
											},
										},
									},
									&seqExpr{
										pos: position{line: 293, col: 34, offset: 7069},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 293, col: 34, offset: 7069},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&ruleRefExpr{
												pos:  position{line: 293, col: 39, offset: 7074},
												name: "EscapeSequence",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 293, col: 57, offset: 7092},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EscapedChar",
			pos:  position{line: 309, col: 1, offset: 7416},
			expr: &charClassMatcher{
				pos:        position{line: 309, col: 16, offset: 7431},
				val:        "[\\x00-\\x1f\"\\\\]",
				chars:      []rune{'"', '\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 311, col: 1, offset: 7447},
			expr: &choiceExpr{
				pos: position{line: 311, col: 19, offset: 7465},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 311, col: 19, offset: 7465},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 311, col: 38, offset: 7484},
						name: "UnicodeEscape",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 313, col: 1, offset: 7499},
			expr: &charClassMatcher{
				pos:        position{line: 313, col: 21, offset: 7519},
				val:        "[\"\\\\/bfnrt]",
				chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 315, col: 1, offset: 7532},
			expr: &seqExpr{
				pos: position{line: 315, col: 18, offset: 7549},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 315, col: 18, offset: 7549},
						val:        "u",
						ignoreCase: false,
						want:       "\"u\"",
					},
					&ruleRefExpr{
						pos:  position{line: 315, col: 22, offset: 7553},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 315, col: 31, offset: 7562},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 315, col: 40, offset: 7571},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 315, col: 49, offset: 7580},
						name: "HexDigit",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DecimalDigit",
			pos:  position{line: 317, col: 1, offset: 7590},
			expr: &charClassMatcher{
				pos:        position{line: 317, col: 17, offset: 7606},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NonZeroDecimalDigit",
			pos:  position{line: 319, col: 1, offset: 7613},
			expr: &charClassMatcher{
				pos:        position{line: 319, col: 24, offset: 7636},
				val:        "[1-9]",
				ranges:     []rune{'1', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "HexDigit",
			pos:  position{line: 321, col: 1, offset: 7643},
			expr: &charClassMatcher{
				pos:        position{line: 321, col: 13, offset: 7655},
				val:        "[0-9a-f]i",
				ranges:     []rune{'0', '9', 'a', 'f'},
				ignoreCase: true,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Quoted",
			pos:  position{line: 323, col: 1, offset: 7666},
			expr: &actionExpr{
				pos: position{line: 323, col: 11, offset: 7676},
				run: (*parser).callonQuoted1,
				expr: &seqExpr{
					pos: position{line: 323, col: 11, offset: 7676},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 323, col: 11, offset: 7676},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 323, col: 15, offset: 7680},
							label: "quoter",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 22, offset: 7687},
								name: "WordToken",
							},
						},
						&litMatcher{
							pos:        position{line: 323, col: 32, offset: 7697},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 323, col: 36, offset: 7701},
							label: "raw",
							expr: &ruleRefExpr{
								pos:  position{line: 323, col: 40, offset: 7705},
								name: "QuotedRawToken",
							},
						},
						&litMatcher{
							pos:        position{line: 323, col: 55, offset: 7720},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "QuotedRawToken",
			pos:  position{line: 329, col: 1, offset: 7793},
			expr: &actionExpr{
				pos: position{line: 329, col: 19, offset: 7811},
				run: (*parser).callonQuotedRawToken1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 329, col: 19, offset: 7811},
					expr: &charClassMatcher{
						pos:        position{line: 329, col: 19, offset: 7811},
						val:        "[^}]",
						chars:      []rune{'}'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Boolean",
			pos:  position{line: 333, col: 1, offset: 7851},
			expr: &choiceExpr{
				pos: position{line: 333, col: 12, offset: 7862},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 333, col: 12, offset: 7862},
						run: (*parser).callonBoolean2,
						expr: &ruleRefExpr{
							pos:  position{line: 333, col: 12, offset: 7862},
							name: "TrueToken",
						},
					},
					&actionExpr{
						pos: position{line: 342, col: 5, offset: 8041},
						run: (*parser).callonBoolean4,
						expr: &ruleRefExpr{
							pos:  position{line: 342, col: 5, offset: 8041},
							name: "FalseToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TrueToken",
			pos:  position{line: 352, col: 1, offset: 8220},
			expr: &litMatcher{
				pos:        position{line: 352, col: 14, offset: 8233},
				val:        "true",
				ignoreCase: false,
				want:       "\"true\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FalseToken",
			pos:  position{line: 353, col: 1, offset: 8240},
			expr: &litMatcher{
				pos:        position{line: 353, col: 15, offset: 8254},
				val:        "false",
				ignoreCase: false,
				want:       "\"false\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Null",
			pos:  position{line: 355, col: 1, offset: 8263},
			expr: &actionExpr{
				pos: position{line: 355, col: 9, offset: 8271},
				run: (*parser).callonNull1,
				expr: &ruleRefExpr{
					pos:  position{line: 355, col: 9, offset: 8271},
					name: "NullToken",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NullToken",
			pos:  position{line: 364, col: 1, offset: 8428},
			expr: &litMatcher{
				pos:        position{line: 364, col: 14, offset: 8441},
				val:        "null",
				ignoreCase: false,
				want:       "\"null\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 366, col: 1, offset: 8449},
			expr: &zeroOrMoreExpr{
				pos: position{line: 366, col: 19, offset: 8467},
				expr: &choiceExpr{
					pos: position{line: 366, col: 20, offset: 8468},
					alternatives: []any{
						&charClassMatcher{
							pos:        position{line: 366, col: 20, offset: 8468},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
						&ruleRefExpr{
							pos:  position{line: 366, col: 32, offset: 8480},
							name: "CommentToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CommentToken",
			pos:  position{line: 368, col: 1, offset: 8496},
			expr: &seqExpr{
				pos: position{line: 368, col: 17, offset: 8512},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 368, col: 17, offset: 8512},
						val:        "#",
						ignoreCase: false,
						want:       "\"#\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 368, col: 21, offset: 8516},
						expr: &charClassMatcher{
							pos:        position{line: 368, col: 21, offset: 8516},
							val:        "[^\\n]",
							chars:      []rune{'\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Conditional",
			pos:  position{line: 372, col: 1, offset: 8559},
			expr: &actionExpr{
				pos: position{line: 372, col: 16, offset: 8574},
				run: (*parser).callonConditional1,
				expr: &seqExpr{
					pos: position{line: 372, col: 16, offset: 8574},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 372, col: 16, offset: 8574},
							name: "IfToken",
						},
						&ruleRefExpr{
							pos:  position{line: 372, col: 24, offset: 8582},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 372, col: 26, offset: 8584},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 372, col: 31, offset: 8589},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 372, col: 36, offset: 8594},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 372, col: 38, offset: 8596},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 372, col: 44, offset: 8602},
								name: "Block",
							},
						},
						&labeledExpr{
							pos:   position{line: 372, col: 50, offset: 8608},
							label: "else_",
							expr: &zeroOrOneExpr{
								pos: position{line: 372, col: 56, offset: 8614},
								expr: &ruleRefExpr{
									pos:  position{line: 372, col: 56, offset: 8614},
									name: "ElseClause",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ElseClause",
			pos:  position{line: 380, col: 1, offset: 8732},
			expr: &actionExpr{
				pos: position{line: 380, col: 15, offset: 8746},
				run: (*parser).callonElseClause1,
				expr: &seqExpr{
					pos: position{line: 380, col: 15, offset: 8746},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 380, col: 15, offset: 8746},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 380, col: 17, offset: 8748},
							name: "ElseToken",
						},
						&ruleRefExpr{
							pos:  position{line: 380, col: 27, offset: 8758},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 380, col: 29, offset: 8760},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 380, col: 35, offset: 8766},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IfToken",
			pos:  position{line: 384, col: 1, offset: 8805},
			expr: &litMatcher{
				pos:        position{line: 384, col: 12, offset: 8816},
				val:        "if",
				ignoreCase: false,
				want:       "\"if\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ElseToken",
			pos:  position{line: 385, col: 1, offset: 8821},
			expr: &litMatcher{
				pos:        position{line: 385, col: 14, offset: 8834},
				val:        "else",
				ignoreCase: false,
				want:       "\"else\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Let",
			pos:  position{line: 387, col: 1, offset: 8842},
			expr: &actionExpr{
				pos: position{line: 387, col: 8, offset: 8849},
				run: (*parser).callonLet1,
				expr: &seqExpr{
					pos: position{line: 387, col: 8, offset: 8849},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 387, col: 8, offset: 8849},
							name: "LetToken",
						},
						&ruleRefExpr{
							pos:  position{line: 387, col: 17, offset: 8858},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 387, col: 19, offset: 8860},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 24, offset: 8865},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 387, col: 27, offset: 8868},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 387, col: 29, offset: 8870},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 387, col: 33, offset: 8874},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 387, col: 35, offset: 8876},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 41, offset: 8882},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 387, col: 46, offset: 8887},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 387, col: 48, offset: 8889},
							name: "InToken",
						},
						&ruleRefExpr{
							pos:  position{line: 387, col: 56, offset: 8897},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 387, col: 58, offset: 8899},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 387, col: 63, offset: 8904},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LetToken",
			pos:  position{line: 395, col: 1, offset: 9010},
			expr: &litMatcher{
				pos:        position{line: 395, col: 13, offset: 9022},
				val:        "let",
				ignoreCase: false,
				want:       "\"let\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "InToken",
			pos:  position{line: 396, col: 1, offset: 9028},
			expr: &litMatcher{
				pos:        position{line: 396, col: 12, offset: 9039},
				val:        "in",
				ignoreCase: false,
				want:       "\"in\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Lambda",
			pos:  position{line: 398, col: 1, offset: 9045},
			expr: &actionExpr{
				pos: position{line: 398, col: 11, offset: 9055},
				run: (*parser).callonLambda1,
				expr: &seqExpr{
					pos: position{line: 398, col: 11, offset: 9055},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 398, col: 11, offset: 9055},
							val:        "\\",
							ignoreCase: false,
							want:       "\"\\\\\"",
						},
						&labeledExpr{
							pos:   position{line: 398, col: 16, offset: 9060},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 398, col: 21, offset: 9065},
								name: "LambdaArgs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 398, col: 32, offset: 9076},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 398, col: 34, offset: 9078},
							val:        "->",
							ignoreCase: false,
							want:       "\"->\"",
						},
						&ruleRefExpr{
							pos:  position{line: 398, col: 39, offset: 9083},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 398, col: 41, offset: 9085},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 398, col: 46, offset: 9090},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LambdaArgs",
			pos:  position{line: 405, col: 1, offset: 9176},
			expr: &choiceExpr{
				pos: position{line: 405, col: 15, offset: 9190},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 405, col: 15, offset: 9190},
						run: (*parser).callonLambdaArgs2,
						expr: &seqExpr{
							pos: position{line: 405, col: 15, offset: 9190},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 405, col: 15, offset: 9190},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&labeledExpr{
									pos:   position{line: 405, col: 19, offset: 9194},
									label: "args",
									expr: &zeroOrMoreExpr{
										pos: position{line: 405, col: 24, offset: 9199},
										expr: &ruleRefExpr{
											pos:  position{line: 405, col: 24, offset: 9199},
											name: "LambdaArg",
										},
									},
								},
								&litMatcher{
									pos:        position{line: 405, col: 35, offset: 9210},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 407, col: 5, offset: 9256},
						run: (*parser).callonLambdaArgs9,
						expr: &labeledExpr{
							pos:   position{line: 407, col: 5, offset: 9256},
							label: "arg",
							expr: &ruleRefExpr{
								pos:  position{line: 407, col: 9, offset: 9260},
								name: "Id",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LambdaArg",
			pos:  position{line: 411, col: 1, offset: 9305},
			expr: &actionExpr{
				pos: position{line: 411, col: 14, offset: 9318},
				run: (*parser).callonLambdaArg1,
				expr: &seqExpr{
					pos: position{line: 411, col: 14, offset: 9318},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 411, col: 14, offset: 9318},
							label: "arg",
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 18, offset: 9322},
								name: "Id",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 411, col: 21, offset: 9325},
							expr: &ruleRefExpr{
								pos:  position{line: 411, col: 21, offset: 9325},
								name: "CommaToken",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Match",
			pos:  position{line: 415, col: 1, offset: 9369},
			expr: &actionExpr{
				pos: position{line: 415, col: 10, offset: 9378},
				run: (*parser).callonMatch1,
				expr: &seqExpr{
					pos: position{line: 415, col: 10, offset: 9378},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 415, col: 10, offset: 9378},
							name: "MatchToken",
						},
						&ruleRefExpr{
							pos:  position{line: 415, col: 21, offset: 9389},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 415, col: 23, offset: 9391},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 28, offset: 9396},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 415, col: 33, offset: 9401},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 415, col: 35, offset: 9403},
							name: "WithToken",
						},
						&ruleRefExpr{
							pos:  position{line: 415, col: 45, offset: 9413},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 415, col: 47, offset: 9415},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 415, col: 51, offset: 9419},
							label: "cases",
							expr: &zeroOrMoreExpr{
								pos: position{line: 415, col: 57, offset: 9425},
								expr: &ruleRefExpr{
									pos:  position{line: 415, col: 57, offset: 9425},
									name: "MatchCase",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 415, col: 68, offset: 9436},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MatchCase",
			pos:  position{line: 422, col: 1, offset: 9531},
			expr: &actionExpr{
				pos: position{line: 422, col: 14, offset: 9544},
				run: (*parser).callonMatchCase1,
				expr: &seqExpr{
					pos: position{line: 422, col: 14, offset: 9544},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 422, col: 14, offset: 9544},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 422, col: 22, offset: 9552},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 422, col: 30, offset: 9560},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 422, col: 32, offset: 9562},
							val:        "->",
							ignoreCase: false,
							want:       "\"->\"",
						},
						&ruleRefExpr{
							pos:  position{line: 422, col: 37, offset: 9567},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 422, col: 39, offset: 9569},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 422, col: 44, offset: 9574},
								name: "Form",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 422, col: 49, offset: 9579},
							expr: &ruleRefExpr{
								pos:  position{line: 422, col: 49, offset: 9579},
								name: "CommaToken",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Pattern",
			pos:  position{line: 429, col: 1, offset: 9680},
			expr: &choiceExpr{
				pos: position{line: 429, col: 12, offset: 9691},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 429, col: 12, offset: 9691},
						name: "WildcardPattern",
					},
					&ruleRefExpr{
						pos:  position{line: 429, col: 30, offset: 9709},
						name: "LiteralPattern",
					},
					&ruleRefExpr{
						pos:  position{line: 429, col: 47, offset: 9726},
						name: "ConstructorPattern",
					},
					&ruleRefExpr{
						pos:  position{line: 429, col: 68, offset: 9747},
						name: "VariablePattern",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WildcardPattern",
			pos:  position{line: 431, col: 1, offset: 9764},
			expr: &actionExpr{
				pos: position{line: 431, col: 20, offset: 9783},
				run: (*parser).callonWildcardPattern1,
				expr: &litMatcher{
					pos:        position{line: 431, col: 20, offset: 9783},
					val:        "_",
					ignoreCase: false,
					want:       "\"_\"",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LiteralPattern",
			pos:  position{line: 435, col: 1, offset: 9824},
			expr: &actionExpr{
				pos: position{line: 435, col: 19, offset: 9842},
				run: (*parser).callonLiteralPattern1,
				expr: &labeledExpr{
					pos:   position{line: 435, col: 19, offset: 9842},
					label: "lit",
					expr: &ruleRefExpr{
						pos:  position{line: 435, col: 23, offset: 9846},
						name: "Literal",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ConstructorPattern",
			pos:  position{line: 439, col: 1, offset: 9907},
			expr: &actionExpr{
				pos: position{line: 439, col: 23, offset: 9929},
				run: (*parser).callonConstructorPattern1,
				expr: &seqExpr{
					pos: position{line: 439, col: 23, offset: 9929},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 439, col: 23, offset: 9929},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 439, col: 28, offset: 9934},
								name: "UpperId",
							},
						},
						&labeledExpr{
							pos:   position{line: 439, col: 36, offset: 9942},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 439, col: 41, offset: 9947},
								expr: &ruleRefExpr{
									pos:  position{line: 439, col: 41, offset: 9947},
									name: "PatternArgs",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PatternArgs",
			pos:  position{line: 450, col: 1, offset: 10128},
			expr: &actionExpr{
				pos: position{line: 450, col: 16, offset: 10143},
				run: (*parser).callonPatternArgs1,
				expr: &seqExpr{
					pos: position{line: 450, col: 16, offset: 10143},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 450, col: 16, offset: 10143},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&labeledExpr{
							pos:   position{line: 450, col: 20, offset: 10147},
							label: "patterns",
							expr: &zeroOrMoreExpr{
								pos: position{line: 450, col: 29, offset: 10156},
								expr: &ruleRefExpr{
									pos:  position{line: 450, col: 29, offset: 10156},
									name: "PatternArg",
								},
							},
						},
						&litMatcher{
							pos:        position{line: 450, col: 41, offset: 10168},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PatternArg",
			pos:  position{line: 454, col: 1, offset: 10218},
			expr: &actionExpr{
				pos: position{line: 454, col: 15, offset: 10232},
				run: (*parser).callonPatternArg1,
				expr: &seqExpr{
					pos: position{line: 454, col: 15, offset: 10232},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 454, col: 15, offset: 10232},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 454, col: 23, offset: 10240},
								name: "Pattern",
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 454, col: 31, offset: 10248},
							expr: &ruleRefExpr{
								pos:  position{line: 454, col: 31, offset: 10248},
								name: "CommaToken",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VariablePattern",
			pos:  position{line: 458, col: 1, offset: 10297},
			expr: &actionExpr{
				pos: position{line: 458, col: 20, offset: 10316},
				run: (*parser).callonVariablePattern1,
				expr: &labeledExpr{
					pos:   position{line: 458, col: 20, offset: 10316},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 458, col: 25, offset: 10321},
						name: "Id",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MatchToken",
			pos:  position{line: 462, col: 1, offset: 10380},
			expr: &litMatcher{
				pos:        position{line: 462, col: 15, offset: 10394},
				val:        "match",
				ignoreCase: false,
				want:       "\"match\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WithToken",
			pos:  position{line: 463, col: 1, offset: 10402},
			expr: &litMatcher{
				pos:        position{line: 463, col: 14, offset: 10415},
				val:        "with",
				ignoreCase: false,
				want:       "\"with\"",
			},
			leader:        false,
			leftRecursive: false,
		},
	},
}

func (c *current) onDash5(e any) (any, error) {
	return e, nil
}

func (p *parser) callonDash5() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDash5(stack["e"])
}

func (c *current) onDash1(es any) (any, error) {
	exprs := sliceOf[Node](es)
	log.Println("!!! DASH", exprs)
	return Block{
		Forms: exprs,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonDash1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDash1(stack["es"])
}

func (c *current) onClass1(name, block any) (any, error) {
	return ClassDecl{
		Named:      name.(string),
		Value:      block.(Block),
		Visibility: PrivateVisibility, // TODO
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonClass1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClass1(stack["name"], stack["block"])
}

func (c *current) onTypeAndValueSlot1(vis, name, type_, value any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Type_:      type_.(TypeNode),
		Value:      value.(Node),
		Visibility: vis.(Visibility),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonTypeAndValueSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndValueSlot1(stack["vis"], stack["name"], stack["type_"], stack["value"])
}

func (c *current) onValueOnlySlot1(vis, name, val any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Value:      val.(Node),
		Visibility: vis.(Visibility),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonValueOnlySlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueOnlySlot1(stack["vis"], stack["name"], stack["val"])
}

func (c *current) onTypeOnlySlot1(vis, name, type_ any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Type_:      type_.(TypeNode),
		Visibility: vis.(Visibility),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonTypeOnlySlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeOnlySlot1(stack["vis"], stack["name"], stack["type_"])
}

func (c *current) onTypeAndBlockSlot1(vis, name, type_, block any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Type_: FunTypeNode{nil, type_.(TypeNode)},
		Value: FunDecl{
			Named: name.(string),
			Ret:   type_.(TypeNode),
			Form:  block.(Block),
			Loc: &SourceLocation{
				Line:   c.pos.line,
				Column: c.pos.col,
				Length: len(string(c.text)),
			},
		},
		Visibility: vis.(Visibility),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonTypeAndBlockSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndBlockSlot1(stack["vis"], stack["name"], stack["type_"], stack["block"])
}

func (c *current) onTypeAndArgsAndBlockSlot1(vis, name, args, type_, block any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Type_: FunTypeNode{args.([]SlotDecl), type_.(TypeNode)},
		Value: FunDecl{
			Named: name.(string),
			Args:  args.([]SlotDecl),
			Ret:   type_.(TypeNode),
			Form:  block.(Block),
			Loc: &SourceLocation{
				Line:   c.pos.line,
				Column: c.pos.col,
				Length: len(string(c.text)),
			},
		},
		Visibility: vis.(Visibility),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonTypeAndArgsAndBlockSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndArgsAndBlockSlot1(stack["vis"], stack["name"], stack["args"], stack["type_"], stack["block"])
}

func (c *current) onVisibility2() (any, error) {
	return PublicVisibility, nil
}

func (p *parser) callonVisibility2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVisibility2()
}

func (c *current) onVisibility4() (any, error) {
	return PrivateVisibility, nil
}

func (p *parser) callonVisibility4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVisibility4()
}

func (c *current) onWordToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonWordToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWordToken1()
}

func (c *current) onUpperToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUpperToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpperToken1()
}

func (c *current) onFunCall1(name, args any) (any, error) {
	return FunCall{
		Fun:  name.(Node),
		Args: Record(args.([]Keyed[Node])),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonFunCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunCall1(stack["name"], stack["args"])
}

func (c *current) onArgValues1(args any) (any, error) {
	return sliceOf[Keyed[Node]](args), nil
}

func (p *parser) callonArgValues1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgValues1(stack["args"])
}

func (c *current) onArgTypes1(args any) (any, error) {
	return sliceOf[SlotDecl](args), nil
}

func (p *parser) callonArgTypes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgTypes1(stack["args"])
}

func (c *current) onArgType1(slot any) (any, error) {
	return slot.(SlotDecl), nil
}

func (p *parser) callonArgType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgType1(stack["slot"])
}

func (c *current) onArgWithDefault1(name, type_, value any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Type_: type_.(TypeNode),
		Value: value.(Node),
	}, nil
}

func (p *parser) callonArgWithDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithDefault1(stack["name"], stack["type_"], stack["value"])
}

func (c *current) onArgWithBlockDefault1(name, type_, block any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Type_: type_.(TypeNode),
		Value: block.(Block),
	}, nil
}

func (p *parser) callonArgWithBlockDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithBlockDefault1(stack["name"], stack["type_"], stack["block"])
}

func (c *current) onArgWithType1(name, type_ any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Type_: type_.(TypeNode),
	}, nil
}

func (p *parser) callonArgWithType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithType1(stack["name"], stack["type_"])
}

func (c *current) onKeyValue1(key, value any) (any, error) {
	return Keyed[Node]{key.(string), value.(Node)}, nil
}

func (p *parser) callonKeyValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyValue1(stack["key"], stack["value"])
}

func (c *current) onNamedType1(name any) (any, error) {
	return NamedTypeNode{name.(string)}, nil
}

func (p *parser) callonNamedType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedType1(stack["name"])
}

func (c *current) onListType1(inner any) (any, error) {
	return ListTypeNode{inner.(TypeNode)}, nil
}

func (p *parser) callonListType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListType1(stack["inner"])
}

func (c *current) onNonNull1(inner any) (any, error) {
	return NonNullTypeNode{inner.(TypeNode)}, nil
}

func (p *parser) callonNonNull1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonNull1(stack["inner"])
}

func (c *current) onTypeVariable1(v any) (any, error) {
	return VariableTypeNode{v.(byte)}, nil
}

func (p *parser) callonTypeVariable1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeVariable1(stack["v"])
}

func (c *current) onDefault1(left, right any) (any, error) {
	return Default{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault1(stack["left"], stack["right"])
}

func (c *current) onSelect1(left, name any) (any, error) {
	return Select{
		Receiver: left.(Node),
		Field:    name.(string),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonSelect1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelect1(stack["left"], stack["name"])
}

func (c *current) onList7(e any) (any, error) {
	return e, nil
}

func (p *parser) callonList7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onList7(stack["e"])
}

func (c *current) onList1(eles any) (any, error) {
	return List{
		Elements: sliceOf[Node](eles),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onList1(stack["eles"])
}

func (c *current) onBlock6(e any) (any, error) {
	return e, nil
}

func (p *parser) callonBlock6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock6(stack["e"])
}

func (c *current) onBlock1(es any) (any, error) {
	exprs := sliceOf[Node](es)
	log.Println("!!! BLOCK", exprs)
	return Block{
		Forms: exprs,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock1(stack["es"])
}

func (c *current) onSymbol1(name any) (any, error) {
	return Symbol{
		Name: name.(string),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonSymbol1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol1(stack["name"])
}

func (c *current) onInt3() (any, error) {
	value, err := strconv.ParseInt(string(c.text), 10, 64)
	if err != nil {
		return nil, err
	}
	return Int{
		Value: value,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonInt3() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInt3()
}

func (c *current) onString1() (any, error) {
	c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
	value, err := strconv.Unquote(string(c.text))
	if err != nil {
		return nil, err
	}
	return String{
		Value: value,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1()
}

func (c *current) onQuoted1(quoter, raw any) (any, error) {
	return Quoted{
		quoter.(string),
		raw.(string),
	}, nil
}

func (p *parser) callonQuoted1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoted1(stack["quoter"], stack["raw"])
}

func (c *current) onQuotedRawToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonQuotedRawToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedRawToken1()
}

func (c *current) onBoolean2() (any, error) {

	return Boolean{
		Value: true,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonBoolean2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean2()
}

func (c *current) onBoolean4() (any, error) {

	return Boolean{
		Value: false,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonBoolean4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean4()
}

func (c *current) onNull1() (any, error) {

	return Null{
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonNull1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNull1()
}

func (c *current) onConditional1(cond, block, else_ any) (any, error) {
	return Conditional{
		Condition: cond.(Node),
		Then:      block.(Block),
		Else:      else_,
	}, nil
}

func (p *parser) callonConditional1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditional1(stack["cond"], stack["block"], stack["else_"])
}

func (c *current) onElseClause1(block any) (any, error) {
	return block.(Block), nil
}

func (p *parser) callonElseClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseClause1(stack["block"])
}

func (c *current) onLet1(name, value, expr any) (any, error) {
	return Let{
		Name:  name.(string),
		Value: value.(Node),
		Expr:  expr.(Node),
	}, nil
}

func (p *parser) callonLet1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLet1(stack["name"], stack["value"], stack["expr"])
}

func (c *current) onLambda1(args, expr any) (any, error) {
	return Lambda{
		Args: args.([]string),
		Expr: expr.(Node),
	}, nil
}

func (p *parser) callonLambda1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambda1(stack["args"], stack["expr"])
}

func (c *current) onLambdaArgs2(args any) (any, error) {
	return sliceOf[string](args), nil
}

func (p *parser) callonLambdaArgs2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaArgs2(stack["args"])
}

func (c *current) onLambdaArgs9(arg any) (any, error) {
	return []string{arg.(string)}, nil
}

func (p *parser) callonLambdaArgs9() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaArgs9(stack["arg"])
}

func (c *current) onLambdaArg1(arg any) (any, error) {
	return arg.(string), nil
}

func (p *parser) callonLambdaArg1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaArg1(stack["arg"])
}

func (c *current) onMatch1(expr, cases any) (any, error) {
	return Match{
		Expr:  expr.(Node),
		Cases: sliceOf[MatchCase](cases),
	}, nil
}

func (p *parser) callonMatch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatch1(stack["expr"], stack["cases"])
}

func (c *current) onMatchCase1(pattern, expr any) (any, error) {
	return MatchCase{
		Pattern: pattern.(Pattern),
		Expr:    expr.(Node),
	}, nil
}

func (p *parser) callonMatchCase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchCase1(stack["pattern"], stack["expr"])
}

func (c *current) onWildcardPattern1() (any, error) {
	return WildcardPattern{}, nil
}

func (p *parser) callonWildcardPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWildcardPattern1()
}

func (c *current) onLiteralPattern1(lit any) (any, error) {
	return LiteralPattern{Value: lit.(Node)}, nil
}

func (p *parser) callonLiteralPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralPattern1(stack["lit"])
}

func (c *current) onConstructorPattern1(name, args any) (any, error) {
	var patterns []Pattern
	if args != nil {
		patterns = args.([]Pattern)
	}
	return ConstructorPattern{
		Name: name.(string),
		Args: patterns,
	}, nil
}

func (p *parser) callonConstructorPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstructorPattern1(stack["name"], stack["args"])
}

func (c *current) onPatternArgs1(patterns any) (any, error) {
	return sliceOf[Pattern](patterns), nil
}

func (p *parser) callonPatternArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternArgs1(stack["patterns"])
}

func (c *current) onPatternArg1(pattern any) (any, error) {
	return pattern.(Pattern), nil
}

func (p *parser) callonPatternArg1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternArg1(stack["pattern"])
}

func (c *current) onVariablePattern1(name any) (any, error) {
	return VariablePattern{Name: name.(string)}, nil
}

func (p *parser) callonVariablePattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariablePattern1(stack["name"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expresssions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any

	leader        bool
	leftRecursive bool
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type ruleWithExpsStack struct {
	rule   *rule
	estack []any
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleRecursiveLeader(rule *rule) (any, bool) {
	result, ok := p.getMemoized(rule)
	if ok {
		p.restore(result.end)
		return result.v, result.b
	}

	if p.debug {
		defer p.out(p.in("recursive " + rule.name))
	}

	var (
		depth      = 0
		startMark  = p.pt
		lastResult = resultTuple{nil, false, startMark}
		lastErrors = *p.errs
	)

	for {
		lastState := p.cloneState()
		p.setMemoized(startMark, rule, lastResult)
		val, ok := p.parseRule(rule)
		endMark := p.pt
		if p.debug {
			p.printIndent("RECURSIVE", fmt.Sprintf(
				"Rule %s depth %d: %t -> %s",
				rule.name, depth, ok, string(p.sliceFrom(startMark))))
		}
		if (!ok) || (endMark.offset <= lastResult.end.offset && depth != 0) {
			p.restoreState(lastState)
			*p.errs = lastErrors
			break
		}
		lastResult = resultTuple{val, ok, endMark}
		lastErrors = *p.errs
		p.restore(startMark)
		depth++
	}

	p.restore(lastResult.end)
	p.setMemoized(startMark, rule, lastResult)
	return lastResult.v, lastResult.b
}

func (p *parser) parseRuleRecursiveNoLeader(rule *rule) (any, bool) {
	return p.parseRule(rule)
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize || rule.leftRecursive {
		if rule.leader {
			val, ok = p.parseRuleRecursiveLeader(rule)
		} else if p.memoize && !rule.leftRecursive {
			val, ok = p.parseRuleMemoize(rule)
		} else {
			val, ok = p.parseRuleRecursiveNoLeader(rule)
		}
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	isLeftRecusion := p.rstack[len(p.rstack)-1].leftRecursive
	if p.memoize && !isLeftRecusion {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize && !isLeftRecusion {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
