// Code generated by pigeon; DO NOT EDIT.

package dash

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

var g = &grammar{
	rules: []*rule{
		{
			name: "Dash",
			pos:  position{line: 5, col: 1, offset: 20},
			expr: &actionExpr{
				pos: position{line: 5, col: 9, offset: 28},
				run: (*parser).callonDash1,
				expr: &seqExpr{
					pos: position{line: 5, col: 9, offset: 28},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 5, col: 9, offset: 28},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 5, col: 11, offset: 30},
							label: "eles",
							expr: &zeroOrMoreExpr{
								pos: position{line: 5, col: 16, offset: 35},
								expr: &actionExpr{
									pos: position{line: 5, col: 17, offset: 36},
									run: (*parser).callonDash6,
									expr: &seqExpr{
										pos: position{line: 5, col: 17, offset: 36},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 5, col: 17, offset: 36},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 5, col: 19, offset: 38},
													name: "Expr",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 5, col: 24, offset: 43},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 5, col: 48, offset: 67},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 5, col: 53, offset: 72},
								expr: &ruleRefExpr{
									pos:  position{line: 5, col: 53, offset: 72},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 5, col: 59, offset: 78},
							name: "_",
						},
						&notExpr{
							pos: position{line: 5, col: 61, offset: 80},
							expr: &anyMatcher{
								line: 5, col: 62, offset: 81,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 16, col: 1, offset: 274},
			expr: &zeroOrMoreExpr{
				pos: position{line: 16, col: 19, offset: 292},
				expr: &choiceExpr{
					pos: position{line: 16, col: 20, offset: 293},
					alternatives: []any{
						&charClassMatcher{
							pos:        position{line: 16, col: 20, offset: 293},
							val:        "[ \\t\\r\\n]",
							chars:      []rune{' ', '\t', '\r', '\n'},
							ignoreCase: false,
							inverted:   false,
						},
						&ruleRefExpr{
							pos:  position{line: 16, col: 32, offset: 305},
							name: "CommentToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "_lineSpace",
			pos:  position{line: 17, col: 1, offset: 320},
			expr: &zeroOrMoreExpr{
				pos: position{line: 17, col: 15, offset: 334},
				expr: &charClassMatcher{
					pos:        position{line: 17, col: 15, offset: 334},
					val:        "[ \\t]",
					chars:      []rune{' ', '\t'},
					ignoreCase: false,
					inverted:   false,
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Sep",
			pos:  position{line: 19, col: 1, offset: 342},
			expr: &seqExpr{
				pos: position{line: 19, col: 8, offset: 349},
				exprs: []any{
					&choiceExpr{
						pos: position{line: 19, col: 9, offset: 350},
						alternatives: []any{
							&seqExpr{
								pos: position{line: 19, col: 9, offset: 350},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 19, col: 9, offset: 350},
										name: "_",
									},
									&ruleRefExpr{
										pos:  position{line: 19, col: 11, offset: 352},
										name: "CommaToken",
									},
								},
							},
							&seqExpr{
								pos: position{line: 19, col: 24, offset: 365},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 19, col: 24, offset: 365},
										name: "_lineSpace",
									},
									&litMatcher{
										pos:        position{line: 19, col: 35, offset: 376},
										val:        "\n",
										ignoreCase: false,
										want:       "\"\\n\"",
									},
								},
							},
						},
					},
					&ruleRefExpr{
						pos:  position{line: 19, col: 41, offset: 382},
						name: "_",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CommaToken",
			pos:  position{line: 20, col: 1, offset: 384},
			expr: &litMatcher{
				pos:        position{line: 20, col: 15, offset: 398},
				val:        ",",
				ignoreCase: false,
				want:       "\",\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Expr",
			pos:  position{line: 22, col: 1, offset: 403},
			expr: &choiceExpr{
				pos: position{line: 22, col: 9, offset: 411},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 22, col: 9, offset: 411},
						name: "Class",
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 17, offset: 419},
						name: "Slot",
					},
					&ruleRefExpr{
						pos:  position{line: 22, col: 24, offset: 426},
						name: "Form",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Form",
			pos:  position{line: 24, col: 1, offset: 432},
			expr: &choiceExpr{
				pos: position{line: 24, col: 9, offset: 440},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 24, col: 9, offset: 440},
						name: "Conditional",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 23, offset: 454},
						name: "Let",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 29, offset: 460},
						name: "Lambda",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 38, offset: 469},
						name: "Match",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 46, offset: 477},
						name: "Assert",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 55, offset: 486},
						name: "Reassignment",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 70, offset: 501},
						name: "Infix",
					},
					&ruleRefExpr{
						pos:  position{line: 24, col: 78, offset: 509},
						name: "Term",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Term",
			pos:  position{line: 26, col: 1, offset: 515},
			expr: &choiceExpr{
				pos: position{line: 26, col: 9, offset: 523},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 26, col: 9, offset: 523},
						name: "Literal",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 19, offset: 533},
						name: "SelectOrCall",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 34, offset: 548},
						name: "List",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 41, offset: 555},
						name: "Object",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 50, offset: 564},
						name: "Block",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 58, offset: 572},
						name: "ParenExpr",
					},
					&ruleRefExpr{
						pos:  position{line: 26, col: 70, offset: 584},
						name: "SymbolOrCall",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "ParenExpr",
			pos:  position{line: 28, col: 1, offset: 598},
			expr: &actionExpr{
				pos: position{line: 28, col: 14, offset: 611},
				run: (*parser).callonParenExpr1,
				expr: &seqExpr{
					pos: position{line: 28, col: 14, offset: 611},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 28, col: 14, offset: 611},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 18, offset: 615},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 28, col: 20, offset: 617},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 28, col: 25, offset: 622},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 28, col: 30, offset: 627},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 28, col: 32, offset: 629},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SymbolOrCall",
			pos:  position{line: 33, col: 1, offset: 705},
			expr: &choiceExpr{
				pos: position{line: 33, col: 17, offset: 721},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 33, col: 17, offset: 721},
						name: "Call",
					},
					&ruleRefExpr{
						pos:  position{line: 33, col: 24, offset: 728},
						name: "Symbol",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Call",
			pos:  position{line: 34, col: 1, offset: 735},
			expr: &actionExpr{
				pos: position{line: 34, col: 9, offset: 743},
				run: (*parser).callonCall1,
				expr: &seqExpr{
					pos: position{line: 34, col: 9, offset: 743},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 34, col: 9, offset: 743},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 34, col: 14, offset: 748},
								name: "Id",
							},
						},
						&labeledExpr{
							pos:   position{line: 34, col: 17, offset: 751},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 34, col: 22, offset: 756},
								name: "ArgValues",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Symbol",
			pos:  position{line: 48, col: 1, offset: 1085},
			expr: &actionExpr{
				pos: position{line: 48, col: 11, offset: 1095},
				run: (*parser).callonSymbol1,
				expr: &labeledExpr{
					pos:   position{line: 48, col: 11, offset: 1095},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 48, col: 16, offset: 1100},
						name: "Id",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SelectOrCall",
			pos:  position{line: 62, col: 1, offset: 1356},
			expr: &actionExpr{
				pos: position{line: 62, col: 17, offset: 1372},
				run: (*parser).callonSelectOrCall1,
				expr: &seqExpr{
					pos: position{line: 62, col: 17, offset: 1372},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 62, col: 17, offset: 1372},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 62, col: 22, offset: 1377},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 62, col: 27, offset: 1382},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 62, col: 29, offset: 1384},
							name: "DotToken",
						},
						&ruleRefExpr{
							pos:  position{line: 62, col: 38, offset: 1393},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 62, col: 40, offset: 1395},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 62, col: 45, offset: 1400},
								name: "Id",
							},
						},
						&labeledExpr{
							pos:   position{line: 62, col: 48, offset: 1403},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 62, col: 53, offset: 1408},
								expr: &ruleRefExpr{
									pos:  position{line: 62, col: 53, offset: 1408},
									name: "ArgValues",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "Class",
			pos:  position{line: 92, col: 1, offset: 2062},
			expr: &actionExpr{
				pos: position{line: 92, col: 10, offset: 2071},
				run: (*parser).callonClass1,
				expr: &seqExpr{
					pos: position{line: 92, col: 10, offset: 2071},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 92, col: 10, offset: 2071},
							name: "ClsToken",
						},
						&ruleRefExpr{
							pos:  position{line: 92, col: 19, offset: 2080},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 92, col: 21, offset: 2082},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 92, col: 26, offset: 2087},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 92, col: 29, offset: 2090},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 92, col: 31, offset: 2092},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 92, col: 37, offset: 2098},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ClsToken",
			pos:  position{line: 104, col: 1, offset: 2349},
			expr: &seqExpr{
				pos: position{line: 104, col: 13, offset: 2361},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 104, col: 13, offset: 2361},
						val:        "cls",
						ignoreCase: false,
						want:       "\"cls\"",
					},
					&notExpr{
						pos: position{line: 104, col: 19, offset: 2367},
						expr: &ruleRefExpr{
							pos:  position{line: 104, col: 20, offset: 2368},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Slot",
			pos:  position{line: 106, col: 1, offset: 2378},
			expr: &choiceExpr{
				pos: position{line: 106, col: 9, offset: 2386},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 106, col: 9, offset: 2386},
						name: "TypeAndArgsAndBlockSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 107, col: 9, offset: 2455},
						name: "TypeAndBlockSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 108, col: 9, offset: 2589},
						name: "TypeAndValueSlot",
					},
					&ruleRefExpr{
						pos:  position{line: 109, col: 9, offset: 2728},
						name: "ValueOnlySlot",
					},
					&ruleRefExpr{
						pos:  position{line: 110, col: 9, offset: 2822},
						name: "TypeOnlySlot",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeAndValueSlot",
			pos:  position{line: 112, col: 1, offset: 2910},
			expr: &actionExpr{
				pos: position{line: 112, col: 21, offset: 2930},
				run: (*parser).callonTypeAndValueSlot1,
				expr: &seqExpr{
					pos: position{line: 112, col: 21, offset: 2930},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 112, col: 21, offset: 2930},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 25, offset: 2934},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 36, offset: 2945},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 112, col: 38, offset: 2947},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 43, offset: 2952},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 46, offset: 2955},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 48, offset: 2957},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 59, offset: 2968},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 112, col: 61, offset: 2970},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 67, offset: 2976},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 72, offset: 2981},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 112, col: 74, offset: 2983},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 112, col: 78, offset: 2987},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 112, col: 80, offset: 2989},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 112, col: 86, offset: 2995},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ValueOnlySlot",
			pos:  position{line: 126, col: 1, offset: 3264},
			expr: &actionExpr{
				pos: position{line: 126, col: 18, offset: 3281},
				run: (*parser).callonValueOnlySlot1,
				expr: &seqExpr{
					pos: position{line: 126, col: 18, offset: 3281},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 126, col: 18, offset: 3281},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 22, offset: 3285},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 126, col: 33, offset: 3296},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 126, col: 35, offset: 3298},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 40, offset: 3303},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 126, col: 43, offset: 3306},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 126, col: 45, offset: 3308},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 126, col: 49, offset: 3312},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 126, col: 51, offset: 3314},
							label: "val",
							expr: &ruleRefExpr{
								pos:  position{line: 126, col: 55, offset: 3318},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeOnlySlot",
			pos:  position{line: 139, col: 1, offset: 3556},
			expr: &actionExpr{
				pos: position{line: 139, col: 17, offset: 3572},
				run: (*parser).callonTypeOnlySlot1,
				expr: &seqExpr{
					pos: position{line: 139, col: 17, offset: 3572},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 139, col: 17, offset: 3572},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 139, col: 21, offset: 3576},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 139, col: 32, offset: 3587},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 139, col: 34, offset: 3589},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 139, col: 39, offset: 3594},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 139, col: 42, offset: 3597},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 139, col: 44, offset: 3599},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 139, col: 55, offset: 3610},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 139, col: 57, offset: 3612},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 139, col: 63, offset: 3618},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeAndBlockSlot",
			pos:  position{line: 152, col: 1, offset: 3862},
			expr: &actionExpr{
				pos: position{line: 152, col: 21, offset: 3882},
				run: (*parser).callonTypeAndBlockSlot1,
				expr: &seqExpr{
					pos: position{line: 152, col: 21, offset: 3882},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 152, col: 21, offset: 3882},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 25, offset: 3886},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 36, offset: 3897},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 152, col: 38, offset: 3899},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 43, offset: 3904},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 46, offset: 3907},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 48, offset: 3909},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 59, offset: 3920},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 152, col: 61, offset: 3922},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 67, offset: 3928},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 152, col: 72, offset: 3933},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 152, col: 74, offset: 3935},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 152, col: 80, offset: 3941},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TypeAndArgsAndBlockSlot",
			pos:  position{line: 175, col: 1, offset: 4442},
			expr: &actionExpr{
				pos: position{line: 175, col: 28, offset: 4469},
				run: (*parser).callonTypeAndArgsAndBlockSlot1,
				expr: &seqExpr{
					pos: position{line: 175, col: 28, offset: 4469},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 175, col: 28, offset: 4469},
							label: "vis",
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 32, offset: 4473},
								name: "Visibility",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 175, col: 43, offset: 4484},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 175, col: 45, offset: 4486},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 50, offset: 4491},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 175, col: 53, offset: 4494},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 175, col: 55, offset: 4496},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 60, offset: 4501},
								name: "ArgTypes",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 175, col: 69, offset: 4510},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 175, col: 71, offset: 4512},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 175, col: 82, offset: 4523},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 175, col: 84, offset: 4525},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 90, offset: 4531},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 175, col: 95, offset: 4536},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 175, col: 97, offset: 4538},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 103, offset: 4544},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Visibility",
			pos:  position{line: 199, col: 1, offset: 5090},
			expr: &choiceExpr{
				pos: position{line: 199, col: 15, offset: 5104},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 199, col: 15, offset: 5104},
						run: (*parser).callonVisibility2,
						expr: &ruleRefExpr{
							pos:  position{line: 199, col: 15, offset: 5104},
							name: "PubToken",
						},
					},
					&actionExpr{
						pos: position{line: 200, col: 15, offset: 5160},
						run: (*parser).callonVisibility4,
						expr: &ruleRefExpr{
							pos:  position{line: 200, col: 15, offset: 5160},
							name: "PvtToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PubToken",
			pos:  position{line: 201, col: 1, offset: 5203},
			expr: &seqExpr{
				pos: position{line: 201, col: 13, offset: 5215},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 201, col: 13, offset: 5215},
						val:        "pub",
						ignoreCase: false,
						want:       "\"pub\"",
					},
					&notExpr{
						pos: position{line: 201, col: 19, offset: 5221},
						expr: &ruleRefExpr{
							pos:  position{line: 201, col: 20, offset: 5222},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PvtToken",
			pos:  position{line: 202, col: 1, offset: 5231},
			expr: &seqExpr{
				pos: position{line: 202, col: 13, offset: 5243},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 202, col: 13, offset: 5243},
						val:        "pvt",
						ignoreCase: false,
						want:       "\"pvt\"",
					},
					&notExpr{
						pos: position{line: 202, col: 19, offset: 5249},
						expr: &ruleRefExpr{
							pos:  position{line: 202, col: 20, offset: 5250},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Id",
			pos:  position{line: 204, col: 1, offset: 5260},
			expr: &ruleRefExpr{
				pos:  position{line: 204, col: 7, offset: 5266},
				name: "WordToken",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WordToken",
			pos:  position{line: 205, col: 1, offset: 5276},
			expr: &actionExpr{
				pos: position{line: 205, col: 14, offset: 5289},
				run: (*parser).callonWordToken1,
				expr: &seqExpr{
					pos: position{line: 205, col: 14, offset: 5289},
					exprs: []any{
						&notExpr{
							pos: position{line: 205, col: 14, offset: 5289},
							expr: &ruleRefExpr{
								pos:  position{line: 205, col: 15, offset: 5290},
								name: "NullToken",
							},
						},
						&charClassMatcher{
							pos:        position{line: 205, col: 25, offset: 5300},
							val:        "[a-zA-Z_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 205, col: 34, offset: 5309},
							expr: &charClassMatcher{
								pos:        position{line: 205, col: 34, offset: 5309},
								val:        "[a-zA-Z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WordChar",
			pos:  position{line: 208, col: 1, offset: 5356},
			expr: &charClassMatcher{
				pos:        position{line: 208, col: 13, offset: 5368},
				val:        "[a-zA-Z0-9_]",
				chars:      []rune{'_'},
				ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UpperId",
			pos:  position{line: 209, col: 1, offset: 5381},
			expr: &ruleRefExpr{
				pos:  position{line: 209, col: 12, offset: 5392},
				name: "UpperToken",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UpperToken",
			pos:  position{line: 210, col: 1, offset: 5403},
			expr: &actionExpr{
				pos: position{line: 210, col: 15, offset: 5417},
				run: (*parser).callonUpperToken1,
				expr: &seqExpr{
					pos: position{line: 210, col: 15, offset: 5417},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 210, col: 15, offset: 5417},
							val:        "[A-Z]",
							ranges:     []rune{'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 210, col: 20, offset: 5422},
							expr: &charClassMatcher{
								pos:        position{line: 210, col: 20, offset: 5422},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgValues",
			pos:  position{line: 214, col: 1, offset: 5469},
			expr: &actionExpr{
				pos: position{line: 214, col: 14, offset: 5482},
				run: (*parser).callonArgValues1,
				expr: &seqExpr{
					pos: position{line: 214, col: 14, offset: 5482},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 214, col: 14, offset: 5482},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 214, col: 18, offset: 5486},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 214, col: 20, offset: 5488},
							label: "args",
							expr: &zeroOrMoreExpr{
								pos: position{line: 214, col: 25, offset: 5493},
								expr: &actionExpr{
									pos: position{line: 214, col: 26, offset: 5494},
									run: (*parser).callonArgValues7,
									expr: &seqExpr{
										pos: position{line: 214, col: 26, offset: 5494},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 214, col: 26, offset: 5494},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 214, col: 28, offset: 5496},
													name: "Argument",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 214, col: 37, offset: 5505},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 214, col: 61, offset: 5529},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 214, col: 66, offset: 5534},
								expr: &ruleRefExpr{
									pos:  position{line: 214, col: 66, offset: 5534},
									name: "Argument",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 214, col: 76, offset: 5544},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 214, col: 78, offset: 5546},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgTypes",
			pos:  position{line: 217, col: 1, offset: 5607},
			expr: &actionExpr{
				pos: position{line: 217, col: 13, offset: 5619},
				run: (*parser).callonArgTypes1,
				expr: &seqExpr{
					pos: position{line: 217, col: 13, offset: 5619},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 217, col: 13, offset: 5619},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 217, col: 17, offset: 5623},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 217, col: 19, offset: 5625},
							label: "args",
							expr: &zeroOrMoreExpr{
								pos: position{line: 217, col: 24, offset: 5630},
								expr: &actionExpr{
									pos: position{line: 217, col: 25, offset: 5631},
									run: (*parser).callonArgTypes7,
									expr: &seqExpr{
										pos: position{line: 217, col: 25, offset: 5631},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 217, col: 25, offset: 5631},
												label: "a",
												expr: &ruleRefExpr{
													pos:  position{line: 217, col: 27, offset: 5633},
													name: "ArgType",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 217, col: 35, offset: 5641},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 217, col: 59, offset: 5665},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 217, col: 64, offset: 5670},
								expr: &ruleRefExpr{
									pos:  position{line: 217, col: 64, offset: 5670},
									name: "ArgType",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 217, col: 73, offset: 5679},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 217, col: 75, offset: 5681},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgType",
			pos:  position{line: 220, col: 1, offset: 5739},
			expr: &actionExpr{
				pos: position{line: 220, col: 12, offset: 5750},
				run: (*parser).callonArgType1,
				expr: &labeledExpr{
					pos:   position{line: 220, col: 12, offset: 5750},
					label: "slot",
					expr: &choiceExpr{
						pos: position{line: 220, col: 18, offset: 5756},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 220, col: 18, offset: 5756},
								name: "ArgWithDefault",
							},
							&ruleRefExpr{
								pos:  position{line: 220, col: 35, offset: 5773},
								name: "ArgWithBlockDefault",
							},
							&ruleRefExpr{
								pos:  position{line: 220, col: 57, offset: 5795},
								name: "ArgWithType",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithDefault",
			pos:  position{line: 223, col: 1, offset: 5842},
			expr: &actionExpr{
				pos: position{line: 223, col: 19, offset: 5860},
				run: (*parser).callonArgWithDefault1,
				expr: &seqExpr{
					pos: position{line: 223, col: 19, offset: 5860},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 223, col: 19, offset: 5860},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 24, offset: 5865},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 27, offset: 5868},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 29, offset: 5870},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 40, offset: 5881},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 223, col: 42, offset: 5883},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 48, offset: 5889},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 53, offset: 5894},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 223, col: 55, offset: 5896},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 223, col: 59, offset: 5900},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 223, col: 61, offset: 5902},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 223, col: 67, offset: 5908},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithBlockDefault",
			pos:  position{line: 230, col: 1, offset: 6025},
			expr: &actionExpr{
				pos: position{line: 230, col: 24, offset: 6048},
				run: (*parser).callonArgWithBlockDefault1,
				expr: &seqExpr{
					pos: position{line: 230, col: 24, offset: 6048},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 230, col: 24, offset: 6048},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 29, offset: 6053},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 32, offset: 6056},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 34, offset: 6058},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 45, offset: 6069},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 230, col: 47, offset: 6071},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 53, offset: 6077},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 230, col: 58, offset: 6082},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 230, col: 60, offset: 6084},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 230, col: 66, offset: 6090},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithType",
			pos:  position{line: 237, col: 1, offset: 6209},
			expr: &actionExpr{
				pos: position{line: 237, col: 16, offset: 6224},
				run: (*parser).callonArgWithType1,
				expr: &seqExpr{
					pos: position{line: 237, col: 16, offset: 6224},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 237, col: 16, offset: 6224},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 21, offset: 6229},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 237, col: 24, offset: 6232},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 237, col: 26, offset: 6234},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 237, col: 37, offset: 6245},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 237, col: 39, offset: 6247},
							label: "type_",
							expr: &ruleRefExpr{
								pos:  position{line: 237, col: 45, offset: 6253},
								name: "Type",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Argument",
			pos:  position{line: 244, col: 1, offset: 6346},
			expr: &choiceExpr{
				pos: position{line: 244, col: 13, offset: 6358},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 244, col: 13, offset: 6358},
						name: "KeyValue",
					},
					&ruleRefExpr{
						pos:  position{line: 244, col: 24, offset: 6369},
						name: "PositionalValue",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "KeyValue",
			pos:  position{line: 246, col: 1, offset: 6386},
			expr: &actionExpr{
				pos: position{line: 246, col: 13, offset: 6398},
				run: (*parser).callonKeyValue1,
				expr: &seqExpr{
					pos: position{line: 246, col: 13, offset: 6398},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 246, col: 13, offset: 6398},
							label: "key",
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 17, offset: 6402},
								name: "WordToken",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 246, col: 27, offset: 6412},
							name: "ColonToken",
						},
						&ruleRefExpr{
							pos:  position{line: 246, col: 38, offset: 6423},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 246, col: 40, offset: 6425},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 246, col: 46, offset: 6431},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PositionalValue",
			pos:  position{line: 250, col: 1, offset: 6526},
			expr: &actionExpr{
				pos: position{line: 250, col: 20, offset: 6545},
				run: (*parser).callonPositionalValue1,
				expr: &labeledExpr{
					pos:   position{line: 250, col: 20, offset: 6545},
					label: "value",
					expr: &ruleRefExpr{
						pos:  position{line: 250, col: 26, offset: 6551},
						name: "Form",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ColonToken",
			pos:  position{line: 253, col: 1, offset: 6634},
			expr: &litMatcher{
				pos:        position{line: 253, col: 15, offset: 6648},
				val:        ":",
				ignoreCase: false,
				want:       "\":\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Type",
			pos:  position{line: 255, col: 1, offset: 6653},
			expr: &choiceExpr{
				pos: position{line: 255, col: 9, offset: 6661},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 255, col: 9, offset: 6661},
						name: "NonNull",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 19, offset: 6671},
						name: "NamedType",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 31, offset: 6683},
						name: "ListType",
					},
					&ruleRefExpr{
						pos:  position{line: 255, col: 42, offset: 6694},
						name: "TypeVariable",
					},
				},
			},
			leader:        true,
			leftRecursive: true,
		},
		{
			name: "NamedType",
			pos:  position{line: 256, col: 1, offset: 6707},
			expr: &actionExpr{
				pos: position{line: 256, col: 14, offset: 6720},
				run: (*parser).callonNamedType1,
				expr: &labeledExpr{
					pos:   position{line: 256, col: 14, offset: 6720},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 256, col: 19, offset: 6725},
						name: "UpperId",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ListType",
			pos:  position{line: 259, col: 1, offset: 6780},
			expr: &actionExpr{
				pos: position{line: 259, col: 13, offset: 6792},
				run: (*parser).callonListType1,
				expr: &seqExpr{
					pos: position{line: 259, col: 13, offset: 6792},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 259, col: 13, offset: 6792},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&labeledExpr{
							pos:   position{line: 259, col: 17, offset: 6796},
							label: "inner",
							expr: &ruleRefExpr{
								pos:  position{line: 259, col: 23, offset: 6802},
								name: "Type",
							},
						},
						&litMatcher{
							pos:        position{line: 259, col: 28, offset: 6807},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NonNull",
			pos:  position{line: 262, col: 1, offset: 6860},
			expr: &actionExpr{
				pos: position{line: 262, col: 12, offset: 6871},
				run: (*parser).callonNonNull1,
				expr: &seqExpr{
					pos: position{line: 262, col: 12, offset: 6871},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 262, col: 12, offset: 6871},
							label: "inner",
							expr: &ruleRefExpr{
								pos:  position{line: 262, col: 18, offset: 6877},
								name: "Type",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 262, col: 23, offset: 6882},
							name: "BangToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: true,
		},
		{
			name: "TypeVariable",
			pos:  position{line: 265, col: 1, offset: 6944},
			expr: &actionExpr{
				pos: position{line: 265, col: 17, offset: 6960},
				run: (*parser).callonTypeVariable1,
				expr: &labeledExpr{
					pos:   position{line: 265, col: 17, offset: 6960},
					label: "v",
					expr: &charClassMatcher{
						pos:        position{line: 265, col: 19, offset: 6962},
						val:        "[a-z]",
						ranges:     []rune{'a', 'z'},
						ignoreCase: false,
						inverted:   false,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "BangToken",
			pos:  position{line: 269, col: 1, offset: 7019},
			expr: &litMatcher{
				pos:        position{line: 269, col: 14, offset: 7032},
				val:        "!",
				ignoreCase: false,
				want:       "\"!\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Infix",
			pos:  position{line: 271, col: 1, offset: 7037},
			expr: &choiceExpr{
				pos: position{line: 271, col: 10, offset: 7046},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 271, col: 10, offset: 7046},
						name: "Equality",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 21, offset: 7057},
						name: "Inequality",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 34, offset: 7070},
						name: "LessThanEqual",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 50, offset: 7086},
						name: "LessThan",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 61, offset: 7097},
						name: "GreaterThanEqual",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 80, offset: 7116},
						name: "GreaterThan",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 94, offset: 7130},
						name: "Default",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 104, offset: 7140},
						name: "Addition",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 115, offset: 7151},
						name: "Subtraction",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 129, offset: 7165},
						name: "Multiplication",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 146, offset: 7182},
						name: "Division",
					},
					&ruleRefExpr{
						pos:  position{line: 271, col: 157, offset: 7193},
						name: "Modulo",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Default",
			pos:  position{line: 272, col: 1, offset: 7200},
			expr: &actionExpr{
				pos: position{line: 272, col: 12, offset: 7211},
				run: (*parser).callonDefault1,
				expr: &seqExpr{
					pos: position{line: 272, col: 12, offset: 7211},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 272, col: 12, offset: 7211},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 17, offset: 7216},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 272, col: 22, offset: 7221},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 272, col: 24, offset: 7223},
							name: "InterroToken",
						},
						&ruleRefExpr{
							pos:  position{line: 272, col: 37, offset: 7236},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 272, col: 39, offset: 7238},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 272, col: 45, offset: 7244},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "InterroToken",
			pos:  position{line: 283, col: 1, offset: 7445},
			expr: &litMatcher{
				pos:        position{line: 283, col: 17, offset: 7461},
				val:        "?",
				ignoreCase: false,
				want:       "\"?\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Addition",
			pos:  position{line: 285, col: 1, offset: 7466},
			expr: &actionExpr{
				pos: position{line: 285, col: 13, offset: 7478},
				run: (*parser).callonAddition1,
				expr: &seqExpr{
					pos: position{line: 285, col: 13, offset: 7478},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 285, col: 13, offset: 7478},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 18, offset: 7483},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 285, col: 23, offset: 7488},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 285, col: 25, offset: 7490},
							name: "PlusToken",
						},
						&ruleRefExpr{
							pos:  position{line: 285, col: 35, offset: 7500},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 285, col: 37, offset: 7502},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 285, col: 43, offset: 7508},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PlusToken",
			pos:  position{line: 296, col: 1, offset: 7710},
			expr: &litMatcher{
				pos:        position{line: 296, col: 14, offset: 7723},
				val:        "+",
				ignoreCase: false,
				want:       "\"+\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Subtraction",
			pos:  position{line: 298, col: 1, offset: 7728},
			expr: &actionExpr{
				pos: position{line: 298, col: 16, offset: 7743},
				run: (*parser).callonSubtraction1,
				expr: &seqExpr{
					pos: position{line: 298, col: 16, offset: 7743},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 298, col: 16, offset: 7743},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 21, offset: 7748},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 298, col: 26, offset: 7753},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 298, col: 28, offset: 7755},
							name: "MinusToken",
						},
						&ruleRefExpr{
							pos:  position{line: 298, col: 39, offset: 7766},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 298, col: 41, offset: 7768},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 298, col: 47, offset: 7774},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MinusToken",
			pos:  position{line: 309, col: 1, offset: 7979},
			expr: &litMatcher{
				pos:        position{line: 309, col: 15, offset: 7993},
				val:        "-",
				ignoreCase: false,
				want:       "\"-\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Multiplication",
			pos:  position{line: 311, col: 1, offset: 7998},
			expr: &actionExpr{
				pos: position{line: 311, col: 19, offset: 8016},
				run: (*parser).callonMultiplication1,
				expr: &seqExpr{
					pos: position{line: 311, col: 19, offset: 8016},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 311, col: 19, offset: 8016},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 311, col: 24, offset: 8021},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 311, col: 29, offset: 8026},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 311, col: 31, offset: 8028},
							name: "StarToken",
						},
						&ruleRefExpr{
							pos:  position{line: 311, col: 41, offset: 8038},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 311, col: 43, offset: 8040},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 311, col: 49, offset: 8046},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "StarToken",
			pos:  position{line: 322, col: 1, offset: 8254},
			expr: &litMatcher{
				pos:        position{line: 322, col: 14, offset: 8267},
				val:        "*",
				ignoreCase: false,
				want:       "\"*\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Division",
			pos:  position{line: 324, col: 1, offset: 8272},
			expr: &actionExpr{
				pos: position{line: 324, col: 13, offset: 8284},
				run: (*parser).callonDivision1,
				expr: &seqExpr{
					pos: position{line: 324, col: 13, offset: 8284},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 324, col: 13, offset: 8284},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 324, col: 18, offset: 8289},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 324, col: 23, offset: 8294},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 324, col: 25, offset: 8296},
							name: "SlashToken",
						},
						&ruleRefExpr{
							pos:  position{line: 324, col: 36, offset: 8307},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 324, col: 38, offset: 8309},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 324, col: 44, offset: 8315},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SlashToken",
			pos:  position{line: 335, col: 1, offset: 8517},
			expr: &litMatcher{
				pos:        position{line: 335, col: 15, offset: 8531},
				val:        "/",
				ignoreCase: false,
				want:       "\"/\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Modulo",
			pos:  position{line: 337, col: 1, offset: 8536},
			expr: &actionExpr{
				pos: position{line: 337, col: 11, offset: 8546},
				run: (*parser).callonModulo1,
				expr: &seqExpr{
					pos: position{line: 337, col: 11, offset: 8546},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 337, col: 11, offset: 8546},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 337, col: 16, offset: 8551},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 337, col: 21, offset: 8556},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 337, col: 23, offset: 8558},
							name: "PercentToken",
						},
						&ruleRefExpr{
							pos:  position{line: 337, col: 36, offset: 8571},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 337, col: 38, offset: 8573},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 337, col: 44, offset: 8579},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PercentToken",
			pos:  position{line: 348, col: 1, offset: 8779},
			expr: &seqExpr{
				pos: position{line: 348, col: 17, offset: 8795},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 348, col: 17, offset: 8795},
						val:        "%",
						ignoreCase: false,
						want:       "\"%\"",
					},
					&notExpr{
						pos: position{line: 348, col: 21, offset: 8799},
						expr: &choiceExpr{
							pos: position{line: 348, col: 23, offset: 8801},
							alternatives: []any{
								&ruleRefExpr{
									pos:  position{line: 348, col: 23, offset: 8801},
									name: "WordChar",
								},
								&litMatcher{
									pos:        position{line: 348, col: 34, offset: 8812},
									val:        "{",
									ignoreCase: false,
									want:       "\"{\"",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Equality",
			pos:  position{line: 350, col: 1, offset: 8818},
			expr: &actionExpr{
				pos: position{line: 350, col: 13, offset: 8830},
				run: (*parser).callonEquality1,
				expr: &seqExpr{
					pos: position{line: 350, col: 13, offset: 8830},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 350, col: 13, offset: 8830},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 18, offset: 8835},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 350, col: 23, offset: 8840},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 350, col: 25, offset: 8842},
							name: "EqualToken",
						},
						&ruleRefExpr{
							pos:  position{line: 350, col: 36, offset: 8853},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 350, col: 38, offset: 8855},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 350, col: 44, offset: 8861},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EqualToken",
			pos:  position{line: 361, col: 1, offset: 9063},
			expr: &litMatcher{
				pos:        position{line: 361, col: 15, offset: 9077},
				val:        "==",
				ignoreCase: false,
				want:       "\"==\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Inequality",
			pos:  position{line: 363, col: 1, offset: 9083},
			expr: &actionExpr{
				pos: position{line: 363, col: 15, offset: 9097},
				run: (*parser).callonInequality1,
				expr: &seqExpr{
					pos: position{line: 363, col: 15, offset: 9097},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 363, col: 15, offset: 9097},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 363, col: 20, offset: 9102},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 363, col: 25, offset: 9107},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 363, col: 27, offset: 9109},
							name: "NotEqualToken",
						},
						&ruleRefExpr{
							pos:  position{line: 363, col: 41, offset: 9123},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 363, col: 43, offset: 9125},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 363, col: 49, offset: 9131},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NotEqualToken",
			pos:  position{line: 374, col: 1, offset: 9335},
			expr: &litMatcher{
				pos:        position{line: 374, col: 18, offset: 9352},
				val:        "!=",
				ignoreCase: false,
				want:       "\"!=\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LessThanEqual",
			pos:  position{line: 376, col: 1, offset: 9358},
			expr: &actionExpr{
				pos: position{line: 376, col: 18, offset: 9375},
				run: (*parser).callonLessThanEqual1,
				expr: &seqExpr{
					pos: position{line: 376, col: 18, offset: 9375},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 376, col: 18, offset: 9375},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 376, col: 23, offset: 9380},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 376, col: 28, offset: 9385},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 376, col: 30, offset: 9387},
							name: "LessEqualToken",
						},
						&ruleRefExpr{
							pos:  position{line: 376, col: 45, offset: 9402},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 376, col: 47, offset: 9404},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 376, col: 53, offset: 9410},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LessEqualToken",
			pos:  position{line: 387, col: 1, offset: 9617},
			expr: &litMatcher{
				pos:        position{line: 387, col: 19, offset: 9635},
				val:        "<=",
				ignoreCase: false,
				want:       "\"<=\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LessThan",
			pos:  position{line: 389, col: 1, offset: 9641},
			expr: &actionExpr{
				pos: position{line: 389, col: 13, offset: 9653},
				run: (*parser).callonLessThan1,
				expr: &seqExpr{
					pos: position{line: 389, col: 13, offset: 9653},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 389, col: 13, offset: 9653},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 18, offset: 9658},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 389, col: 23, offset: 9663},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 389, col: 25, offset: 9665},
							name: "LessToken",
						},
						&ruleRefExpr{
							pos:  position{line: 389, col: 35, offset: 9675},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 389, col: 37, offset: 9677},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 389, col: 43, offset: 9683},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LessToken",
			pos:  position{line: 400, col: 1, offset: 9885},
			expr: &litMatcher{
				pos:        position{line: 400, col: 14, offset: 9898},
				val:        "<",
				ignoreCase: false,
				want:       "\"<\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GreaterThanEqual",
			pos:  position{line: 402, col: 1, offset: 9903},
			expr: &actionExpr{
				pos: position{line: 402, col: 21, offset: 9923},
				run: (*parser).callonGreaterThanEqual1,
				expr: &seqExpr{
					pos: position{line: 402, col: 21, offset: 9923},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 402, col: 21, offset: 9923},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 26, offset: 9928},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 402, col: 31, offset: 9933},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 402, col: 33, offset: 9935},
							name: "GreaterEqualToken",
						},
						&ruleRefExpr{
							pos:  position{line: 402, col: 51, offset: 9953},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 402, col: 53, offset: 9955},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 402, col: 59, offset: 9961},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GreaterEqualToken",
			pos:  position{line: 413, col: 1, offset: 10171},
			expr: &litMatcher{
				pos:        position{line: 413, col: 22, offset: 10192},
				val:        ">=",
				ignoreCase: false,
				want:       "\">=\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GreaterThan",
			pos:  position{line: 415, col: 1, offset: 10198},
			expr: &actionExpr{
				pos: position{line: 415, col: 16, offset: 10213},
				run: (*parser).callonGreaterThan1,
				expr: &seqExpr{
					pos: position{line: 415, col: 16, offset: 10213},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 415, col: 16, offset: 10213},
							label: "left",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 21, offset: 10218},
								name: "Term",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 415, col: 26, offset: 10223},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 415, col: 28, offset: 10225},
							name: "GreaterToken",
						},
						&ruleRefExpr{
							pos:  position{line: 415, col: 41, offset: 10238},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 415, col: 43, offset: 10240},
							label: "right",
							expr: &ruleRefExpr{
								pos:  position{line: 415, col: 49, offset: 10246},
								name: "Term",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "GreaterToken",
			pos:  position{line: 426, col: 1, offset: 10451},
			expr: &litMatcher{
				pos:        position{line: 426, col: 17, offset: 10467},
				val:        ">",
				ignoreCase: false,
				want:       "\">\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DotToken",
			pos:  position{line: 428, col: 1, offset: 10472},
			expr: &litMatcher{
				pos:        position{line: 428, col: 13, offset: 10484},
				val:        ".",
				ignoreCase: false,
				want:       "\".\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "List",
			pos:  position{line: 430, col: 1, offset: 10489},
			expr: &actionExpr{
				pos: position{line: 430, col: 9, offset: 10497},
				run: (*parser).callonList1,
				expr: &seqExpr{
					pos: position{line: 430, col: 9, offset: 10497},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 430, col: 9, offset: 10497},
							val:        "[",
							ignoreCase: false,
							want:       "\"[\"",
						},
						&ruleRefExpr{
							pos:  position{line: 430, col: 13, offset: 10501},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 430, col: 15, offset: 10503},
							label: "eles",
							expr: &zeroOrMoreExpr{
								pos: position{line: 430, col: 20, offset: 10508},
								expr: &actionExpr{
									pos: position{line: 430, col: 21, offset: 10509},
									run: (*parser).callonList7,
									expr: &seqExpr{
										pos: position{line: 430, col: 21, offset: 10509},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 430, col: 21, offset: 10509},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 430, col: 23, offset: 10511},
													name: "Form",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 430, col: 28, offset: 10516},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 430, col: 52, offset: 10540},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 430, col: 57, offset: 10545},
								expr: &ruleRefExpr{
									pos:  position{line: 430, col: 57, offset: 10545},
									name: "Form",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 430, col: 63, offset: 10551},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 430, col: 65, offset: 10553},
							val:        "]",
							ignoreCase: false,
							want:       "\"]\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Object",
			pos:  position{line: 441, col: 1, offset: 10750},
			expr: &actionExpr{
				pos: position{line: 441, col: 11, offset: 10760},
				run: (*parser).callonObject1,
				expr: &seqExpr{
					pos: position{line: 441, col: 11, offset: 10760},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 441, col: 11, offset: 10760},
							val:        "{{",
							ignoreCase: false,
							want:       "\"{{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 441, col: 16, offset: 10765},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 441, col: 18, offset: 10767},
							label: "vals",
							expr: &zeroOrMoreExpr{
								pos: position{line: 441, col: 23, offset: 10772},
								expr: &actionExpr{
									pos: position{line: 441, col: 24, offset: 10773},
									run: (*parser).callonObject7,
									expr: &seqExpr{
										pos: position{line: 441, col: 24, offset: 10773},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 441, col: 24, offset: 10773},
												label: "v",
												expr: &ruleRefExpr{
													pos:  position{line: 441, col: 26, offset: 10775},
													name: "KeyValue",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 441, col: 35, offset: 10784},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 441, col: 59, offset: 10808},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 441, col: 64, offset: 10813},
								expr: &ruleRefExpr{
									pos:  position{line: 441, col: 64, offset: 10813},
									name: "KeyValue",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 441, col: 74, offset: 10823},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 441, col: 76, offset: 10825},
							val:        "}}",
							ignoreCase: false,
							want:       "\"}}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Block",
			pos:  position{line: 460, col: 1, offset: 11213},
			expr: &actionExpr{
				pos: position{line: 460, col: 10, offset: 11222},
				run: (*parser).callonBlock1,
				expr: &seqExpr{
					pos: position{line: 460, col: 10, offset: 11222},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 460, col: 10, offset: 11222},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 460, col: 14, offset: 11226},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 460, col: 16, offset: 11228},
							label: "eles",
							expr: &zeroOrMoreExpr{
								pos: position{line: 460, col: 21, offset: 11233},
								expr: &actionExpr{
									pos: position{line: 460, col: 22, offset: 11234},
									run: (*parser).callonBlock7,
									expr: &seqExpr{
										pos: position{line: 460, col: 22, offset: 11234},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 460, col: 22, offset: 11234},
												label: "e",
												expr: &ruleRefExpr{
													pos:  position{line: 460, col: 24, offset: 11236},
													name: "Expr",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 460, col: 29, offset: 11241},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 460, col: 53, offset: 11265},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 460, col: 58, offset: 11270},
								expr: &ruleRefExpr{
									pos:  position{line: 460, col: 58, offset: 11270},
									name: "Expr",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 460, col: 64, offset: 11276},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 460, col: 66, offset: 11278},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Literal",
			pos:  position{line: 473, col: 1, offset: 11486},
			expr: &choiceExpr{
				pos: position{line: 473, col: 12, offset: 11497},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 473, col: 12, offset: 11497},
						name: "Int",
					},
					&ruleRefExpr{
						pos:  position{line: 473, col: 18, offset: 11503},
						name: "Boolean",
					},
					&ruleRefExpr{
						pos:  position{line: 473, col: 28, offset: 11513},
						name: "String",
					},
					&ruleRefExpr{
						pos:  position{line: 473, col: 37, offset: 11522},
						name: "Quoted",
					},
					&ruleRefExpr{
						pos:  position{line: 473, col: 46, offset: 11531},
						name: "Null",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Int",
			pos:  position{line: 475, col: 1, offset: 11537},
			expr: &actionExpr{
				pos: position{line: 475, col: 8, offset: 11544},
				run: (*parser).callonInt1,
				expr: &choiceExpr{
					pos: position{line: 475, col: 9, offset: 11545},
					alternatives: []any{
						&litMatcher{
							pos:        position{line: 475, col: 9, offset: 11545},
							val:        "0",
							ignoreCase: false,
							want:       "\"0\"",
						},
						&seqExpr{
							pos: position{line: 475, col: 15, offset: 11551},
							exprs: []any{
								&ruleRefExpr{
									pos:  position{line: 475, col: 15, offset: 11551},
									name: "NonZeroDecimalDigit",
								},
								&zeroOrMoreExpr{
									pos: position{line: 475, col: 35, offset: 11571},
									expr: &ruleRefExpr{
										pos:  position{line: 475, col: 35, offset: 11571},
										name: "DecimalDigit",
									},
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Exponent",
			pos:  position{line: 490, col: 1, offset: 11848},
			expr: &seqExpr{
				pos: position{line: 490, col: 13, offset: 11860},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 490, col: 13, offset: 11860},
						val:        "e",
						ignoreCase: true,
						want:       "\"e\"i",
					},
					&zeroOrOneExpr{
						pos: position{line: 490, col: 18, offset: 11865},
						expr: &charClassMatcher{
							pos:        position{line: 490, col: 18, offset: 11865},
							val:        "[+-]",
							chars:      []rune{'+', '-'},
							ignoreCase: false,
							inverted:   false,
						},
					},
					&oneOrMoreExpr{
						pos: position{line: 490, col: 24, offset: 11871},
						expr: &ruleRefExpr{
							pos:  position{line: 490, col: 24, offset: 11871},
							name: "DecimalDigit",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "String",
			pos:  position{line: 492, col: 1, offset: 11886},
			expr: &actionExpr{
				pos: position{line: 492, col: 11, offset: 11896},
				run: (*parser).callonString1,
				expr: &seqExpr{
					pos: position{line: 492, col: 11, offset: 11896},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 492, col: 11, offset: 11896},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 492, col: 15, offset: 11900},
							expr: &choiceExpr{
								pos: position{line: 492, col: 17, offset: 11902},
								alternatives: []any{
									&seqExpr{
										pos: position{line: 492, col: 17, offset: 11902},
										exprs: []any{
											&notExpr{
												pos: position{line: 492, col: 17, offset: 11902},
												expr: &ruleRefExpr{
													pos:  position{line: 492, col: 18, offset: 11903},
													name: "EscapedChar",
												},
											},
											&anyMatcher{
												line: 492, col: 30, offset: 11915,
											},
										},
									},
									&seqExpr{
										pos: position{line: 492, col: 34, offset: 11919},
										exprs: []any{
											&litMatcher{
												pos:        position{line: 492, col: 34, offset: 11919},
												val:        "\\",
												ignoreCase: false,
												want:       "\"\\\\\"",
											},
											&ruleRefExpr{
												pos:  position{line: 492, col: 39, offset: 11924},
												name: "EscapeSequence",
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 492, col: 57, offset: 11942},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EscapedChar",
			pos:  position{line: 508, col: 1, offset: 12266},
			expr: &charClassMatcher{
				pos:        position{line: 508, col: 16, offset: 12281},
				val:        "[\\x00-\\x1f\"\\\\]",
				chars:      []rune{'"', '\\'},
				ranges:     []rune{'\x00', '\x1f'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "EscapeSequence",
			pos:  position{line: 510, col: 1, offset: 12297},
			expr: &choiceExpr{
				pos: position{line: 510, col: 19, offset: 12315},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 510, col: 19, offset: 12315},
						name: "SingleCharEscape",
					},
					&ruleRefExpr{
						pos:  position{line: 510, col: 38, offset: 12334},
						name: "UnicodeEscape",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "SingleCharEscape",
			pos:  position{line: 512, col: 1, offset: 12349},
			expr: &charClassMatcher{
				pos:        position{line: 512, col: 21, offset: 12369},
				val:        "[\"\\\\/bfnrt]",
				chars:      []rune{'"', '\\', '/', 'b', 'f', 'n', 'r', 't'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "UnicodeEscape",
			pos:  position{line: 514, col: 1, offset: 12382},
			expr: &seqExpr{
				pos: position{line: 514, col: 18, offset: 12399},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 514, col: 18, offset: 12399},
						val:        "u",
						ignoreCase: false,
						want:       "\"u\"",
					},
					&ruleRefExpr{
						pos:  position{line: 514, col: 22, offset: 12403},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 514, col: 31, offset: 12412},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 514, col: 40, offset: 12421},
						name: "HexDigit",
					},
					&ruleRefExpr{
						pos:  position{line: 514, col: 49, offset: 12430},
						name: "HexDigit",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "DecimalDigit",
			pos:  position{line: 516, col: 1, offset: 12440},
			expr: &charClassMatcher{
				pos:        position{line: 516, col: 17, offset: 12456},
				val:        "[0-9]",
				ranges:     []rune{'0', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NonZeroDecimalDigit",
			pos:  position{line: 518, col: 1, offset: 12463},
			expr: &charClassMatcher{
				pos:        position{line: 518, col: 24, offset: 12486},
				val:        "[1-9]",
				ranges:     []rune{'1', '9'},
				ignoreCase: false,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "HexDigit",
			pos:  position{line: 520, col: 1, offset: 12493},
			expr: &charClassMatcher{
				pos:        position{line: 520, col: 13, offset: 12505},
				val:        "[0-9a-f]i",
				ranges:     []rune{'0', '9', 'a', 'f'},
				ignoreCase: true,
				inverted:   false,
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Quoted",
			pos:  position{line: 522, col: 1, offset: 12516},
			expr: &actionExpr{
				pos: position{line: 522, col: 11, offset: 12526},
				run: (*parser).callonQuoted1,
				expr: &seqExpr{
					pos: position{line: 522, col: 11, offset: 12526},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 522, col: 11, offset: 12526},
							val:        "%",
							ignoreCase: false,
							want:       "\"%\"",
						},
						&labeledExpr{
							pos:   position{line: 522, col: 15, offset: 12530},
							label: "quoter",
							expr: &ruleRefExpr{
								pos:  position{line: 522, col: 22, offset: 12537},
								name: "WordToken",
							},
						},
						&litMatcher{
							pos:        position{line: 522, col: 32, offset: 12547},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&labeledExpr{
							pos:   position{line: 522, col: 36, offset: 12551},
							label: "raw",
							expr: &ruleRefExpr{
								pos:  position{line: 522, col: 40, offset: 12555},
								name: "QuotedRawToken",
							},
						},
						&litMatcher{
							pos:        position{line: 522, col: 55, offset: 12570},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "QuotedRawToken",
			pos:  position{line: 528, col: 1, offset: 12643},
			expr: &actionExpr{
				pos: position{line: 528, col: 19, offset: 12661},
				run: (*parser).callonQuotedRawToken1,
				expr: &zeroOrMoreExpr{
					pos: position{line: 528, col: 19, offset: 12661},
					expr: &charClassMatcher{
						pos:        position{line: 528, col: 19, offset: 12661},
						val:        "[^}]",
						chars:      []rune{'}'},
						ignoreCase: false,
						inverted:   true,
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Boolean",
			pos:  position{line: 532, col: 1, offset: 12701},
			expr: &choiceExpr{
				pos: position{line: 532, col: 12, offset: 12712},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 532, col: 12, offset: 12712},
						run: (*parser).callonBoolean2,
						expr: &ruleRefExpr{
							pos:  position{line: 532, col: 12, offset: 12712},
							name: "TrueToken",
						},
					},
					&actionExpr{
						pos: position{line: 541, col: 5, offset: 12889},
						run: (*parser).callonBoolean4,
						expr: &ruleRefExpr{
							pos:  position{line: 541, col: 5, offset: 12889},
							name: "FalseToken",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "TrueToken",
			pos:  position{line: 551, col: 1, offset: 13066},
			expr: &seqExpr{
				pos: position{line: 551, col: 14, offset: 13079},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 551, col: 14, offset: 13079},
						val:        "true",
						ignoreCase: false,
						want:       "\"true\"",
					},
					&notExpr{
						pos: position{line: 551, col: 21, offset: 13086},
						expr: &ruleRefExpr{
							pos:  position{line: 551, col: 22, offset: 13087},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "FalseToken",
			pos:  position{line: 552, col: 1, offset: 13096},
			expr: &seqExpr{
				pos: position{line: 552, col: 15, offset: 13110},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 552, col: 15, offset: 13110},
						val:        "false",
						ignoreCase: false,
						want:       "\"false\"",
					},
					&notExpr{
						pos: position{line: 552, col: 23, offset: 13118},
						expr: &ruleRefExpr{
							pos:  position{line: 552, col: 24, offset: 13119},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Null",
			pos:  position{line: 554, col: 1, offset: 13129},
			expr: &actionExpr{
				pos: position{line: 554, col: 9, offset: 13137},
				run: (*parser).callonNull1,
				expr: &ruleRefExpr{
					pos:  position{line: 554, col: 9, offset: 13137},
					name: "NullToken",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "NullToken",
			pos:  position{line: 563, col: 1, offset: 13292},
			expr: &seqExpr{
				pos: position{line: 563, col: 14, offset: 13305},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 563, col: 14, offset: 13305},
						val:        "null",
						ignoreCase: false,
						want:       "\"null\"",
					},
					&notExpr{
						pos: position{line: 563, col: 21, offset: 13312},
						expr: &ruleRefExpr{
							pos:  position{line: 563, col: 22, offset: 13313},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "CommentToken",
			pos:  position{line: 565, col: 1, offset: 13323},
			expr: &seqExpr{
				pos: position{line: 565, col: 17, offset: 13339},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 565, col: 17, offset: 13339},
						val:        "#",
						ignoreCase: false,
						want:       "\"#\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 565, col: 21, offset: 13343},
						expr: &charClassMatcher{
							pos:        position{line: 565, col: 21, offset: 13343},
							val:        "[^\\n]",
							chars:      []rune{'\n'},
							ignoreCase: false,
							inverted:   true,
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Conditional",
			pos:  position{line: 569, col: 1, offset: 13386},
			expr: &actionExpr{
				pos: position{line: 569, col: 16, offset: 13401},
				run: (*parser).callonConditional1,
				expr: &seqExpr{
					pos: position{line: 569, col: 16, offset: 13401},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 569, col: 16, offset: 13401},
							name: "IfToken",
						},
						&ruleRefExpr{
							pos:  position{line: 569, col: 24, offset: 13409},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 569, col: 26, offset: 13411},
							label: "cond",
							expr: &ruleRefExpr{
								pos:  position{line: 569, col: 31, offset: 13416},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 569, col: 36, offset: 13421},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 569, col: 38, offset: 13423},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 569, col: 44, offset: 13429},
								name: "Block",
							},
						},
						&labeledExpr{
							pos:   position{line: 569, col: 50, offset: 13435},
							label: "else_",
							expr: &zeroOrOneExpr{
								pos: position{line: 569, col: 56, offset: 13441},
								expr: &ruleRefExpr{
									pos:  position{line: 569, col: 56, offset: 13441},
									name: "ElseClause",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ElseClause",
			pos:  position{line: 577, col: 1, offset: 13559},
			expr: &actionExpr{
				pos: position{line: 577, col: 15, offset: 13573},
				run: (*parser).callonElseClause1,
				expr: &seqExpr{
					pos: position{line: 577, col: 15, offset: 13573},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 577, col: 15, offset: 13573},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 577, col: 17, offset: 13575},
							name: "ElseToken",
						},
						&ruleRefExpr{
							pos:  position{line: 577, col: 27, offset: 13585},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 577, col: 29, offset: 13587},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 577, col: 35, offset: 13593},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "IfToken",
			pos:  position{line: 581, col: 1, offset: 13632},
			expr: &seqExpr{
				pos: position{line: 581, col: 12, offset: 13643},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 581, col: 12, offset: 13643},
						val:        "if",
						ignoreCase: false,
						want:       "\"if\"",
					},
					&notExpr{
						pos: position{line: 581, col: 17, offset: 13648},
						expr: &ruleRefExpr{
							pos:  position{line: 581, col: 18, offset: 13649},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ElseToken",
			pos:  position{line: 582, col: 1, offset: 13658},
			expr: &seqExpr{
				pos: position{line: 582, col: 14, offset: 13671},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 582, col: 14, offset: 13671},
						val:        "else",
						ignoreCase: false,
						want:       "\"else\"",
					},
					&notExpr{
						pos: position{line: 582, col: 21, offset: 13678},
						expr: &ruleRefExpr{
							pos:  position{line: 582, col: 22, offset: 13679},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Let",
			pos:  position{line: 584, col: 1, offset: 13689},
			expr: &actionExpr{
				pos: position{line: 584, col: 8, offset: 13696},
				run: (*parser).callonLet1,
				expr: &seqExpr{
					pos: position{line: 584, col: 8, offset: 13696},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 584, col: 8, offset: 13696},
							name: "LetToken",
						},
						&ruleRefExpr{
							pos:  position{line: 584, col: 17, offset: 13705},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 584, col: 19, offset: 13707},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 24, offset: 13712},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 584, col: 27, offset: 13715},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 584, col: 29, offset: 13717},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 584, col: 33, offset: 13721},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 584, col: 35, offset: 13723},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 41, offset: 13729},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 584, col: 46, offset: 13734},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 584, col: 48, offset: 13736},
							name: "InToken",
						},
						&ruleRefExpr{
							pos:  position{line: 584, col: 56, offset: 13744},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 584, col: 58, offset: 13746},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 584, col: 63, offset: 13751},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LetToken",
			pos:  position{line: 592, col: 1, offset: 13857},
			expr: &seqExpr{
				pos: position{line: 592, col: 13, offset: 13869},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 592, col: 13, offset: 13869},
						val:        "let",
						ignoreCase: false,
						want:       "\"let\"",
					},
					&notExpr{
						pos: position{line: 592, col: 19, offset: 13875},
						expr: &ruleRefExpr{
							pos:  position{line: 592, col: 20, offset: 13876},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "InToken",
			pos:  position{line: 593, col: 1, offset: 13885},
			expr: &seqExpr{
				pos: position{line: 593, col: 12, offset: 13896},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 593, col: 12, offset: 13896},
						val:        "in",
						ignoreCase: false,
						want:       "\"in\"",
					},
					&notExpr{
						pos: position{line: 593, col: 17, offset: 13901},
						expr: &ruleRefExpr{
							pos:  position{line: 593, col: 18, offset: 13902},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Lambda",
			pos:  position{line: 595, col: 1, offset: 13912},
			expr: &actionExpr{
				pos: position{line: 595, col: 11, offset: 13922},
				run: (*parser).callonLambda1,
				expr: &seqExpr{
					pos: position{line: 595, col: 11, offset: 13922},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 595, col: 11, offset: 13922},
							name: "LambdaToken",
						},
						&labeledExpr{
							pos:   position{line: 595, col: 23, offset: 13934},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 28, offset: 13939},
								name: "LambdaArgs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 595, col: 39, offset: 13950},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 595, col: 41, offset: 13952},
							name: "ArrowToken",
						},
						&ruleRefExpr{
							pos:  position{line: 595, col: 52, offset: 13963},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 595, col: 54, offset: 13965},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 595, col: 59, offset: 13970},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LambdaToken",
			pos:  position{line: 601, col: 1, offset: 14057},
			expr: &litMatcher{
				pos:        position{line: 601, col: 16, offset: 14072},
				val:        "\\",
				ignoreCase: false,
				want:       "\"\\\\\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArrowToken",
			pos:  position{line: 602, col: 1, offset: 14077},
			expr: &litMatcher{
				pos:        position{line: 602, col: 15, offset: 14091},
				val:        "->",
				ignoreCase: false,
				want:       "\"->\"",
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LambdaArgs",
			pos:  position{line: 604, col: 1, offset: 14097},
			expr: &choiceExpr{
				pos: position{line: 604, col: 15, offset: 14111},
				alternatives: []any{
					&actionExpr{
						pos: position{line: 604, col: 15, offset: 14111},
						run: (*parser).callonLambdaArgs2,
						expr: &seqExpr{
							pos: position{line: 604, col: 15, offset: 14111},
							exprs: []any{
								&litMatcher{
									pos:        position{line: 604, col: 15, offset: 14111},
									val:        "(",
									ignoreCase: false,
									want:       "\"(\"",
								},
								&ruleRefExpr{
									pos:  position{line: 604, col: 19, offset: 14115},
									name: "_",
								},
								&labeledExpr{
									pos:   position{line: 604, col: 21, offset: 14117},
									label: "args",
									expr: &zeroOrMoreExpr{
										pos: position{line: 604, col: 26, offset: 14122},
										expr: &actionExpr{
											pos: position{line: 604, col: 27, offset: 14123},
											run: (*parser).callonLambdaArgs8,
											expr: &seqExpr{
												pos: position{line: 604, col: 27, offset: 14123},
												exprs: []any{
													&labeledExpr{
														pos:   position{line: 604, col: 27, offset: 14123},
														label: "a",
														expr: &ruleRefExpr{
															pos:  position{line: 604, col: 29, offset: 14125},
															name: "LambdaArg",
														},
													},
													&ruleRefExpr{
														pos:  position{line: 604, col: 39, offset: 14135},
														name: "Sep",
													},
												},
											},
										},
									},
								},
								&labeledExpr{
									pos:   position{line: 604, col: 63, offset: 14159},
									label: "last",
									expr: &zeroOrOneExpr{
										pos: position{line: 604, col: 68, offset: 14164},
										expr: &ruleRefExpr{
											pos:  position{line: 604, col: 68, offset: 14164},
											name: "LambdaArg",
										},
									},
								},
								&ruleRefExpr{
									pos:  position{line: 604, col: 79, offset: 14175},
									name: "_",
								},
								&litMatcher{
									pos:        position{line: 604, col: 81, offset: 14177},
									val:        ")",
									ignoreCase: false,
									want:       "\")\"",
								},
							},
						},
					},
					&actionExpr{
						pos: position{line: 606, col: 5, offset: 14237},
						run: (*parser).callonLambdaArgs18,
						expr: &labeledExpr{
							pos:   position{line: 606, col: 5, offset: 14237},
							label: "arg",
							expr: &ruleRefExpr{
								pos:  position{line: 606, col: 9, offset: 14241},
								name: "LambdaArg",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LambdaArg",
			pos:  position{line: 610, col: 1, offset: 14297},
			expr: &choiceExpr{
				pos: position{line: 610, col: 14, offset: 14310},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 610, col: 14, offset: 14310},
						name: "ArgWithDefault",
					},
					&ruleRefExpr{
						pos:  position{line: 610, col: 31, offset: 14327},
						name: "ArgWithBlockDefault",
					},
					&ruleRefExpr{
						pos:  position{line: 610, col: 53, offset: 14349},
						name: "ArgWithType",
					},
					&ruleRefExpr{
						pos:  position{line: 610, col: 67, offset: 14363},
						name: "ArgWithoutType",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ArgWithoutType",
			pos:  position{line: 612, col: 1, offset: 14379},
			expr: &actionExpr{
				pos: position{line: 612, col: 19, offset: 14397},
				run: (*parser).callonArgWithoutType1,
				expr: &labeledExpr{
					pos:   position{line: 612, col: 19, offset: 14397},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 612, col: 24, offset: 14402},
						name: "Id",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Match",
			pos:  position{line: 618, col: 1, offset: 14464},
			expr: &actionExpr{
				pos: position{line: 618, col: 10, offset: 14473},
				run: (*parser).callonMatch1,
				expr: &seqExpr{
					pos: position{line: 618, col: 10, offset: 14473},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 618, col: 10, offset: 14473},
							name: "MatchToken",
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 21, offset: 14484},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 618, col: 23, offset: 14486},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 618, col: 28, offset: 14491},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 33, offset: 14496},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 35, offset: 14498},
							name: "WithToken",
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 45, offset: 14508},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 618, col: 47, offset: 14510},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 51, offset: 14514},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 618, col: 53, offset: 14516},
							label: "cs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 618, col: 56, offset: 14519},
								expr: &actionExpr{
									pos: position{line: 618, col: 57, offset: 14520},
									run: (*parser).callonMatch14,
									expr: &seqExpr{
										pos: position{line: 618, col: 57, offset: 14520},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 618, col: 57, offset: 14520},
												label: "m",
												expr: &ruleRefExpr{
													pos:  position{line: 618, col: 59, offset: 14522},
													name: "MatchCase",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 618, col: 69, offset: 14532},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 618, col: 93, offset: 14556},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 618, col: 98, offset: 14561},
								expr: &ruleRefExpr{
									pos:  position{line: 618, col: 98, offset: 14561},
									name: "MatchCase",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 618, col: 109, offset: 14572},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 618, col: 111, offset: 14574},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MatchCase",
			pos:  position{line: 625, col: 1, offset: 14678},
			expr: &actionExpr{
				pos: position{line: 625, col: 14, offset: 14691},
				run: (*parser).callonMatchCase1,
				expr: &seqExpr{
					pos: position{line: 625, col: 14, offset: 14691},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 625, col: 14, offset: 14691},
							label: "pattern",
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 22, offset: 14699},
								name: "Pattern",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 625, col: 30, offset: 14707},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 625, col: 32, offset: 14709},
							val:        "->",
							ignoreCase: false,
							want:       "\"->\"",
						},
						&ruleRefExpr{
							pos:  position{line: 625, col: 37, offset: 14714},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 625, col: 39, offset: 14716},
							label: "expr",
							expr: &ruleRefExpr{
								pos:  position{line: 625, col: 44, offset: 14721},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Pattern",
			pos:  position{line: 632, col: 1, offset: 14815},
			expr: &choiceExpr{
				pos: position{line: 632, col: 12, offset: 14826},
				alternatives: []any{
					&ruleRefExpr{
						pos:  position{line: 632, col: 12, offset: 14826},
						name: "WildcardPattern",
					},
					&ruleRefExpr{
						pos:  position{line: 632, col: 30, offset: 14844},
						name: "LiteralPattern",
					},
					&ruleRefExpr{
						pos:  position{line: 632, col: 47, offset: 14861},
						name: "ConstructorPattern",
					},
					&ruleRefExpr{
						pos:  position{line: 632, col: 68, offset: 14882},
						name: "VariablePattern",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WildcardPattern",
			pos:  position{line: 634, col: 1, offset: 14899},
			expr: &actionExpr{
				pos: position{line: 634, col: 20, offset: 14918},
				run: (*parser).callonWildcardPattern1,
				expr: &litMatcher{
					pos:        position{line: 634, col: 20, offset: 14918},
					val:        "_",
					ignoreCase: false,
					want:       "\"_\"",
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "LiteralPattern",
			pos:  position{line: 638, col: 1, offset: 14959},
			expr: &actionExpr{
				pos: position{line: 638, col: 19, offset: 14977},
				run: (*parser).callonLiteralPattern1,
				expr: &labeledExpr{
					pos:   position{line: 638, col: 19, offset: 14977},
					label: "lit",
					expr: &ruleRefExpr{
						pos:  position{line: 638, col: 23, offset: 14981},
						name: "Literal",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "ConstructorPattern",
			pos:  position{line: 642, col: 1, offset: 15042},
			expr: &actionExpr{
				pos: position{line: 642, col: 23, offset: 15064},
				run: (*parser).callonConstructorPattern1,
				expr: &seqExpr{
					pos: position{line: 642, col: 23, offset: 15064},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 642, col: 23, offset: 15064},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 642, col: 28, offset: 15069},
								name: "UpperId",
							},
						},
						&labeledExpr{
							pos:   position{line: 642, col: 36, offset: 15077},
							label: "args",
							expr: &zeroOrOneExpr{
								pos: position{line: 642, col: 41, offset: 15082},
								expr: &ruleRefExpr{
									pos:  position{line: 642, col: 41, offset: 15082},
									name: "PatternArgs",
								},
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "PatternArgs",
			pos:  position{line: 653, col: 1, offset: 15263},
			expr: &actionExpr{
				pos: position{line: 653, col: 16, offset: 15278},
				run: (*parser).callonPatternArgs1,
				expr: &seqExpr{
					pos: position{line: 653, col: 16, offset: 15278},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 653, col: 16, offset: 15278},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 653, col: 20, offset: 15282},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 653, col: 22, offset: 15284},
							label: "patterns",
							expr: &zeroOrMoreExpr{
								pos: position{line: 653, col: 31, offset: 15293},
								expr: &actionExpr{
									pos: position{line: 653, col: 32, offset: 15294},
									run: (*parser).callonPatternArgs7,
									expr: &seqExpr{
										pos: position{line: 653, col: 32, offset: 15294},
										exprs: []any{
											&labeledExpr{
												pos:   position{line: 653, col: 32, offset: 15294},
												label: "p",
												expr: &ruleRefExpr{
													pos:  position{line: 653, col: 34, offset: 15296},
													name: "Pattern",
												},
											},
											&ruleRefExpr{
												pos:  position{line: 653, col: 42, offset: 15304},
												name: "Sep",
											},
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 653, col: 66, offset: 15328},
							label: "last",
							expr: &zeroOrOneExpr{
								pos: position{line: 653, col: 71, offset: 15333},
								expr: &ruleRefExpr{
									pos:  position{line: 653, col: 71, offset: 15333},
									name: "Pattern",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 653, col: 80, offset: 15342},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 653, col: 82, offset: 15344},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "VariablePattern",
			pos:  position{line: 657, col: 1, offset: 15406},
			expr: &actionExpr{
				pos: position{line: 657, col: 20, offset: 15425},
				run: (*parser).callonVariablePattern1,
				expr: &labeledExpr{
					pos:   position{line: 657, col: 20, offset: 15425},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 657, col: 25, offset: 15430},
						name: "Id",
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MatchToken",
			pos:  position{line: 661, col: 1, offset: 15489},
			expr: &seqExpr{
				pos: position{line: 661, col: 15, offset: 15503},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 661, col: 15, offset: 15503},
						val:        "match",
						ignoreCase: false,
						want:       "\"match\"",
					},
					&notExpr{
						pos: position{line: 661, col: 23, offset: 15511},
						expr: &ruleRefExpr{
							pos:  position{line: 661, col: 24, offset: 15512},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "WithToken",
			pos:  position{line: 662, col: 1, offset: 15521},
			expr: &seqExpr{
				pos: position{line: 662, col: 14, offset: 15534},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 662, col: 14, offset: 15534},
						val:        "with",
						ignoreCase: false,
						want:       "\"with\"",
					},
					&notExpr{
						pos: position{line: 662, col: 21, offset: 15541},
						expr: &ruleRefExpr{
							pos:  position{line: 662, col: 22, offset: 15542},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Assert",
			pos:  position{line: 664, col: 1, offset: 15552},
			expr: &actionExpr{
				pos: position{line: 664, col: 11, offset: 15562},
				run: (*parser).callonAssert1,
				expr: &seqExpr{
					pos: position{line: 664, col: 11, offset: 15562},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 664, col: 11, offset: 15562},
							name: "AssertToken",
						},
						&labeledExpr{
							pos:   position{line: 664, col: 23, offset: 15574},
							label: "message",
							expr: &zeroOrOneExpr{
								pos: position{line: 664, col: 31, offset: 15582},
								expr: &ruleRefExpr{
									pos:  position{line: 664, col: 31, offset: 15582},
									name: "MessageArgs",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 664, col: 44, offset: 15595},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 664, col: 46, offset: 15597},
							label: "block",
							expr: &ruleRefExpr{
								pos:  position{line: 664, col: 52, offset: 15603},
								name: "Block",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "MessageArgs",
			pos:  position{line: 680, col: 1, offset: 15867},
			expr: &actionExpr{
				pos: position{line: 680, col: 16, offset: 15882},
				run: (*parser).callonMessageArgs1,
				expr: &seqExpr{
					pos: position{line: 680, col: 16, offset: 15882},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 680, col: 16, offset: 15882},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 680, col: 20, offset: 15886},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 680, col: 22, offset: 15888},
							label: "msg",
							expr: &ruleRefExpr{
								pos:  position{line: 680, col: 26, offset: 15892},
								name: "Form",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 680, col: 31, offset: 15897},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 680, col: 33, offset: 15899},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "AssertToken",
			pos:  position{line: 684, col: 1, offset: 15926},
			expr: &seqExpr{
				pos: position{line: 684, col: 16, offset: 15941},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 684, col: 16, offset: 15941},
						val:        "assert",
						ignoreCase: false,
						want:       "\"assert\"",
					},
					&notExpr{
						pos: position{line: 684, col: 25, offset: 15950},
						expr: &ruleRefExpr{
							pos:  position{line: 684, col: 26, offset: 15951},
							name: "WordChar",
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
		{
			name: "Reassignment",
			pos:  position{line: 686, col: 1, offset: 15961},
			expr: &actionExpr{
				pos: position{line: 686, col: 17, offset: 15977},
				run: (*parser).callonReassignment1,
				expr: &seqExpr{
					pos: position{line: 686, col: 17, offset: 15977},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 686, col: 17, offset: 15977},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 686, col: 22, offset: 15982},
								name: "Id",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 686, col: 25, offset: 15985},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 686, col: 27, offset: 15987},
							val:        "=",
							ignoreCase: false,
							want:       "\"=\"",
						},
						&ruleRefExpr{
							pos:  position{line: 686, col: 31, offset: 15991},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 686, col: 33, offset: 15993},
							label: "value",
							expr: &ruleRefExpr{
								pos:  position{line: 686, col: 39, offset: 15999},
								name: "Form",
							},
						},
					},
				},
			},
			leader:        false,
			leftRecursive: false,
		},
	},
}

func (c *current) onDash6(e any) (any, error) {
	return e, nil
}

func (p *parser) callonDash6() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDash6(stack["e"])
}

func (c *current) onDash1(eles, last any) (any, error) {
	return Block{
		Forms: sliceOfAppend[Node](eles, last),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonDash1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDash1(stack["eles"], stack["last"])
}

func (c *current) onParenExpr1(expr any) (any, error) {
	return expr.(Node), nil
}

func (p *parser) callonParenExpr1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onParenExpr1(stack["expr"])
}

func (c *current) onCall1(name, args any) (any, error) {
	// Symbol followed by () - create Select with nil Receiver
	argRecord := Record(args.([]Keyed[Node]))
	return Select{
		Receiver: nil,
		Field:    name.(string),
		Args:     &argRecord,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onCall1(stack["name"], stack["args"])
}

func (c *current) onSymbol1(name any) (any, error) {
	// Just a Symbol
	return Symbol{
		Name:     name.(string),
		AutoCall: true,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonSymbol1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSymbol1(stack["name"])
}

func (c *current) onSelectOrCall1(left, name, args any) (any, error) {
	if args != nil {
		// Select followed by () - add Args field
		argRecord := Record(args.([]Keyed[Node]))
		return Select{
			Receiver: left.(Node),
			Field:    name.(string),
			Args:     &argRecord,
			Loc: &SourceLocation{
				Line:   c.pos.line,
				Column: c.pos.col,
				Length: len(string(c.text)),
			},
		}, nil
	} else {
		// Just a Select
		return Select{
			Receiver: left.(Node),
			Field:    name.(string),
			Args:     nil,
			AutoCall: true,
			Loc: &SourceLocation{
				Line:   c.pos.line,
				Column: c.pos.col,
				Length: len(string(c.text)),
			},
		}, nil
	}
}

func (p *parser) callonSelectOrCall1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSelectOrCall1(stack["left"], stack["name"], stack["args"])
}

func (c *current) onClass1(name, block any) (any, error) {
	return ClassDecl{
		Named:      name.(string),
		Value:      block.(Block),
		Visibility: PrivateVisibility, // TODO
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonClass1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onClass1(stack["name"], stack["block"])
}

func (c *current) onTypeAndValueSlot1(vis, name, type_, value any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Type_:      type_.(TypeNode),
		Value:      value.(Node),
		Visibility: vis.(Visibility),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonTypeAndValueSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndValueSlot1(stack["vis"], stack["name"], stack["type_"], stack["value"])
}

func (c *current) onValueOnlySlot1(vis, name, val any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Value:      val.(Node),
		Visibility: vis.(Visibility),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonValueOnlySlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onValueOnlySlot1(stack["vis"], stack["name"], stack["val"])
}

func (c *current) onTypeOnlySlot1(vis, name, type_ any) (any, error) {
	return SlotDecl{
		Named:      name.(string),
		Type_:      type_.(TypeNode),
		Visibility: vis.(Visibility),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonTypeOnlySlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeOnlySlot1(stack["vis"], stack["name"], stack["type_"])
}

func (c *current) onTypeAndBlockSlot1(vis, name, type_, block any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Type_: FunTypeNode{nil, type_.(TypeNode)},
		Value: FunDecl{
			Named: name.(string),
			Ret:   type_.(TypeNode),
			Form:  block.(Block),
			Loc: &SourceLocation{
				Line:   c.pos.line,
				Column: c.pos.col,
				Length: len(string(c.text)),
			},
		},
		Visibility: vis.(Visibility),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonTypeAndBlockSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndBlockSlot1(stack["vis"], stack["name"], stack["type_"], stack["block"])
}

func (c *current) onTypeAndArgsAndBlockSlot1(vis, name, args, type_, block any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Type_: FunTypeNode{args.([]SlotDecl), type_.(TypeNode)},
		Value: FunDecl{
			Named: name.(string),
			Args:  args.([]SlotDecl),
			Ret:   type_.(TypeNode),
			Form:  block.(Block),
			Loc: &SourceLocation{
				Line:   c.pos.line,
				Column: c.pos.col,
				Length: len(string(c.text)),
			},
		},
		Visibility: vis.(Visibility),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonTypeAndArgsAndBlockSlot1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAndArgsAndBlockSlot1(stack["vis"], stack["name"], stack["args"], stack["type_"], stack["block"])
}

func (c *current) onVisibility2() (any, error) {
	return PublicVisibility, nil
}

func (p *parser) callonVisibility2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVisibility2()
}

func (c *current) onVisibility4() (any, error) {
	return PrivateVisibility, nil
}

func (p *parser) callonVisibility4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVisibility4()
}

func (c *current) onWordToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonWordToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWordToken1()
}

func (c *current) onUpperToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUpperToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpperToken1()
}

func (c *current) onArgValues7(a any) (any, error) {
	return a, nil
}

func (p *parser) callonArgValues7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgValues7(stack["a"])
}

func (c *current) onArgValues1(args, last any) (any, error) {
	return sliceOfAppend[Keyed[Node]](args, last), nil
}

func (p *parser) callonArgValues1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgValues1(stack["args"], stack["last"])
}

func (c *current) onArgTypes7(a any) (any, error) {
	return a, nil
}

func (p *parser) callonArgTypes7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgTypes7(stack["a"])
}

func (c *current) onArgTypes1(args, last any) (any, error) {
	return sliceOfAppend[SlotDecl](args, last), nil
}

func (p *parser) callonArgTypes1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgTypes1(stack["args"], stack["last"])
}

func (c *current) onArgType1(slot any) (any, error) {
	return slot.(SlotDecl), nil
}

func (p *parser) callonArgType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgType1(stack["slot"])
}

func (c *current) onArgWithDefault1(name, type_, value any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Type_: type_.(TypeNode),
		Value: value.(Node),
	}, nil
}

func (p *parser) callonArgWithDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithDefault1(stack["name"], stack["type_"], stack["value"])
}

func (c *current) onArgWithBlockDefault1(name, type_, block any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Type_: type_.(TypeNode),
		Value: block.(Block),
	}, nil
}

func (p *parser) callonArgWithBlockDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithBlockDefault1(stack["name"], stack["type_"], stack["block"])
}

func (c *current) onArgWithType1(name, type_ any) (any, error) {
	return SlotDecl{
		Named: name.(string),
		Type_: type_.(TypeNode),
	}, nil
}

func (p *parser) callonArgWithType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithType1(stack["name"], stack["type_"])
}

func (c *current) onKeyValue1(key, value any) (any, error) {
	return Keyed[Node]{Key: key.(string), Value: value.(Node), Positional: false}, nil
}

func (p *parser) callonKeyValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onKeyValue1(stack["key"], stack["value"])
}

func (c *current) onPositionalValue1(value any) (any, error) {
	return Keyed[Node]{Key: "", Value: value.(Node), Positional: true}, nil
}

func (p *parser) callonPositionalValue1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPositionalValue1(stack["value"])
}

func (c *current) onNamedType1(name any) (any, error) {
	return NamedTypeNode{name.(string)}, nil
}

func (p *parser) callonNamedType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNamedType1(stack["name"])
}

func (c *current) onListType1(inner any) (any, error) {
	return ListTypeNode{inner.(TypeNode)}, nil
}

func (p *parser) callonListType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onListType1(stack["inner"])
}

func (c *current) onNonNull1(inner any) (any, error) {
	return NonNullTypeNode{inner.(TypeNode)}, nil
}

func (p *parser) callonNonNull1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNonNull1(stack["inner"])
}

func (c *current) onTypeVariable1(v any) (any, error) {
	return VariableTypeNode{v.([]byte)[0]}, nil
}

func (p *parser) callonTypeVariable1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeVariable1(stack["v"])
}

func (c *current) onDefault1(left, right any) (any, error) {
	return Default{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonDefault1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDefault1(stack["left"], stack["right"])
}

func (c *current) onAddition1(left, right any) (any, error) {
	return Addition{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonAddition1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAddition1(stack["left"], stack["right"])
}

func (c *current) onSubtraction1(left, right any) (any, error) {
	return Subtraction{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonSubtraction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSubtraction1(stack["left"], stack["right"])
}

func (c *current) onMultiplication1(left, right any) (any, error) {
	return Multiplication{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonMultiplication1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMultiplication1(stack["left"], stack["right"])
}

func (c *current) onDivision1(left, right any) (any, error) {
	return Division{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonDivision1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDivision1(stack["left"], stack["right"])
}

func (c *current) onModulo1(left, right any) (any, error) {
	return Modulo{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonModulo1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onModulo1(stack["left"], stack["right"])
}

func (c *current) onEquality1(left, right any) (any, error) {
	return Equality{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonEquality1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onEquality1(stack["left"], stack["right"])
}

func (c *current) onInequality1(left, right any) (any, error) {
	return Inequality{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonInequality1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInequality1(stack["left"], stack["right"])
}

func (c *current) onLessThanEqual1(left, right any) (any, error) {
	return LessThanEqual{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonLessThanEqual1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLessThanEqual1(stack["left"], stack["right"])
}

func (c *current) onLessThan1(left, right any) (any, error) {
	return LessThan{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonLessThan1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLessThan1(stack["left"], stack["right"])
}

func (c *current) onGreaterThanEqual1(left, right any) (any, error) {
	return GreaterThanEqual{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonGreaterThanEqual1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGreaterThanEqual1(stack["left"], stack["right"])
}

func (c *current) onGreaterThan1(left, right any) (any, error) {
	return GreaterThan{
		Left:  left.(Node),
		Right: right.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonGreaterThan1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGreaterThan1(stack["left"], stack["right"])
}

func (c *current) onList7(e any) (any, error) {
	return e, nil
}

func (p *parser) callonList7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onList7(stack["e"])
}

func (c *current) onList1(eles, last any) (any, error) {
	return List{
		Elements: sliceOfAppend[Node](eles, last),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onList1(stack["eles"], stack["last"])
}

func (c *current) onObject7(v any) (any, error) {
	return v, nil
}

func (p *parser) callonObject7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObject7(stack["v"])
}

func (c *current) onObject1(vals, last any) (any, error) {
	var slots []SlotDecl
	for _, kv := range sliceOfAppend[Keyed[Node]](vals, last) {
		slots = append(slots, SlotDecl{
			Named: kv.Key,
			Value: kv.Value,
			Loc:   kv.Value.GetSourceLocation(),
		})
	}
	return Object{
		Slots: slots,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonObject1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onObject1(stack["vals"], stack["last"])
}

func (c *current) onBlock7(e any) (any, error) {
	return e, nil
}

func (p *parser) callonBlock7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock7(stack["e"])
}

func (c *current) onBlock1(eles, last any) (any, error) {
	return Block{
		Forms: sliceOfAppend[Node](eles, last),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBlock1(stack["eles"], stack["last"])
}

func (c *current) onInt1() (any, error) {
	value, err := strconv.ParseInt(string(c.text), 10, 64)
	if err != nil {
		return nil, err
	}
	return Int{
		Value: value,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonInt1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onInt1()
}

func (c *current) onString1() (any, error) {
	c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
	value, err := strconv.Unquote(string(c.text))
	if err != nil {
		return nil, err
	}
	return String{
		Value: value,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonString1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onString1()
}

func (c *current) onQuoted1(quoter, raw any) (any, error) {
	return Quoted{
		quoter.(string),
		raw.(string),
	}, nil
}

func (p *parser) callonQuoted1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuoted1(stack["quoter"], stack["raw"])
}

func (c *current) onQuotedRawToken1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonQuotedRawToken1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onQuotedRawToken1()
}

func (c *current) onBoolean2() (any, error) {
	return Boolean{
		Value: true,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonBoolean2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean2()
}

func (c *current) onBoolean4() (any, error) {
	return Boolean{
		Value: false,
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonBoolean4() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onBoolean4()
}

func (c *current) onNull1() (any, error) {
	return Null{
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonNull1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNull1()
}

func (c *current) onConditional1(cond, block, else_ any) (any, error) {
	return Conditional{
		Condition: cond.(Node),
		Then:      block.(Block),
		Else:      else_,
	}, nil
}

func (p *parser) callonConditional1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConditional1(stack["cond"], stack["block"], stack["else_"])
}

func (c *current) onElseClause1(block any) (any, error) {
	return block.(Block), nil
}

func (p *parser) callonElseClause1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onElseClause1(stack["block"])
}

func (c *current) onLet1(name, value, expr any) (any, error) {
	return Let{
		Name:  name.(string),
		Value: value.(Node),
		Expr:  expr.(Node),
	}, nil
}

func (p *parser) callonLet1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLet1(stack["name"], stack["value"], stack["expr"])
}

func (c *current) onLambda1(args, expr any) (any, error) {
	return Lambda{
		Args: args.([]SlotDecl),
		Expr: expr.(Node),
	}, nil
}

func (p *parser) callonLambda1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambda1(stack["args"], stack["expr"])
}

func (c *current) onLambdaArgs8(a any) (any, error) {
	return a, nil
}

func (p *parser) callonLambdaArgs8() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaArgs8(stack["a"])
}

func (c *current) onLambdaArgs2(args, last any) (any, error) {
	return sliceOfAppend[SlotDecl](args, last), nil
}

func (p *parser) callonLambdaArgs2() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaArgs2(stack["args"], stack["last"])
}

func (c *current) onLambdaArgs18(arg any) (any, error) {
	return []SlotDecl{arg.(SlotDecl)}, nil
}

func (p *parser) callonLambdaArgs18() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaArgs18(stack["arg"])
}

func (c *current) onArgWithoutType1(name any) (any, error) {
	return SlotDecl{
		Named: name.(string),
	}, nil
}

func (p *parser) callonArgWithoutType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onArgWithoutType1(stack["name"])
}

func (c *current) onMatch14(m any) (any, error) {
	return m, nil
}

func (p *parser) callonMatch14() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatch14(stack["m"])
}

func (c *current) onMatch1(expr, cs, last any) (any, error) {
	return Match{
		Expr:  expr.(Node),
		Cases: sliceOfAppend[MatchCase](cs, last),
	}, nil
}

func (p *parser) callonMatch1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatch1(stack["expr"], stack["cs"], stack["last"])
}

func (c *current) onMatchCase1(pattern, expr any) (any, error) {
	return MatchCase{
		Pattern: pattern.(Pattern),
		Expr:    expr.(Node),
	}, nil
}

func (p *parser) callonMatchCase1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMatchCase1(stack["pattern"], stack["expr"])
}

func (c *current) onWildcardPattern1() (any, error) {
	return WildcardPattern{}, nil
}

func (p *parser) callonWildcardPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onWildcardPattern1()
}

func (c *current) onLiteralPattern1(lit any) (any, error) {
	return LiteralPattern{Value: lit.(Node)}, nil
}

func (p *parser) callonLiteralPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLiteralPattern1(stack["lit"])
}

func (c *current) onConstructorPattern1(name, args any) (any, error) {
	var patterns []Pattern
	if args != nil {
		patterns = args.([]Pattern)
	}
	return ConstructorPattern{
		Name: name.(string),
		Args: patterns,
	}, nil
}

func (p *parser) callonConstructorPattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onConstructorPattern1(stack["name"], stack["args"])
}

func (c *current) onPatternArgs7(p any) (any, error) {
	return p, nil
}

func (p *parser) callonPatternArgs7() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternArgs7(stack["p"])
}

func (c *current) onPatternArgs1(patterns, last any) (any, error) {
	return sliceOfAppend[Pattern](patterns, last), nil
}

func (p *parser) callonPatternArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onPatternArgs1(stack["patterns"], stack["last"])
}

func (c *current) onVariablePattern1(name any) (any, error) {
	return VariablePattern{Name: name.(string)}, nil
}

func (p *parser) callonVariablePattern1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onVariablePattern1(stack["name"])
}

func (c *current) onAssert1(message, block any) (any, error) {
	var msg Node
	if message != nil {
		msg = message.(Node)
	}
	return Assert{
		Message: msg,
		Block:   block.(Block),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonAssert1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onAssert1(stack["message"], stack["block"])
}

func (c *current) onMessageArgs1(msg any) (any, error) {
	return msg, nil
}

func (p *parser) callonMessageArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onMessageArgs1(stack["msg"])
}

func (c *current) onReassignment1(name, value any) (any, error) {
	return Reassignment{
		Name:  name.(string),
		Value: value.(Node),
		Loc: &SourceLocation{
			Line:   c.pos.line,
			Column: c.pos.col,
			Length: len(string(c.text)),
		},
	}, nil
}

func (p *parser) callonReassignment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onReassignment1(stack["name"], stack["value"])
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any

	leader        bool
	leftRecursive bool
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type ruleWithExpsStack struct {
	rule   *rule
	estack []any
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleRecursiveLeader(rule *rule) (any, bool) {
	result, ok := p.getMemoized(rule)
	if ok {
		p.restore(result.end)
		return result.v, result.b
	}

	if p.debug {
		defer p.out(p.in("recursive " + rule.name))
	}

	var (
		depth      = 0
		startMark  = p.pt
		lastResult = resultTuple{nil, false, startMark}
		lastErrors = *p.errs
	)

	for {
		lastState := p.cloneState()
		p.setMemoized(startMark, rule, lastResult)
		val, ok := p.parseRule(rule)
		endMark := p.pt
		if p.debug {
			p.printIndent("RECURSIVE", fmt.Sprintf(
				"Rule %s depth %d: %t -> %s",
				rule.name, depth, ok, string(p.sliceFrom(startMark))))
		}
		if (!ok) || (endMark.offset <= lastResult.end.offset && depth != 0) {
			p.restoreState(lastState)
			*p.errs = lastErrors
			break
		}
		lastResult = resultTuple{val, ok, endMark}
		lastErrors = *p.errs
		p.restore(startMark)
		depth++
	}

	p.restore(lastResult.end)
	p.setMemoized(startMark, rule, lastResult)
	return lastResult.v, lastResult.b
}

func (p *parser) parseRuleRecursiveNoLeader(rule *rule) (any, bool) {
	return p.parseRule(rule)
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize || rule.leftRecursive {
		if rule.leader {
			val, ok = p.parseRuleRecursiveLeader(rule)
		} else if p.memoize && !rule.leftRecursive {
			val, ok = p.parseRuleMemoize(rule)
		} else {
			val, ok = p.parseRuleRecursiveNoLeader(rule)
		}
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	isLeftRecursion := p.rstack[len(p.rstack)-1].leftRecursive
	if p.memoize && !isLeftRecursion {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize && !isLeftRecursion {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
