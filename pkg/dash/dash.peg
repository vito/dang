{
  package dash
}

Dash <- _ eles:( first:Expr rest:(Sep e:Expr { return e, nil })* {
  result := []Node{first.(Node)}
  for _, e := range sliceOf[Node](rest) {
    result = append(result, e)
  }
  return result, nil
})? _ !. {
  var elements []Node
  if eles != nil {
    elements = eles.([]Node)
  }
  return Block{
    Forms: elements,
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}

_ "whitespace" <- ([ \t\r\n] / CommentToken)*

Sep <- LineSep+ / CommaToken
LineSep <- [ \t\f]* [\r\n] _
CommaToken <- _ ',' _

Expr <- Class / Slot / Form

Form <- Conditional / Let / Lambda / Match / Assert / Infix / Term

Term <- SelectOrCall / List / Block / Literal / ParenExpr / SymbolOrCall

ParenExpr <- '(' _ expr:Form _ ')' {
  return expr.(Node), nil
}

// Handle Symbol followed by optional ()
SymbolOrCall <- Call / Symbol
Call <- name:Id args:ArgValues {
  // Symbol followed by () - create Select with nil Receiver
  argRecord := Record(args.([]Keyed[Node]))
  return Select{
    Receiver: nil,
    Field: name.(string),
    Args: &argRecord,
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}
Symbol <- name:Id {
  // Just a Symbol
  return Symbol{
    Name: name.(string),
    AutoCall: true,
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}

// Handle Select followed by optional ()
SelectOrCall <- left:Term _ DotToken _ name:Id args:ArgValues? {
  if args != nil {
    // Select followed by () - add Args field
    argRecord := Record(args.([]Keyed[Node]))
    return Select{
      Receiver: left.(Node),
      Field: name.(string),
      Args: &argRecord,
      Loc: &SourceLocation{
        Line: c.pos.line,
        Column: c.pos.col,
        Length: len(string(c.text)),
      },
    }, nil
  } else {
    // Just a Select
    return Select{
      Receiver: left.(Node),
      Field: name.(string),
      Args: nil,
      AutoCall: true,
      Loc: &SourceLocation{
        Line: c.pos.line,
        Column: c.pos.col,
        Length: len(string(c.text)),
      },
    }, nil
  }
}

Class <- ClsToken _ name:Id _ block:Block {
  return ClassDecl{
    Named: name.(string),
    Value: block.(Block),
    Visibility: PrivateVisibility, // TODO
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}
ClsToken <- "cls" !WordChar

Slot <- TypeAndArgsAndBlockSlot  // pub a(foo: Boolean!): Int! { 1 }
      / TypeAndBlockSlot         // pub a: Int! { 1 }  <- becomes a function that takes an empty record of args, can use other fields
      / TypeAndValueSlot         // pub a: Int! = 1    <- no longer required, default pre-initialized (don't need to worry about mutation)
      / ValueOnlySlot            // pub a = 1              <- as above, type inferred as Int!
      / TypeOnlySlot             // pub a: Int              <- as above, type inferred as Int!

TypeAndValueSlot <- vis:Visibility _ name:Id _ ColonToken _ type_:Type _ '=' _ value:Form {
  return SlotDecl{
    Named: name.(string),
    Type_: type_.(TypeNode),
    Value: value.(Node),
    Visibility: vis.(Visibility),
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}

ValueOnlySlot <- vis:Visibility _ name:Id _ '=' _ val:Form {
  return SlotDecl{
    Named: name.(string),
    Value: val.(Node),
    Visibility: vis.(Visibility),
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}

TypeOnlySlot <- vis:Visibility _ name:Id _ ColonToken _ type_:Type {
  return SlotDecl{
    Named: name.(string),
    Type_: type_.(TypeNode),
    Visibility: vis.(Visibility),
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}

TypeAndBlockSlot <- vis:Visibility _ name:Id _ ColonToken _ type_:Type _ block:Block {
  return SlotDecl{
    Named: name.(string),
    Type_: FunTypeNode{nil, type_.(TypeNode)},
    Value: FunDecl{
      Named: name.(string),
      Ret: type_.(TypeNode),
      Form: block.(Block),
      Loc: &SourceLocation{
        Line: c.pos.line,
        Column: c.pos.col,
        Length: len(string(c.text)),
      },
    },
    Visibility: vis.(Visibility),
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}

TypeAndArgsAndBlockSlot <- vis:Visibility _ name:Id _ args:ArgTypes _ ColonToken _ type_:Type _ block:Block {
  return SlotDecl{
    Named: name.(string),
    Type_: FunTypeNode{args.([]SlotDecl), type_.(TypeNode)},
    Value: FunDecl{
      Named: name.(string),
      Args: args.([]SlotDecl),
      Ret: type_.(TypeNode),
      Form: block.(Block),
      Loc: &SourceLocation{
        Line: c.pos.line,
        Column: c.pos.col,
        Length: len(string(c.text)),
      },
    },
    Visibility: vis.(Visibility),
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}

Visibility <- PubToken { return PublicVisibility, nil }
            / PvtToken { return PrivateVisibility, nil }
PubToken <- "pub" !WordChar
PvtToken <- "pvt" !WordChar

Id <- WordToken
WordToken <- [a-zA-Z_][a-zA-Z0-9_]* {
  return string(c.text), nil
}
WordChar <- [a-zA-Z0-9_]
UpperId <- UpperToken
UpperToken <- [A-Z][a-zA-Z0-9]* {
  return string(c.text), nil
}

ArgValues <- '(' _ args:( first:Argument rest:(Sep arg:Argument { return arg, nil })* {
  result := []Keyed[Node]{first.(Keyed[Node])}
  for _, arg := range sliceOf[Keyed[Node]](rest) {
    result = append(result, arg)
  }
  return result, nil
})? _ ')' {
  var result []Keyed[Node]
  if args != nil {
    result = args.([]Keyed[Node])
  }
  return result, nil
}
ArgTypes <- '(' _ args:( first:ArgType rest:(Sep arg:ArgType { return arg, nil })* {
  result := []SlotDecl{first.(SlotDecl)}
  for _, arg := range sliceOf[SlotDecl](rest) {
    result = append(result, arg)
  }
  return result, nil
})? _ ')' {
  var result []SlotDecl
  if args != nil {
    result = args.([]SlotDecl)
  }
  return result, nil
}
ArgType <- slot:(ArgWithDefault / ArgWithBlockDefault / ArgWithType) {
  return slot.(SlotDecl), nil
}
ArgWithDefault <- name:Id _ ColonToken _ type_:Type _ '=' _ value:Form {
  return SlotDecl{
    Named: name.(string),
    Type_: type_.(TypeNode),
    Value: value.(Node),
  }, nil
}
ArgWithBlockDefault <- name:Id _ ColonToken _ type_:Type _ block:Block {
  return SlotDecl{
    Named: name.(string),
    Type_: type_.(TypeNode),
    Value: block.(Block),
  }, nil
}
ArgWithType <- name:Id _ ColonToken _ type_:Type {
  return SlotDecl{
    Named: name.(string),
    Type_: type_.(TypeNode),
  }, nil
}

Argument <- KeyValue / PositionalValue

KeyValue <- key:WordToken ColonToken _ value:Form {
  return Keyed[Node]{Key: key.(string), Value: value.(Node), Positional: false}, nil
}

PositionalValue <- value:Form {
  return Keyed[Node]{Key: "", Value: value.(Node), Positional: true}, nil
}
ColonToken <- ':'

Type <- NonNull / NamedType / ListType / TypeVariable
NamedType <- name:UpperId {
  return NamedTypeNode{name.(string)}, nil
}
ListType <- '[' inner:Type ']' {
  return ListTypeNode{inner.(TypeNode)}, nil
}
NonNull <- inner:Type BangToken {
  return NonNullTypeNode{inner.(TypeNode)}, nil
}
TypeVariable <- v:[a-z] {
  return VariableTypeNode{v.([]byte)[0]}, nil
}

BangToken <- '!'

Infix <- Equality / Inequality / LessThanEqual / LessThan / GreaterThanEqual / GreaterThan / Default / Addition / Subtraction / Multiplication / Division / Modulo
Default <- left:Term _ InterroToken _ right:Term {
  return Default{
    Left: left.(Node),
    Right: right.(Node),
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}
InterroToken <- '?'

Addition <- left:Term _ PlusToken _ right:Term {
  return Addition{
    Left: left.(Node),
    Right: right.(Node),
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}
PlusToken <- '+'

Subtraction <- left:Term _ MinusToken _ right:Term {
  return Subtraction{
    Left: left.(Node),
    Right: right.(Node),
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}
MinusToken <- '-'

Multiplication <- left:Term _ StarToken _ right:Term {
  return Multiplication{
    Left: left.(Node),
    Right: right.(Node),
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}
StarToken <- '*'

Division <- left:Term _ SlashToken _ right:Term {
  return Division{
    Left: left.(Node),
    Right: right.(Node),
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}
SlashToken <- '/'

Modulo <- left:Term _ PercentToken _ right:Term {
  return Modulo{
    Left: left.(Node),
    Right: right.(Node),
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}
PercentToken <- '%' !(WordChar / '{') 

Equality <- left:Term _ EqualToken _ right:Term {
  return Equality{
    Left: left.(Node),
    Right: right.(Node),
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}
EqualToken <- "=="

Inequality <- left:Term _ NotEqualToken _ right:Term {
  return Inequality{
    Left: left.(Node),
    Right: right.(Node),
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}
NotEqualToken <- "!="

LessThanEqual <- left:Term _ LessEqualToken _ right:Term {
  return LessThanEqual{
    Left: left.(Node),
    Right: right.(Node),
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}
LessEqualToken <- "<="

LessThan <- left:Term _ LessToken _ right:Term {
  return LessThan{
    Left: left.(Node),
    Right: right.(Node),
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}
LessToken <- '<'

GreaterThanEqual <- left:Term _ GreaterEqualToken _ right:Term {
  return GreaterThanEqual{
    Left: left.(Node),
    Right: right.(Node),
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}
GreaterEqualToken <- ">="

GreaterThan <- left:Term _ GreaterToken _ right:Term {
  return GreaterThan{
    Left: left.(Node),
    Right: right.(Node),
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}
GreaterToken <- '>'

DotToken <- '.'

List <- '[' _ eles:( first:Form rest:(Sep e:Form { return e, nil })* {
  result := []Node{first.(Node)}
  for _, e := range sliceOf[Node](rest) {
    result = append(result, e)
  }
  return result, nil
})? _ ']' {
  var elements []Node
  if eles != nil {
    elements = eles.([]Node)
  }
  return List{
    Elements: elements,
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}

Block <- '{' _ eles:( first:Expr rest:(Sep e:Expr { return e, nil })* {
  result := []Node{first.(Node)}
  for _, e := range sliceOf[Node](rest) {
    result = append(result, e)
  }
  return result, nil
})? _ '}' {
  var elements []Node
  if eles != nil {
    elements = eles.([]Node)
  }
  return Block{
    Forms: elements,
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}

// Literals

Literal <- Int / Boolean / String / Quoted / Null

Int <- ('0' / NonZeroDecimalDigit DecimalDigit*) {
  value, err := strconv.ParseInt(string(c.text), 10, 64)
  if err != nil {
    return nil, err
  }
  return Int{
    Value: value,
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}

Exponent <- 'e'i [+-]? DecimalDigit+

String <- '"' ( !EscapedChar . / '\\' EscapeSequence )* '"' {
  c.text = bytes.Replace(c.text, []byte(`\/`), []byte(`/`), -1)
  value, err := strconv.Unquote(string(c.text))
  if err != nil {
    return nil, err
  }
  return String{
    Value: value,
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}

EscapedChar <- [\x00-\x1f"\\]

EscapeSequence <- SingleCharEscape / UnicodeEscape

SingleCharEscape <- ["\\/bfnrt]

UnicodeEscape <- 'u' HexDigit HexDigit HexDigit HexDigit

DecimalDigit <- [0-9]

NonZeroDecimalDigit <- [1-9]

HexDigit <- [0-9a-f]i

Quoted <- '%' quoter:WordToken '{' raw:QuotedRawToken '}' {
  return Quoted{
    quoter.(string),
    raw.(string),
  }, nil
}
QuotedRawToken <- [^}]* {
  return string(c.text), nil
}

Boolean <- TrueToken {
  return Boolean{
    Value: true,
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
} / FalseToken {
  return Boolean{
    Value: false,
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}
TrueToken <- "true" !WordChar
FalseToken <- "false" !WordChar

Null <- NullToken {
  return Null{
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}
NullToken <- "null" !WordChar

CommentToken <- '#' [^\n]*

// Additional language constructs

Conditional <- IfToken _ cond:Form _ block:Block else_:ElseClause? {
  return Conditional{
    Condition: cond.(Node),
    Then: block.(Block),
    Else: else_,
  }, nil
}

ElseClause <- _ ElseToken _ block:Block {
  return block.(Block), nil
}

IfToken <- "if" !WordChar
ElseToken <- "else" !WordChar

Let <- LetToken _ name:Id _ '=' _ value:Form _ InToken _ expr:Form {
  return Let{
    Name: name.(string),
    Value: value.(Node),
    Expr: expr.(Node),
  }, nil
}

LetToken <- "let" !WordChar
InToken <- "in" !WordChar

Lambda <- '\\' args:LambdaArgs _ "->" _ expr:Form {
  return Lambda{
    Args: args.([]string),
    Expr: expr.(Node),
  }, nil
}

LambdaArgs <- '(' _ args:( first:Id rest:(Sep arg:Id { return arg, nil })* {
  result := []string{first.(string)}
  for _, arg := range sliceOf[string](rest) {
    result = append(result, arg)
  }
  return result, nil
})? _ ')' {
  var result []string
  if args != nil {
    result = args.([]string)
  }
  return result, nil
} / arg:Id {
  return []string{arg.(string)}, nil
}

Match <- MatchToken _ expr:Form _ WithToken _ '{' _ cs:( first:MatchCase rest:(Sep mc:MatchCase { return mc, nil })* {
  result := []MatchCase{first.(MatchCase)}
  for _, mc := range sliceOf[MatchCase](rest) {
    result = append(result, mc)
  }
  return result, nil
})? _ '}' {
  var cases []MatchCase
  if cs != nil {
    cases = cs.([]MatchCase)
  }
  return Match{
    Expr: expr.(Node),
    Cases: cases,
  }, nil
}

MatchCase <- pattern:Pattern _ "->" _ expr:Form {
  return MatchCase{
    Pattern: pattern.(Pattern),
    Expr: expr.(Node),
  }, nil
}

Pattern <- WildcardPattern / LiteralPattern / ConstructorPattern / VariablePattern

WildcardPattern <- '_' {
  return WildcardPattern{}, nil
}

LiteralPattern <- lit:Literal {
  return LiteralPattern{Value: lit.(Node)}, nil
}

ConstructorPattern <- name:UpperId args:PatternArgs? {
  var patterns []Pattern
  if args != nil {
    patterns = args.([]Pattern)
  }
  return ConstructorPattern{
    Name: name.(string),
    Args: patterns,
  }, nil
}

PatternArgs <- '(' _ patterns:( first:Pattern rest:(Sep p:Pattern { return p, nil })* {
  result := []Pattern{first.(Pattern)}
  for _, p := range sliceOf[Pattern](rest) {
    result = append(result, p)
  }
  return result, nil
})? _ ')' {
  var result []Pattern
  if patterns != nil {
    result = patterns.([]Pattern)
  }
  return result, nil
}

VariablePattern <- name:Id {
  return VariablePattern{Name: name.(string)}, nil
}

MatchToken <- "match" !WordChar
WithToken <- "with" !WordChar

Assert <- AssertToken message:MessageArgs? _ block:Block {
  var msg Node
  if message != nil {
    msg = message.(Node)
  }
  return Assert{
    Message: msg,
    Block: block.(Block),
    Loc: &SourceLocation{
      Line: c.pos.line,
      Column: c.pos.col,
      Length: len(string(c.text)),
    },
  }, nil
}

MessageArgs <- '(' _ msg:Form _ ')' {
  return msg, nil
}

AssertToken <- "assert" !WordChar
