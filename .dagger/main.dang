type Dang {
  """
  The source directory for the Dang project.
  """
  pub source: Directory! @defaultPath(path: "/") @ignorePatterns(patterns: [
    # TODO: respecting .gitignore would be nice
    "Session.vim"
    "dang"
    "zed-dang/grammars/"
    ".env"
    ".envrc"
    ".dagger"
  ])

  """
  Return a compiled Dang binary.
  """
  pub binary(race: Boolean! = false): File! {
    let args = ["go", "build"]
    if race {
      args += ["-race"]
    }
    args += ["-o", "/bin/dang", "./cmd/dang"]
    base.withExec(args).file("/bin/dang")
  }

  """
  Build the Dang binary to ./bin/dang.
  """
  pub build: Changeset! {
    source.withFile("bin/dang", binary).changes(source)
  }

  """
  Runs all code generation procedures, e.g. go generate, tree-sitter generate.
  """
  pub generate: Changeset! {
    generated.directory(".").changes(base.directory("/src"))
  }

  """
  Run `go mod tidy` for each Go module in the repo.
  """
  pub tidy: Changeset! {
    base.withExec(["sh", "-c", """
      find . -name go.mod | while read path; do
        go -C $(dirname $path) mod tidy
      done
      """]).
      directory(".").
      changes(base.directory("."))
  }

  """
  Run the Dang language tests.
  """
  pub test(filter: String! = ""): Void {
    let args = ["go", "test", "-v", "-count=1", "./tests"]
    if filter != "" {
      args += ["-run", "/"+filter]
    }
    generated.
      withExec(args, experimentalPrivilegedNesting: true).
      sync
    null
  }

  """
  Run the Dang LSP tests.
  """
  pub testLSP(filter: String! = ""): Void {
    let args = ["go", "test", "-v", "-count=1", "./pkg/lsp/..."]
    if filter != "" {
      args += ["-run", "LSP/" + filter]
    }
    generated.
      withFile("/usr/bin/dang", binary(race: true)). # install binary for LSP tests
      withExec(args, experimentalPrivilegedNesting: true).
      sync
    null
  }

  """
  Update the Golden-style test specimens, treating the current output as
  correct.
  """
  pub testUpdate: Changeset! {
    generated.
      withExec(["go", "test", "-v", "./tests", "-update"],
        experimentalPrivilegedNesting: true).
      directory(".").
      changes(generated.directory("."))
  }

  """
  Run the tree-sitter tests.
  """
  pub treesitterTest: Void {
    generated.
      withWorkdir("./treesitter").
      withExec(["tree-sitter", "test"]).
      sync
    null
  }

  """
  Update the tree-sitter test corpus.
  """
  pub treesitterUpdate: Changeset! {
    generated.
      withDirectory("./treesitter",
        generated.
          withWorkdir("./treesitter").
          withExec(["tree-sitter", "test", "--update"]).
          directory(".")).
      directory(".").
      changes(generated.directory("."))
  }

  """
  Run the linter.
  """
  pub lint: Void {
    base.
      withEnvVariable("GOLANGCI_LINT_CACHE", "/var/cache/golangci-lint").
      withMountedCache("/var/cache/golangci-lint", cacheVolume("golangci-lint-cache")).
      withExec(["golangci-lint", "run"]).
      sync
    null
  }

  """
  Enter a terminal for debugging the Neovim LSP setup.
  """
  pub nvimDebug: Container! {
    base.
      withFile("/usr/bin/dang", binary).
      withFile("/root/.config/nvim/init.vim", source.file("pkg/lsp/testdata/config.vim")).
      withWorkdir("./pkg/lsp").
      terminal(experimentalPrivilegedNesting: true)
  }

  let base: Container! {
    apko.wolfi([
      "bash",
      "go", "golangci-lint",
      "nodejs", "npm",
      "neovim",
    ]).
      withMountedCache("/go/pkg/mod", cacheVolume("go-mod")).
      withEnvVariable("GOMODCACHE", "/go/pkg/mod").
      withMountedCache("/go/build-cache", cacheVolume("go-build")).
      withEnvVariable("GOCACHE", "/go/build-cache").
      withExec(["npm", "install", "-g", "tree-sitter-cli@v0.25.8"]).
      withDirectory("/src", source).
      withWorkdir("/src")
  }

  """
  Base with ./hack/generate ran.
  """
  let generated: Container! {
    base.withExec(["./hack/generate"])
  }
}
