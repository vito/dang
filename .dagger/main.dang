type Dang {
  """
  The source directory for the Dang project.
  """
  pub source: Directory! @defaultPath(
    path: "/",
    ignore: [
      # TODO: respecting .gitignore would be nice
      "Session.vim"
      "/dang"
      "/zed-dang/grammars/"
      "/.env"
      "/.envrc"
    ]
  )

  """
  Return a compiled Dang binary.
  """
  pub build: File! {
    goBase.build(pkg: "./cmd/dang")
  }

  """
  Re-generate and return the modified source directory.
  """
  pub generate: Directory! {
    source.diff(goBase.exec(["./hack/generate"]).directory("."))
  }

  """
  Run the tests, re-generating if necessary.
  """
  pub test: Void {
    goBase.container.
      withExec(["./hack/generate"]).
      withExec(["go", "test", "-v", "./..."],
        experimentalPrivilegedNesting: true).
      sync
    null
  }

  """
  Run the tree-sitter tests.
  """
  pub treesitterTest: Void {
    goBase.container.
      withWorkdir("./treesitter").
      withExec(["go", "generate", "-x", "./..."]).
      withExec(["tree-sitter", "test"]).
      sync
    null
  }

  """
  Run the linter.
  """
  pub lint: Container! {
    golangciLint.withCache(cacheVolume("golangci-lint-cache")).run(source)
  }

  let goBase: GoWithSource! {
    go(container: base).withCgoDisabled().withSource(source)
  }

  pub base: Container! {
    apko.wolfi(["go", "nodejs", "npm"]).
      withExec(["npm", "install", "-g", "tree-sitter-cli@v0.25.8"])
  }
}
