type Dang {
  """
  The source directory for the Dang project.
  """
  pub source: Directory! @defaultPath(
    path: "/",
    ignore: [
      # TODO: respecting .gitignore would be nice
      "Session.vim"
      "dang"
      "zed-dang/grammars/"
      ".env"
      ".envrc"
    ]
  )

  """
  Return a compiled Dang binary.
  """
  pub binary: File! {
    goBase.build(pkg: "./cmd/dang")
  }

  """
  Build the Dang binary to ./bin/dang.
  """
  pub build: Env! {
    currentEnv.withHostfs(source.withFile("bin/dang", binary))
  }

  """
  Runs all code generation procedures, e.g. go generate, tree-sitter generate.
  """
  pub generate: Env! {
    currentEnv.withHostfs(goBase.exec(["./hack/generate"]).directory("."))
  }

  """
  Run the Dang tests.
  """
  pub test(filter: String! = ""): Void {
    let args = ["go", "test", "-v"]
    if filter != "" {
      args += ["./tests", "-run", "/"+filter]
    } else {
      args += ["./..."]
    }
    goBase.container.
      withExec(["./hack/generate"]).
      withExec(args, experimentalPrivilegedNesting: true).
      sync
    null
  }

    """
    Run the tree-sitter tests.
    """
    pub treesitterTest: Void {
      goBase.container.
        withWorkdir("./treesitter").
        withExec(["go", "generate", "-x", "./..."]).
        withExec(["tree-sitter", "test"]).
        sync
      null
    }

  """
  Run the linter.
  """
  pub lint: Void {
    golangciLint.withCache(cacheVolume("golangci-lint-cache")).run(source)
    null
  }

  pub coder: LLM! {
    doug.agent(
      llm.
        withEnv(currentEnv.withModule(currentModule.meta).withHostfs(source)).
        withMCPServer(
          "lsp",
          container.
            from("golang").
            withExec(["go", "install", "golang.org/x/tools/gopls@latest"]).
            withExec(["go", "install", "github.com/isaacphi/mcp-language-server@latest"]).
            withWorkdir("/src").
            withDefaultArgs(["mcp-language-server", "--workspace", "/src", "--lsp", "gopls"])
        )
    )
  }

  pub playwright: LLM! {
    doug.agent(
      llm.
        withEnv(currentEnv.withModule(currentModule.meta)).
        withMCPServer(
          "playwright",
          container.
            from("mcr.microsoft.com/playwright/mcp")
        )
    )
  }

  let goBase: GoWithSource! {
    go(container: base).withCgoDisabled().withSource(source)
  }

  let base: Container! {
    apko.wolfi(["go", "nodejs", "npm"]).
      withExec(["npm", "install", "-g", "tree-sitter-cli@v0.25.8"])
  }
}
